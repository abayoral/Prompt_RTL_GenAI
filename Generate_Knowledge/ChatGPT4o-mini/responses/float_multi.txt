```
module float_multi (
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

    reg [2:0] counter;
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [7:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [48:0] product;
    reg guard_bit, round_bit, sticky;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 3'b000;
            z <= 32'b0;
        end else begin
            case (counter)
                3'b000: begin // Initialization Phase
                    z_mantissa <= 24'b0;
                    z_exponent <= 8'b0;
                    z_sign <= 1'b0;
                    counter <= 3'b001; 
                end

                3'b001: begin // Input Processing Phase
                    a_mantissa <= {1'b1, a[22:0]}; // include implicit leading one
                    b_mantissa <= {1'b1, b[22:0]}; // include implicit leading one
                    a_exponent <= a[30:23] - 127; // adjust bias
                    b_exponent <= b[30:23] - 127; // adjust bias
                    a_sign <= a[31];
                    b_sign <= b[31];
                    counter <= 3'b010;
                end

                3'b010: begin // Special Case Handling Phase
                    if (a[30:23] == 8'b11111111 || b[30:23] == 8'b11111111) begin
                        // Handle special cases: NaN or Infinity
                        if (a[30:23] == 8'b11111111 && a[22:0] != 0) begin
                            z <= 32'h7FC00000; // NaN
                        end else if (b[30:23] == 8'b11111111 && b[22:0] != 0) begin
                            z <= 32'h7FC00000; // NaN
                        end else if (a_exponent == 8'b11111111 || b_exponent == 8'b11111111) begin
                            z <= 32'h7F800000; // Infinity
                        end else begin
                            z <= 32'b0; // Zero
                        end
                        counter <= 3'b100; // Jump to Output Generation Phase
                    end else begin
                        counter <= 3'b011;
                    end
                end

                3'b011: begin // Normalization Phase
                    product <= a_mantissa * b_mantissa; // Multiply mantissas
                    z_exponent <= a_exponent + b_exponent + 8'b01111111; // Adjust for bias
                    z_sign <= a_sign ^ b_sign; // XNOR for result sign
                    counter <= 3'b100;
                end

                3'b100: begin // Rounding and Adjustment Phase
                    // Handle rounding: shift product and get guard, round, and sticky bits
                    guard_bit <= product[24];
                    round_bit <= product[23];
                    sticky <= |product[22:0];
                    
                    if (guard_bit && (round_bit || sticky || (z_mantissa[0] == 1))) begin
                        z_mantissa <= z_mantissa + 1; // Round up
                    end

                    if (z_mantissa[23]) begin
                        // Normalize the resulted mantissa
                        z_mantissa <= z_mantissa >> 1;
                        z_exponent <= z_exponent + 1; // Exponent adjustment
                    end
                    
                    z <= {z_sign, z_exponent + 127, z_mantissa[22:0]}; // Pack result
                    counter <= 3'b000; // Reset for the next operation
                end
                
                default: counter <= 3'b000; // Fallback to initialization on any error
            endcase
        end
    end

endmodule
```