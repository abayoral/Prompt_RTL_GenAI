```
module parallel2serial (
    input wire clk,
    input wire rst_n,
    input wire [3:0] d,
    output reg valid_out,
    output reg dout
);

    reg [1:0] cnt;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 2'b00;
            valid_out <= 1'b0;
            dout <= 1'b0;
        end else begin
            if (cnt < 2'd3) begin
                dout <= d[3 - cnt]; // Output bits from MSB to LSB
                valid_out <= 1'b1; // Assert valid output
                cnt <= cnt + 1; // Increment counter
            end else begin
                dout <= d[0]; // Output the last bit
                valid_out <= 1'b1; // Assert valid output
                cnt <= 2'b00; // Reset counter after last bit
            end
        end
    end
endmodule
```