```
module top_module(
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [63:0] q); 

    always @(posedge clk) begin
        if (load) begin
            q <= data;  // Load data into the shift register
        end else if (ena) begin
            case (amount)
                2'b00: begin
                    q <= {q[62:0], 1'b0}; // Shift left by 1 bit
                end
                2'b01: begin
                    q <= {q[55:0], 8'b0}; // Shift left by 8 bits
                end
                2'b10: begin
                    q <= {q[62], q[63:1]}; // Arithmetic shift right by 1 bit
                end
                2'b11: begin
                    q <= {q[63], q[63:8]}; // Arithmetic shift right by 8 bits
                end
            endcase
        end
    end
endmodule
```