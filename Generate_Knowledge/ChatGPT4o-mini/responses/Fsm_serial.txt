```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
); 

    // State encoding
    typedef enum reg [2:0] {
        IDLE,
        START,
        DATA,
        STOP
    } state_t;

    state_t current_state, next_state;
    reg [3:0] bit_count; // To count data bits

    // Sequential state transition
    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            bit_count <= 0;
            done <= 0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic
    always @* begin
        // Default values
        next_state = current_state;
        done = 0;

        case (current_state)
            IDLE: begin
                if (in == 0) begin // Start bit detected
                    next_state = START;
                end
            end
            
            START: begin
                if (in == 1) begin // Move to DATA state after start bit
                    bit_count = 0;
                    next_state = DATA;
                end
            end
            
            DATA: begin
                if (bit_count < 8) begin
                    bit_count = bit_count + 1; // Counting data bits
                end else begin
                    next_state = STOP; // After 8 data bits
                end
            end
            
            STOP: begin
                if (in == 1) begin // Stop bit detected
                    done = 1; // Indicate that a byte is done being received
                    next_state = IDLE; // Return to IDLE state
                end else begin
                    // Stay in STOP state until valid stop bit detected
                    next_state = STOP;
                end
            end
            
            default: next_state = IDLE; // Fallback to IDLE
        endcase
    end

endmodule
```