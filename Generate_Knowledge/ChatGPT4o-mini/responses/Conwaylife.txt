```
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q ); 

    reg [255:0] next_q;

    // Calculate the next state of the Game of Life
    always @(*) begin
        integer i, j, count;
        for (i = 0; i < 16; i = i + 1) begin
            for (j = 0; j < 16; j = j + 1) begin
                // Count alive neighbors
                count = 0;
                for (int x = -1; x <= 1; x = x + 1) begin
                    for (int y = -1; y <= 1; y = y + 1) begin
                        if (x == 0 && y == 0) continue; // Skip the cell itself
                        count = count + q[(i + x + 16) % 16 * 16 + (j + y + 16) % 16];
                    end
                end
                
                // Apply Game of Life rules
                if (q[i * 16 + j] == 1) begin
                    if (count < 2 || count > 3)
                        next_q[i * 16 + j] = 0; // Underpopulation or overpopulation
                    else
                        next_q[i * 16 + j] = 1; // Live on
                end else begin
                    if (count == 3)
                        next_q[i * 16 + j] = 1; // Reproduction
                    else
                        next_q[i * 16 + j] = 0; // Remain dead
                end
            end
        end
    end

    // Update the state on the clock edge
    always @(posedge clk) begin
        if (load) begin
            q <= data; // Load initial state
        end else begin
            q <= next_q; // Advance the state
        end
    end

endmodule
```