```
module freq_divbyfrac (
    input wire clk,
    input wire rst_n,
    output reg clk_div
);
    
    parameter MUL2_DIV_CLK = 7; // Total clock cycles to count
    parameter CLK_DIV_1 = 4;     // Clock cycles for one phase
    parameter CLK_DIV_2 = 3;     // Clock cycles for another phase
  
    reg [2:0] count;               // 3-bit counter to track clock cycles
    reg clk_phase_1, clk_phase_2;  // Phase-shifted clock signals

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            count <= 0;
            clk_phase_1 <= 0;
            clk_phase_2 <= 0;
        end else begin
            if (count < CLK_DIV_1) begin
                clk_phase_1 <= 1; // Drive phase 1 high
            end else begin
                clk_phase_1 <= 0; // Drive phase 1 low
            end
            
            if (count < CLK_DIV_2) begin
                clk_phase_2 <= 1; // Drive phase 2 high
            end else if (count < MUL2_DIV_CLK) begin
                clk_phase_2 <= 0; // Drive phase 2 low
            end
            
            // Count the clock cycles
            if (count < MUL2_DIV_CLK - 1) begin
                count <= count + 1;
            end else begin
                count <= 0; // Reset counter after reaching total count
            end
        end
    end
    
    // Combine the two phase-shifted clocks
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            clk_div <= 0;
        end else begin
            clk_div <= clk_phase_1 | clk_phase_2; // OR combination for final output
        end
    end

endmodule
```