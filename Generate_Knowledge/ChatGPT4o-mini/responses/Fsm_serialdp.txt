```
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    typedef enum reg [2:0] {
        IDLE,
        START_BIT,
        DATA_BITS,
        PARITY_BIT,
        STOP_BIT,
        DONE
    } state_t;

    state_t current_state, next_state;
    reg [3:0] bit_count; // Counts 9 bits total (8 data + 1 parity)
    reg parity_check;
    wire odd_parity;

    // Instantiate the parity checker
    parity parity_checker (
        .clk(clk),
        .reset(reset),
        .in(in),
        .odd(odd_parity)
    );

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            bit_count <= 0;
            done <= 0;
            out_byte <= 8'd0;
            parity_check <= 0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic
    always @* begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                done = 0;
                if (in == 0) // Detect start bit
                    next_state = START_BIT;
            end
            START_BIT: begin
                if (in == 1) // After start bit detected
                    next_state = DATA_BITS;
            end
            DATA_BITS: begin
                if (bit_count < 8) begin
                    out_byte[bit_count] = in; // Capture the data
                    bit_count = bit_count + 1;
                end else begin
                    next_state = PARITY_BIT;
                end
            end
            PARITY_BIT: begin
                parity_check = odd_parity; // Read the calculated parity
                next_state = STOP_BIT;
            end
            STOP_BIT: begin
                if (in == 1) // Check for the stop bit
                    next_state = DONE;
                else if (in == 0)
                    next_state = IDLE; // In case of invalid stop bit, go back to idle
            end
            DONE: begin
                done = 1; // Assert done signal
                next_state = IDLE; // Ready for next byte
                bit_count = 0; // Reset bit count
            end
        endcase
    end

endmodule
```