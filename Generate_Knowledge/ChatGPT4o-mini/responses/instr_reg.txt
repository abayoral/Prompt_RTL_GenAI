```
module instr_reg (
    input wire clk,
    input wire rst,
    input wire [1:0] fetch,
    input wire [7:0] data,
    output reg [2:0] ins,
    output reg [4:0] ad1,
    output reg [7:0] ad2
);

reg [7:0] ins_p1;
reg [7:0] ins_p2;

always @(posedge clk or negedge rst) begin
    if (!rst) begin
        ins_p1 <= 8'b0;
        ins_p2 <= 8'b0;
    end else begin
        case (fetch)
            2'b01: ins_p1 <= data;  // Fetch from the register
            2'b10: ins_p2 <= data;  // Fetch from RAM or ROM
            default: begin
                ins_p1 <= ins_p1;  // Retain current value
                ins_p2 <= ins_p2;  // Retain current value
            end
        endcase
    end
end

always @(*) begin
    ins = ins_p1[7:5]; // High 3 bits for opcode
    ad1 = ins_p1[4:0]; // Low 5 bits for register address
    ad2 = ins_p2;      // Complete 8 bits from the second source
end

endmodule
```