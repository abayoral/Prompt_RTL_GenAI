```
module div_16bit (
    input  [15:0] A,  // 16-bit dividend
    input  [7:0]  B,  // 8-bit divisor
    output reg [15:0] result, // 16-bit quotient
    output reg [15:0] odd     // 16-bit remainder
);

    reg [15:0] a_reg; // Register for holding dividend
    reg [7:0] b_reg;  // Register for holding divisor
    reg [15:0] temp;  // Temporary register for calculations
    integer i;

    // Initialize registers to handle input changes
    always @(*) begin
        a_reg = A;
        b_reg = B;
        result = 16'b0; // Initialize result
        odd = 16'b0;    // Initialize remainder
    end

    // Division process
    always @(*) begin
        temp = a_reg; // Start with the whole dividend
        odd = 0; // Reset the remainder
        result = 0; // Reset the quotient

        for (i = 15; i >= 0; i = i - 1) begin
            // Shift the current remainder left and add the next bit from the dividend
            odd = {odd[14:0], temp[i]};

            // Compare the current remainder with the divisor
            if (odd >= {8'b0, b_reg}) begin
                odd = odd - {8'b0, b_reg}; // Subtract divisor from the remainder
                result[i] = 1'b1; // Set the quotient bit
            end else begin
                result[i] = 1'b0; // Reset the quotient bit
            end
        end
    end

endmodule
```