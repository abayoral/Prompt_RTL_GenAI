```verilog
module multi_pipe_8bit (
    input wire clk,
    input wire rst_n,
    input wire mul_en_in,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    output reg mul_en_out,
    output reg [15:0] mul_out
);

    // Registers for inputs
    reg [7:0] mul_a_reg;
    reg [7:0] mul_b_reg;
    reg [15:0] partial_products [0:7];
    
    // Register for multiplication output
    reg [15:0] sum;
    reg [15:0] mul_out_reg;

    // Pipeline stage for enabling signal
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_en_out <= 0;
        end else begin
            mul_en_out <= mul_en_in;
        end
    end

    // Pipeline stage for input registers
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_a_reg <= 0;
            mul_b_reg <= 0;
            sum <= 0;
            mul_out_reg <= 0;
        end else if (mul_en_in) begin
            mul_a_reg <= mul_a;
            mul_b_reg <= mul_b;
        end
    end

    // Generate partial products in the next pipeline stage
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            partial_products[0] <= 0;
            partial_products[1] <= 0;
            partial_products[2] <= 0;
            partial_products[3] <= 0;
            partial_products[4] <= 0;
            partial_products[5] <= 0;
            partial_products[6] <= 0;
            partial_products[7] <= 0;
        end else if (mul_en_out) begin
            partial_products[0] <= mul_a_reg & {8{mul_b_reg[0]}};
            partial_products[1] <= mul_a_reg & {8{mul_b_reg[1]}};
            partial_products[2] <= mul_a_reg & {8{mul_b_reg[2]}};
            partial_products[3] <= mul_a_reg & {8{mul_b_reg[3]}};
            partial_products[4] <= mul_a_reg & {8{mul_b_reg[4]}};
            partial_products[5] <= mul_a_reg & {8{mul_b_reg[5]}};
            partial_products[6] <= mul_a_reg & {8{mul_b_reg[6]}};
            partial_products[7] <= mul_a_reg & {8{mul_b_reg[7]}};
        end
    end

    // Sum the partial products
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            sum <= 0;
            mul_out_reg <= 0;
        end else if (mul_en_out) begin
            sum <= partial_products[0] + partial_products[1] + 
                    partial_products[2] + partial_products[3] + 
                    partial_products[4] + partial_products[5] + 
                    partial_products[6] + partial_products[7];
            mul_out_reg <= sum;  // Final product
        end
    end

    // Final output
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_out <= 0;
        end else if (mul_en_out) begin
            mul_out <= mul_out_reg;
        end else begin
            mul_out <= 0; // Reset output when not enabled
        end
    end

endmodule
```