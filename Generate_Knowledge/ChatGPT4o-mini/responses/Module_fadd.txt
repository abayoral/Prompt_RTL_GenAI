```
module add1 (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (cin & (a ^ b));
endmodule

module add16 (
    input [15:0] a,
    input [15:0] b,
    input cin,
    output [15:0] sum,
    output cout
);
    wire [14:0] carry;

    // Instantiate 16 full adders
    genvar i;
    generate
        for (i = 0; i < 16; i = i + 1) begin : fa
            add1 full_adder (
                .a(a[i]),
                .b(b[i]),
                .cin(i == 0 ? cin : carry[i-1]),
                .sum(sum[i]),
                .cout(carry[i])
            );
        end
    endgenerate

    assign cout = carry[15]; // Last carry out
endmodule

module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire cout0, cout1;
    wire [15:0] sum_low, sum_high;

    // Instantiate lower 16-bit adder
    add16 adder_low (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(sum_low),
        .cout(cout0)
    );

    // Instantiate upper 16-bit adder
    add16 adder_high (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(cout0),
        .sum(sum_high),
        .cout(cout1)
    );

    // Combine results
    assign sum = {sum_high, sum_low};
endmodule
```