```verilog
module LIFObuffer (
    input wire [3:0] dataIn,
    input wire RW,
    input wire EN,
    input wire Rst,
    input wire Clk,
    output reg EMPTY,
    output reg FULL,
    output reg [3:0] dataOut
);
    reg [3:0] stack_mem [0:3];
    reg [1:0] SP; // Stack pointer, initialized to 2'b00, pointing to the top of the stack
    initial begin
        SP = 2'b00;
        dataOut = 4'b0000;
        EMPTY = 1'b1;
        FULL = 1'b0;
        // Initialize stack memory to zero
        stack_mem[0] = 4'b0000;
        stack_mem[1] = 4'b0000;
        stack_mem[2] = 4'b0000;
        stack_mem[3] = 4'b0000;
    end

    always @(posedge Clk or posedge Rst) begin
        if (Rst) begin
            SP <= 2'b00; // Reset stack pointer to 0 (empty)
            dataOut <= 4'b0000;
            EMPTY <= 1'b1;
            FULL <= 1'b0;
            // Clear stack memory
            stack_mem[0] <= 4'b0000;
            stack_mem[1] <= 4'b0000;
            stack_mem[2] <= 4'b0000;
            stack_mem[3] <= 4'b0000;
        end else if (EN) begin
            if (RW == 1'b0) begin // Push operation
                if (!FULL) begin
                    stack_mem[SP] <= dataIn; // Push data onto stack
                    SP <= SP + 1; // Move stack pointer down
                    if (SP == 2'b11) FULL <= 1'b1; // Check if full
                    EMPTY <= 1'b0; // Stack is not empty after push
                end
            end else begin // Pop operation
                if (!EMPTY) begin
                    SP <= SP - 1; // Move stack pointer up
                    dataOut <= stack_mem[SP]; // Retrieve data from stack
                    stack_mem[SP] <= 4'b0000; // Clear data from stack position
                    if (SP == 2'b00) EMPTY <= 1'b1; // Check if empty
                    FULL <= 1'b0; // Stack is not full after pop
                end
            end
        end
    end

endmodule
```