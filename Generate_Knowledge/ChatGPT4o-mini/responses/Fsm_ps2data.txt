```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    reg [1:0] state, next_state;
    reg [7:0] byte_count;
    
    parameter IDLE = 2'b00, RECEIVE = 2'b01, COMPLETE = 2'b10;
    
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            byte_count <= 0;
            out_bytes <= 0;
            done <= 0;
        end else begin
            state <= next_state;
        end
    end

    always @(*) begin
        next_state = state;
        done = 0; // Default done to 0
        case (state)
            IDLE: begin
                if (in[3] == 1) begin
                    next_state = RECEIVE;
                    byte_count = 0;
                    out_bytes = {16'b0, in}; // Store first byte
                end
            end
            
            RECEIVE: begin
                byte_count = byte_count + 1;
                if (byte_count < 2) begin
                    out_bytes = {out_bytes[23:8], in}; // Shift in next byte
                end else begin
                    next_state = COMPLETE;
                    out_bytes = {out_bytes[23:8], in}; // Final byte
                end
            end
            
            COMPLETE: begin
                done = 1; // Signal done
                if (in[3] == 1) begin
                    next_state = RECEIVE; // Start new message if first bit is 1
                    byte_count = 0;
                    out_bytes = {16'b0, in}; // Store first byte of new message
                end else begin
                    next_state = IDLE; // Wait for next valid byte
                end
            end
        endcase
    end

endmodule
```