```
module width_8to16 (
    input         clk,
    input         rst_n,
    input         valid_in,
    input  [7:0] data_in,
    output reg    valid_out,
    output reg [15:0] data_out
);

    reg [7:0] data_reg;
    reg [1:0] data_count;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'b0;
            valid_out <= 1'b0;
            data_reg <= 8'b0;
            data_count <= 2'b0;
        end else begin
            if (valid_in) begin
                if (data_count == 2'b0) begin
                    // Store the first 8-bit input
                    data_reg <= data_in;
                    data_count <= 1;
                end else if (data_count == 2'b1) begin
                    // Combine the first and second 8-bit input to form 16-bit output
                    data_out <= {data_reg, data_in};
                    valid_out <= 1'b1;
                    data_count <= 2'b0; // Reset count for next pair
                end
            end else begin
                // If we are not receiving valid data, reset valid_out
                valid_out <= 1'b0;
            end
        end
    end

endmodule
```