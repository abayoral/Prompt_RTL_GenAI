```
module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

    reg [7:0] abs_dividend;
    reg [7:0] NEG_DIVISOR;
    reg [3:0] cnt;
    reg start_cnt;
    reg [15:0] SR; // Shift Register for intermediate results

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            result <= 0;
            cnt <= 0;
            start_cnt <= 0;
            SR <= 0;
        end else begin
            if (opn_valid && !res_valid) begin
                // Initialize operands
                abs_dividend <= (sign && dividend[7]) ? ~dividend + 1'b1 : dividend; // handle signed dividend
                NEG_DIVISOR <= (sign && divisor[7]) ? ~divisor + 1'b1 : divisor; // handle signed divisor
                SR <= {8'b0, abs_dividend}; // Load SR with absolute dividend shifted
                cnt <= 1;
                start_cnt <= 1;
                res_valid <= 0;
            end

            if (start_cnt) begin
                if (cnt < 8) begin
                    // Perform division step
                    if (SR[15:8] >= NEG_DIVISOR) begin
                        SR[15:8] <= SR[15:8] + NEG_DIVISOR; // Subtract the negative divisor to perform division
                        SR[7:0] <= SR[7:0] | 1'b1; // Set quotient bit
                    end
                    // Shift left
                    SR <= {SR[14:0], 1'b0}; // Shift left by 1
                    cnt <= cnt + 1;
                end else begin
                    // Division done, set res_valid and prepare result
                    result <= {SR[15:8], SR[7:0]}; // Result = {remainder, quotient}
                    res_valid <= 1;
                    cnt <= 0;
                    start_cnt <= 0;
                end
            end
        end
    end

endmodule
```