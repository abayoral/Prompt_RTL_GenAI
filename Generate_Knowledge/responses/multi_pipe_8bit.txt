```verilog
module multi_pipe_8bit(
    input wire clk,
    input wire rst_n,
    input wire mul_en_in,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    output reg mul_en_out,
    output reg [15:0] mul_out
);

    reg [7:0] mul_a_reg, mul_b_reg;
    reg [15:0] temp [0:7];
    reg [15:0] sum [0:7];
    reg [15:0] mul_out_reg;
    reg [3:0] i;

    // Register to capture enable signal
    reg mul_en_out_reg;

    always @(posedge clk or negedge rst_n) begin
        if (~rst_n) begin
            // Reset all pipeline registers
            mul_a_reg <= 8'b0;
            mul_b_reg <= 8'b0;
            mul_out_reg <= 16'b0;
            mul_en_out_reg <= 1'b0;
            for (i = 0; i < 8; i = i + 1) begin
                temp[i] <= 16'b0;
                sum[i] <= 16'b0;
            end
        end else begin
            // Capture inputs and enable signal
            if (mul_en_in) begin
                mul_a_reg <= mul_a;
                mul_b_reg <= mul_b;
            end

            // Generate partial products
            for (i = 0; i < 8; i = i + 1) begin
                temp[i] <= mul_b_reg[i] ? (mul_a_reg << i) : 16'b0;
            end

            // Calculate partial sums
            sum[0] <= temp[0];
            for (i = 1; i < 8; i = i + 1) begin
                sum[i] <= sum[i-1] + temp[i];
            end

            // Store the final product
            mul_out_reg <= sum[7];
            mul_en_out_reg <= mul_en_in;
        end
    end

    // Output results based on the enable signal
    always @(posedge clk) begin
        if (~rst_n) begin
            mul_en_out <= 1'b0;
            mul_out <= 16'b0;
        end else begin
            mul_en_out <= mul_en_out_reg;
            mul_out <= mul_en_out_reg ? mul_out_reg : 16'b0;
        end
    end

endmodule
```