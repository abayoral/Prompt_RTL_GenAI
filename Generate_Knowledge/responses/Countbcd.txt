```verilog
module bcd_digit (
    input clk,
    input reset,
    input enable,
    output reg [3:0] q,
    output reg ena
);
    always @(posedge clk) begin
        if (reset) begin
            q <= 4'd0;
            ena <= 1'b0;
        end
        else if (enable) begin
            if (q == 4'd9) begin
                q <= 4'd0;
                ena <= 1'b1;
            end
            else begin
                q <= q + 4'd1;
                ena <= 1'b0;
            end
        end
    end
endmodule

module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q
);
    wire ena0, ena1, ena2;

    // Instantiate BCD digits
    bcd_digit digit0 (
        .clk(clk),
        .reset(reset),
        .enable(1'b1),
        .q(q[3:0]),
        .ena(ena0)
    );

    bcd_digit digit1 (
        .clk(clk),
        .reset(reset),
        .enable(ena0),
        .q(q[7:4]),
        .ena(ena1)
    );

    bcd_digit digit2 (
        .clk(clk),
        .reset(reset),
        .enable(ena1),
        .q(q[11:8]),
        .ena(ena2)
    );

    bcd_digit digit3 (
        .clk(clk),
        .reset(reset),
        .enable(ena2),
        .q(q[15:12]),
        .ena()
    );

    // Connecting the enable signals to the output
    assign ena[1] = ena0;
    assign ena[2] = ena1;
    assign ena[3] = ena2;
endmodule
```