```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);

    // FSM states
    typedef enum reg [3:0] {
        IDLE       = 4'd0,
        START_BIT  = 4'd1,
        DATA_BIT_0 = 4'd2,
        DATA_BIT_1 = 4'd3,
        DATA_BIT_2 = 4'd4,
        DATA_BIT_3 = 4'd5,
        DATA_BIT_4 = 4'd6,
        DATA_BIT_5 = 4'd7,
        DATA_BIT_6 = 4'd8,
        DATA_BIT_7 = 4'd9,
        STOP_BIT   = 4'd10,
        WAIT_STOP  = 4'd11
    } state_t;

    state_t current_state, next_state;
    reg [7:0] data_bits; // Hold the 8 bits of the byte
    reg [3:0] bit_counter; // Counter for bit positions

    // State register
    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            done <= 0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next-state logic
    always @(*) begin
        next_state = current_state;
        done = 0;

        case (current_state)
            IDLE: begin
                if (in == 0) // Detect the start bit
                    next_state = START_BIT;
            end

            START_BIT: begin
                next_state = DATA_BIT_0;
            end

            DATA_BIT_0: begin
                data_bits[0] = in;
                next_state = DATA_BIT_1;
            end

            DATA_BIT_1: begin
                data_bits[1] = in;
                next_state = DATA_BIT_2;
            end

            DATA_BIT_2: begin
                data_bits[2] = in;
                next_state = DATA_BIT_3;
            end

            DATA_BIT_3: begin
                data_bits[3] = in;
                next_state = DATA_BIT_4;
            end

            DATA_BIT_4: begin
                data_bits[4] = in;
                next_state = DATA_BIT_5;
            end

            DATA_BIT_5: begin
                data_bits[5] = in;
                next_state = DATA_BIT_6;
            end

            DATA_BIT_6: begin
                data_bits[6] = in;
                next_state = DATA_BIT_7;
            end

            DATA_BIT_7: begin
                data_bits[7] = in;
                next_state = STOP_BIT;
            end

            STOP_BIT: begin
                if (in == 1) begin // Correct stop bit
                    done = 1;
                    next_state = IDLE;
                end else begin // Incorrect stop bit, wait till we see a stop bit
                    next_state = WAIT_STOP;
                end
            end

            WAIT_STOP: begin
                if (in == 1) begin
                    next_state = IDLE;
                end
            end

            default: begin
                next_state = IDLE;
            end
        endcase
    end

endmodule
```