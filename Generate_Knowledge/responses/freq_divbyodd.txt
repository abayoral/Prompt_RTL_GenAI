```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5 // odd divisor, default is 5
)(
    input wire clk,      // input clock signal
    input wire rst_n,    // active low reset
    output reg clk_div   // output divided clock signal
);

    // Check that NUM_DIV is odd at compile time
    initial begin
        if ((NUM_DIV % 2) == 0) begin
            $display("ERROR: NUM_DIV must be an odd number.");
            $finish;
        end
    end

    reg [31:0] cnt1;
    reg [31:0] cnt2;
    reg clk_div1;
    reg clk_div2;
    
    // Counter for positive edge handling
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 0;
        end else if (cnt1 == (NUM_DIV - 1)) begin
            cnt1 <= 0;
            clk_div1 <= ~clk_div1; // Toggle clk_div1
        end else begin
            cnt1 <= cnt1 + 1;
        end
    end

    // Counter for negative edge handling
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 0;
        end else if (cnt2 == (NUM_DIV - 1)) begin
            cnt2 <= 0;
            clk_div2 <= ~clk_div2; // Toggle clk_div2
        end else begin
            cnt2 <= cnt2 + 1;
        end
    end

    // Output OR of clk_div1 and clk_div2
    always @(*) begin
        clk_div = clk_div1 | clk_div2;
    end

endmodule
```