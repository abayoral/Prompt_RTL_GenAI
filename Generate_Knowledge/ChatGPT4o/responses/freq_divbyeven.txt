```verilog
module freq_diveven #(parameter NUM_DIV = 4) (
    input wire clk,
    input wire rst_n,
    output reg clk_div
);

    // Ensure NUM_DIV is even
    initial begin
        if (NUM_DIV % 2 !== 0) begin
            $error("NUM_DIV must be an even number.");
        end
    end

    // Compute the number of bits required for the counter
    localparam CNT_WIDTH = 4; // Adjust CNT_WIDTH as necessary for larger NUM_DIV

    reg [CNT_WIDTH-1:0] cnt;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 0;
            clk_div <= 0;
        end else begin
            if (cnt < (NUM_DIV / 2) - 1) begin
                cnt <= cnt + 1;
            end else begin
                cnt <= 0;
                clk_div <= ~clk_div;
            end
        end
    end

endmodule
```

This Verilog code implements a frequency divider module `freq_diveven` that toggles the `clk_div` output signal after counting to half of the specified even division factor `NUM_DIV`. The module uses an active-low reset signal to initialize the counter and output signal. The counter's width is set to 4 bits, but it may need adjustment if `NUM_DIV` exceeds the range that can be accommodated by a 4-bit counter. This implementation assumes that `NUM_DIV` is an even number, and it incorporates a runtime check in the initial block to ensure this condition is met.