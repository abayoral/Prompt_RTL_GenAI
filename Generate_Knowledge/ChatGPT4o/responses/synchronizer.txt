```verilog
module synchronizer (
    input wire clk_a,
    input wire arstn,
    input wire [3:0] data_in,
    input wire data_en,
    input wire clk_b,
    input wire brstn,
    output reg [3:0] dataout
);

// Registers in clk_a domain
reg [3:0] data_reg;
reg en_data_reg;

// Registers in clk_b domain for enable signal delay
reg en_clap_one;
reg en_clap_two;

// Data register in clk_b domain
reg [3:0] data_b_reg;

// clk_a domain logic
always @(posedge clk_a or negedge arstn) begin
    if (!arstn) begin
        data_reg <= 4'b0000;
        en_data_reg <= 1'b0;
    end else begin
        if (data_en) begin
            data_reg <= data_in;
        end
        en_data_reg <= data_en;
    end
end

// clk_b domain logic for enable signal delay
always @(posedge clk_b or negedge brstn) begin
    if (!brstn) begin
        en_clap_one <= 1'b0;
        en_clap_two <= 1'b0;
    end else begin
        en_clap_one <= en_data_reg;
        en_clap_two <= en_clap_one;
    end
end

// clk_b domain logic for output data synchronization
always @(posedge clk_b or negedge brstn) begin
    if (!brstn) begin
        data_b_reg <= 4'b0000;
        dataout <= 4'b0000;
    end else begin
        if (en_clap_two) begin
            data_b_reg <= data_reg;
        end
        dataout <= data_b_reg;
    end
end

endmodule
```