```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
);

    reg [1:0] state, next_state;
    
    // State encoding
    localparam WAIT = 2'd0;
    localparam BYTE1 = 2'd1;
    localparam BYTE2 = 2'd2;
    localparam BYTE3 = 2'd3;

    // State transition logic (combinational)
    always @(*) begin
        case (state)
            WAIT: begin
                if (in[3] == 1'b1)
                    next_state = BYTE1;
                else
                    next_state = WAIT;
            end
            BYTE1: next_state = BYTE2;
            BYTE2: next_state = BYTE3;
            BYTE3: next_state = WAIT;
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk) begin
        if (reset) 
            state <= WAIT;
        else 
            state <= next_state;
    end
    
    // Output logic
    always @(posedge clk) begin
        if (reset)
            done <= 1'b0;
        else begin
            if (state == BYTE3)
                done <= 1'b1;
            else
                done <= 1'b0;
        end
    end

endmodule
```