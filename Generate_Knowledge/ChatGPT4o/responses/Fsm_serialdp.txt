```verilog
module parity (
    input clk,
    input reset,
    input in,
    output reg odd
);

    always @(posedge clk)
        if (reset) odd <= 0;
        else if (in) odd <= ~odd;

endmodule

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

    // Internal signal and state definitions
    reg [3:0] bit_count;
    reg [7:0] shift_reg;
    reg receiving;
    reg done_reg;
    reg parity_reset;
    wire parity_odd;

    // Instantiate the parity checker
    parity parity_inst (
        .clk(clk),
        .reset(parity_reset),
        .in(in),
        .odd(parity_odd)
    );

    // FSM states
    parameter IDLE = 2'd0, RECEIVE = 2'd1, CHECK_PARITY = 2'd2, DONE = 2'd3;
    reg [1:0] state, next_state;

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (!in) // Wait for start bit (start bit is low)
                    next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_count == 9) // 8 data bits + 1 parity bit received
                    next_state = CHECK_PARITY;
            end
            CHECK_PARITY: begin
                if (parity_odd) // Check odd parity
                    next_state = DONE;
                else
                    next_state = IDLE; // Invalid parity, reset to IDLE
            end
            DONE: begin
                if (in) // Stop bit is high
                    next_state = IDLE;
            end
        endcase
    end

    // Output logic and internal logic
    always @(posedge clk) begin
        if (state == IDLE) begin
            bit_count <= 0;
            receiving <= 0;
            done_reg <= 0;
        end else if (state == RECEIVE) begin
            bit_count <= bit_count + 1;
            receiving <= 1;
            if (bit_count < 8) // Store the 8 data bits
                shift_reg[bit_count] <= in;
            parity_reset <= (bit_count == 0); // Reset parity checker on start of data reception
        end else if (state == CHECK_PARITY) begin
            receiving <= 0;
            done_reg <= 0;
        end else if (state == DONE) begin
            out_byte <= shift_reg;
            receiving <= 0;
            done_reg <= 1;
        end
    end

    assign done = done_reg;

endmodule
```