```verilog
module sub_64bit (
    input [63:0] A,
    input [63:0] B,
    output [63:0] result,
    output overflow
);
    wire [63:0] B_neg;
    wire carry_out;
    
    // Negate B using two's complement (invert and add one)
    assign B_neg = ~B + 1;

    // Perform the subtraction (A + (-B))
    assign {carry_out, result} = A + B_neg;

    // Overflow detection logic
    // Overflow occurs when:
    // 1. A is positive and B is negative, and result is negative -> A[63] == 0, B[63] == 1, result[63] == 1
    // 2. A is negative and B is positive, and result is positive -> A[63] == 1, B[63] == 0, result[63] == 0
    assign overflow = (A[63] == 0 && B[63] == 1 && result[63] == 1) || 
                      (A[63] == 1 && B[63] == 0 && result[63] == 0);
endmodule
```