```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // State encoding
    typedef enum logic [1:0] {
        IDLE = 2'b00,
        START = 2'b01,
        RECEIVE = 2'b10,
        STOP = 2'b11
    } state_t;
    
    state_t state, next_state;
    reg [2:0] bit_count;
    reg [7:0] shift_register;

    // FSM: State register
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // FSM: Next-state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (~in) // Start bit detected (active low)
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_count == 3'd7)
                    next_state = STOP;
                else
                    next_state = RECEIVE;
            end
            STOP: begin
                if (in) // Stop bit detected (active high)
                    next_state = IDLE;
                else
                    next_state = STOP; // Wait for stop bit
            end
            default: next_state = IDLE;
        endcase
    end

    // Datapath and control signals
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            bit_count <= 3'd0;
            shift_register <= 8'b0;
        end else begin
            case (state)
                IDLE: begin
                    // Do nothing
                end
                START: begin
                    bit_count <= 3'd0;
                    shift_register <= 8'b0;
                end
                RECEIVE: begin
                    shift_register <= {in, shift_register[7:1]}; // Shift in serial bit
                    bit_count <= bit_count + 3'd1;
                end
                STOP: begin
                    // Do nothing
                end
            endcase
        end
    end

    // Output logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            done <= 1'b0;
            out_byte <= 8'b0;
        end else begin
            case (state)
                STOP: begin
                    if (in) begin // Stop bit is correct
                        done <= 1'b1;
                        out_byte <= shift_register;
                    end else begin
                        done <= 1'b0;
                    end
                end
                default: begin
                    done <= 1'b0;
                end
            endcase
        end
    end

endmodule
```