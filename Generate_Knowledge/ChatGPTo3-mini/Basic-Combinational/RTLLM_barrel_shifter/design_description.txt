Imagine you are a seasoned professional specializing in Verilog design, specifically tasked with designing an efficient barrel shifter module. The focus is on creating a module named `barrel_shifter`, which will handle bit rotation effectively. This barrel shifter is designed for 8-bit inputs and utilizes a 3-bit control signal to determine the number of bit positions to be shifted or rotated.

To delve deeper into the specifications:

- **Module Overview**: The `barrel_shifter` module's primary role is to shift or rotate bits of an 8-bit input (`in`) by leveraging a control signal (`ctrl`). The operation revolves around shifting the bits in a manner dictated by the control logic.

- **Input Ports**:
  - `in [7:0]`: This is the primary 8-bit input vector to the module, representing the data that needs to be shifted.
  - `ctrl [2:0]`: A critical 3-bit control signal, where each bit independently determines a specific positional shift: `ctrl[0]` for shifting by 1 bit, `ctrl[1]` for shifting by 2 bits, and `ctrl[2]` for shifting by 4 bits.

- **Output Ports**:
  - `out [7:0]`: The 8-bit output vector, reflecting the final result after the input data has been shifted according to the specified control signal.

- **Implementation Details**:
  - The shifting process is structured in layered stages, with each stage corresponding to a bit-controlled shift magnitude. 
  - The design employs a series of 2-to-1 multiplexers (`mux2X1`), each acting as a decision point based on the current stage's control bit, to alternate between proceeding with an original or shifted version of the input.
  - At each stage, the module evaluates the respective control bit: 
    - If `ctrl[2]` is asserted, the input undergoes a primary shift by 4 positions.
    - Subsequent adjustments include shifts by 2 positions and/or 1 position, as dictated by `ctrl[1]` and `ctrl[0]`.
  - The `mux2X1` component is pivotal in selecting the appropriate shifted input, forming a crucial part of the logical flow to achieve the desired output.

Considering these technical aspects, your task is to precisely draft the complete Verilog code incorporating all these attributes, ensuring correct functioning of the barrel shifter as specified. Please provide a detailed and structured code implementation that realizes this functionality in Verilog, utilizing the described approach and components like `mux2X1` to achieve the desired dynamic bit shifting.