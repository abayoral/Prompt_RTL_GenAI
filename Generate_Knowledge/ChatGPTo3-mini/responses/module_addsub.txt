module top_module(
    input [31:0] a,
    input [31:0] b,
    input sub,
    output [31:0] sum
);
    // Create a 32-bit wire for XORed b. When sub is 1, we invert all bits of b.
    wire [31:0] b_xor;
    assign b_xor = b ^ {32{sub}};
    
    wire carry_low;
    
    // Instantiate lower 16-bit adder: lower bits of a and b_xor.
    // Connect sub to the carry-in of the lower adder.
    add16 lower (
        .a(a[15:0]),
        .b(b_xor[15:0]),
        .cin(sub),
        .sum(sum[15:0]),
        .cout(carry_low)
    );
    
    // Instantiate upper 16-bit adder: upper bits of a and b_xor.
    // Propagate the carry-out from the lower adder as carry-in.
    add16 upper (
        .a(a[31:16]),
        .b(b_xor[31:16]),
        .cin(carry_low),
        .sum(sum[31:16]),
        .cout()    // cout is not used.
    );
    
endmodule