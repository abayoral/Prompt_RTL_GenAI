module multi_pipe_8bit(
    input         clk,
    input         rst_n,
    input         mul_en_in,
    input  [7:0]  mul_a,
    input  [7:0]  mul_b,
    output        mul_en_out,
    output [15:0] mul_out
);

  // Stage 1 registers: Capture the inputs when multiplication is enabled.
  reg [7:0]  mul_a_reg;     // Registered multiplicand
  reg [7:0]  mul_b_reg;     // Registered multiplier
  reg        mul_en_pipe1;  // Pipeline enable for stage 1

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_a_reg    <= 8'b0;
      mul_b_reg    <= 8'b0;
      mul_en_pipe1 <= 1'b0;
    end else begin
      if (mul_en_in) begin
        mul_a_reg    <= mul_a;
        mul_b_reg    <= mul_b;
        mul_en_pipe1 <= 1'b1;
      end else begin
        mul_en_pipe1 <= 1'b0;
      end
    end
  end

  // Stage 2: Generate partial products and compute the partial sum.
  // Each bit of the multiplier (mul_b_reg) controls whether the multiplicand (mul_a_reg)
  // is shifted appropriately and added to form the product.
  wire [15:0] temp0 = (mul_b_reg[0]) ? {8'b0, mul_a_reg}         : 16'b0;
  wire [15:0] temp1 = (mul_b_reg[1]) ? {7'b0,  mul_a_reg, 1'b0}     : 16'b0;
  wire [15:0] temp2 = (mul_b_reg[2]) ? {6'b0,  mul_a_reg, 2'b0}       : 16'b0;
  wire [15:0] temp3 = (mul_b_reg[3]) ? {5'b0,  mul_a_reg, 3'b0}       : 16'b0;
  wire [15:0] temp4 = (mul_b_reg[4]) ? {4'b0,  mul_a_reg, 4'b0}       : 16'b0;
  wire [15:0] temp5 = (mul_b_reg[5]) ? {3'b0,  mul_a_reg, 5'b0}       : 16'b0;
  wire [15:0] temp6 = (mul_b_reg[6]) ? {2'b0,  mul_a_reg, 6'b0}       : 16'b0;
  wire [15:0] temp7 = (mul_b_reg[7]) ? {1'b0,  mul_a_reg, 7'b0}       : 16'b0;

  // Sum the partial products to form the full 16-bit product.
  wire [15:0] partial_sum = temp0 + temp1 + temp2 + temp3 +
                            temp4 + temp5 + temp6 + temp7;

  // Pipeline stage 2: Store the partial sum and pass along the enable signal.
  reg [15:0] sum_reg;      // Register for holding the partial sum
  reg        mul_en_pipe2; // Pipeline enable for stage 2

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      sum_reg       <= 16'b0;
      mul_en_pipe2  <= 1'b0;
    end else begin
      // Latch the computed partial sum into the pipeline register.
      if (mul_en_pipe1)
        sum_reg <= partial_sum;
      // Pass along the enable signal.
      mul_en_pipe2 <= mul_en_pipe1;
    end
  end

  // Stage 3: Final output stage.
  // If multiplication is active in this stage, capture the final product into a register.
  reg [15:0] mul_out_reg; // Final product register

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_out_reg <= 16'b0;
    end else begin
      if (mul_en_pipe2)
        mul_out_reg <= sum_reg;
      else
        mul_out_reg <= 16'b0;
    end
  end

  // Connect the pipeline enable and final product to the module outputs.
  assign mul_en_out = mul_en_pipe2;
  assign mul_out    = mul_out_reg;

endmodule