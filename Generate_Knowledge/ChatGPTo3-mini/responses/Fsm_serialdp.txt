module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // State declaration
    localparam STATE_IDLE   = 2'd0;
    localparam STATE_DATA   = 2'd1;
    localparam STATE_PARITY = 2'd2;
    localparam STATE_STOP   = 2'd3;

    reg [1:0] state, next_state;
    reg [2:0] bit_counter;  // counts from 0 to 7 for the 8 data bits
    reg [7:0] data_reg;     // shift register for storing data bits
    
    // Control signals for parity module instance.
    reg parity_reset;
    reg parity_en;  // enable signal: when high, the current 'in' bit is forwarded to the parity module.
    wire parity_out; // output from parity module

    // Mux the bit going into parity module: feed 'in' when enabled, else 0.
    wire parity_in = parity_en ? in : 1'b0;
    
    // Parity module instantiation (computes odd parity over 9 bits: 8 data + 1 parity bit).
    parity parity_inst (
        .clk(clk),
        .reset(parity_reset),
        .in(parity_in),
        .odd(parity_out)
    );

    // FSM and datapath (synchronous process)
    always @(posedge clk) begin
        if (reset) begin
            state       <= STATE_IDLE;
            bit_counter <= 3'd0;
            data_reg    <= 8'd0;
            out_byte   <= 8'd0;
            done       <= 1'b0;
            // Assert parity reset to initialize parity module.
            parity_reset <= 1'b1;
            parity_en    <= 1'b0;
        end else begin
            // Default assignments (non-blocking updates)
            done         <= 1'b0;
            parity_reset <= 1'b0; // normally not resetting parity module except at start of frame
            
            case (state)
                STATE_IDLE: begin
                    // In idle, no bit is fed into parity module.
                    parity_en    <= 1'b0;
                    bit_counter  <= 3'd0;
                    // Wait for start bit (logic 0).
                    if (in == 1'b0) begin
                        // Found start bit. Reset parity module to start counting for this new frame.
                        parity_reset <= 1'b1;
                        // Enable feeding bits to parity calculator.
                        parity_en    <= 1'b1;
                        state        <= STATE_DATA;
                    end
                end

                STATE_DATA: begin
                    // Capture each of the 8 data bits.
                    // The protocol sends LSB first: store the bit at position bit_counter.
                    data_reg[bit_counter] <= in;
                    bit_counter <= bit_counter + 3'd1;
                    // Stay in DATA state until 8 bits are received.
                    if (bit_counter == 3'd7) begin
                        state <= STATE_PARITY;
                    end
                end

                STATE_PARITY: begin
                    // This cycle, sample the parity bit and feed it to the parity module.
                    parity_en <= 1'b1;
                    state     <= STATE_STOP;
                end

                STATE_STOP: begin
                    // Do not feed stop bit into the parity module.
                    parity_en <= 1'b0;
                    // The stop bit must be '1'. If not, wait until a '1' is observed.
                    if (in == 1'b1) begin
                        // Only if parity check passes (odd parity computed must be 1) do we assert done.
                        if (parity_out == 1'b1) begin
                            out_byte <= data_reg;
                            done <= 1'b1;
                        end
                        state <= STATE_IDLE;
                    end
                    // Else, remain in STATE_STOP until a valid stop bit arrives.
                end

                default: state <= STATE_IDLE;
            endcase
        end
    end

endmodule

// Provided parity module for computing odd parity.
module parity (
    input clk,
    input reset,
    input in,
    output reg odd
);
    always @(posedge clk)
        if (reset)
            odd <= 0;
        else if (in)
            odd <= ~odd;
endmodule