module multi_8bit(
    input         clk,      // Clock signal for sequential operations
    input         rst,      // Synchronous reset signal (active high)
    input  [7:0]  A,        // 8-bit multiplicand
    input  [7:0]  B,        // 8-bit multiplier
    output reg [15:0] product  // 16-bit product output
);

    // Internal registers
    reg [15:0] multiplicand; // Will hold A shifted appropriately
    reg [7:0]  multiplier;   // Local copy of B, used for bit‚Äêchecking
    reg [3:0]  count;        // 4-bit counter (0 to 8)

    // Sequential process: On reset, initialize registers.
    // Then, for each clock cycle, check the least significant bit of the multiplier.
    // If it is 1, add the current multiplicand (which is shifted left accordingly) to product.
    // After that, shift the multiplicand left by one (preparing for next bit)
    // and shift the multiplier right by one (to process the next bit).
    always @(posedge clk) begin
        if (rst) begin
            product      <= 16'b0;
            multiplicand <= {8'b0, A};  // Initialize multiplicand as A in lower 8-bits (or simply A)
            multiplier   <= B;
            count        <= 4'd0;
        end else if (count < 4'd8) begin
            if (multiplier[0])
                product <= product + multiplicand;
            multiplicand <= multiplicand << 1;
            multiplier   <= multiplier >> 1;
            count <= count + 4'd1;
        end
        // When count reaches 8, the multiplication operation is complete.
    end

endmodule