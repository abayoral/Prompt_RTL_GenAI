module freq_divbyodd #(
    parameter integer NUM_DIV = 5  // Must be an odd number
)(
    input  wire clk,
    input  wire rst_n,
    output wire clk_div
);

    // Internal registers and counters for edge processing
    reg [31:0] cnt1;
    reg [31:0] cnt2;
    reg clk_div1;
    reg clk_div2;

    // Compute half division value (truncated division is acceptable for odd NUM_DIV)
    localparam integer HALF = NUM_DIV/2;

    // Generate clk_div1 on the rising edge of clk
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1     <= 0;
            clk_div1 <= 0;
        end else begin
            // Increment the counter. Reset if the maximum is reached.
            if (cnt1 == NUM_DIV - 1)
                cnt1 <= 0;
            else
                cnt1 <= cnt1 + 1;
                
            // Toggle clk_div1 at the designated half count
            if (cnt1 == HALF)
                clk_div1 <= ~clk_div1;
        end
    end

    // Generate clk_div2 on the falling edge of clk
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2     <= 0;
            clk_div2 <= 0;
        end else begin
            // Increment the counter. Reset if the maximum is reached.
            if (cnt2 == NUM_DIV - 1)
                cnt2 <= 0;
            else
                cnt2 <= cnt2 + 1;
                
            // Toggle clk_div2 at the designated half count
            if (cnt2 == HALF)
                clk_div2 <= ~clk_div2;
        end
    end

    // The final divided clock is the logical OR of the two auxiliary clocks.
    assign clk_div = clk_div1 | clk_div2;

endmodule