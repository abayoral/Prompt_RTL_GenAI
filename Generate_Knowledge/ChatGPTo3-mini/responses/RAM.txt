module dual_port_ram #(parameter WIDTH = 6, parameter DEPTH = 8, parameter ADDR_WIDTH = 3) (
    input                     clk,
    input                     rst_n,
    input                     write_en,
    input  [ADDR_WIDTH-1:0]   write_addr,
    input  [WIDTH-1:0]        write_data,
    input                     read_en,
    input  [ADDR_WIDTH-1:0]   read_addr,
    output reg [WIDTH-1:0]    read_data
);

  // Memory declaration: DEPTH locations of WIDTH bits each.
  reg [WIDTH-1:0] mem [0:DEPTH-1];
  integer i;

  // Write process and memory initialization.
  // This always block handles synchronous write operations and reset.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      // Synchronously reset memory contents to 0.
      for (i = 0; i < DEPTH; i = i + 1)
        mem[i] <= {WIDTH{1'b0}};
    end
    else begin
      if (write_en) begin
        mem[write_addr] <= write_data;
      end
    end
  end

  // Read process.
  // This always block provides synchronous read functionality.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
      read_data <= {WIDTH{1'b0}};
    else begin
      if (read_en)
        read_data <= mem[read_addr];
      else
        read_data <= read_data; // hold last value if read is not enabled.
    end
  end

endmodule