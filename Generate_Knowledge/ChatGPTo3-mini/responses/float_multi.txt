module float_multi(
    input         clk,
    input         rst,
    input  [31:0] a,
    input  [31:0] b,
    output reg [31:0] z
);

  // Cycle control
  reg [2:0] counter;

  // Component extraction registers
  reg        a_sign, b_sign;
  reg [9:0]  a_exponent, b_exponent, z_exponent;  // stored as 10‐bit (upper 2 bits zero‐extended)
  reg [23:0] a_mantissa, b_mantissa, z_mantissa;    // 24-bit mantissas (implicit bit included)

  // Intermediate signals
  reg [49:0] product;
  reg        guard_bit, round_bit, sticky;
  reg        special_case; // flag indicates that a special case (NaN, infinity, zero) was detected

  // Temporary exponent calculation (can be negative)
  reg signed [9:0] temp_exponent;

  // Main sequential always block with multi-cycle pipeline stages.
  always @(posedge clk) begin
    if (rst) begin
      counter      <= 0;
      z            <= 32'b0;
      special_case <= 0;
    end
    else begin
      // Pipeline cycle control.
      case (counter)
        3'd0: begin
          // Extraction Phase:
          // Extract sign bits.
          a_sign <= a[31];
          b_sign <= b[31];
          // Extract exponent bits (stored as 10 bits with zero extension).
          a_exponent <= {2'b00, a[30:23]};
          b_exponent <= {2'b00, b[30:23]};
          // Extract mantissas with implicit leading bit (if normalized).
          if (a[30:23] == 8'd0)
            a_mantissa <= {1'b0, a[22:0]};
          else
            a_mantissa <= {1'b1, a[22:0]};
          if (b[30:23] == 8'd0)
            b_mantissa <= {1'b0, b[22:0]};
          else
            b_mantissa <= {1'b1, b[22:0]};
        end

        3'd1: begin
          // Special Case Handling Phase:
          // Check for NaN: if exponent is all ones and fraction nonzero.
          if ((a_exponent[7:0] == 8'hFF && a[22:0] != 23'd0) ||
              (b_exponent[7:0] == 8'hFF && b[22:0] != 23'd0))
          begin
            z <= 32'h7FC00000; // Quiet NaN pattern.
            special_case <= 1;
          end
          // Check for infinity (exponent all ones) in either operand.
          else if ((a_exponent[7:0] == 8'hFF) || (b_exponent[7:0] == 8'hFF))
          begin
            // If one operand is infinity and the other is zero, the result is NaN.
            if (((a_exponent[7:0] == 8'hFF) && (b_exponent[7:0] == 8'd0) && (b[22:0] == 23'd0)) ||
                ((b_exponent[7:0] == 8'hFF) && (a_exponent[7:0] == 8'd0) && (a[22:0] == 23'd0)))
              z <= 32'h7FC00000; // NaN for infinity * 0.
            else
              z <= { (a_sign ^ b_sign), 8'hFF, 23'd0 }; // Infinity with proper sign.
            special_case <= 1;
          end
          // Check for zero: if either operand is zero (with exponent and fraction both 0).
          else if ( ((a_exponent[7:0] == 8'd0) && (a[22:0] == 23'd0)) ||
                    ((b_exponent[7:0] == 8'd0) && (b[22:0] == 23'd0)) )
          begin
            z <= { (a_sign ^ b_sign), 31'd0 }; // Zero (signed zero).
            special_case <= 1;
          end
          else begin
            special_case <= 0;
          end
        end

        3'd2: begin
          // Multiplication Phase:
          if (!special_case) begin
            // Multiply the 24-bit mantissas. (Result is 48 bits.)
            // Extend the result to 50 bits (upper two bits zero) for further guard/round/sticky computation.
            product <= {2'b00, a_mantissa * b_mantissa};
            // Compute the preliminary exponent sum.
            // Note: a_exponent[7:0] and b_exponent[7:0] are the original exponents.
            temp_exponent <= a_exponent[7:0] + b_exponent[7:0] - 10'd127;
          end
        end

        3'd3: begin
          // Normalization and Rounding Phase:
          if (!special_case) begin
            // Normalization:
            // If the MSB of product is 1, the product is in the range [2,4) and needs a right shift.
            // Otherwise, it is in [1,2) and needs no exponent adjustment.
            if (product[47] == 1'b1) begin
              // The normalized significand: bits [47:24] (24 bits) with an implicit 1.
              // For final IEEE 754, we drop the implicit bit.
              z_mantissa <= product[47:24];
              guard_bit   <= product[23];
              round_bit   <= product[22];
              sticky      <= |product[21:0]; // OR reduction for sticky bits.
              z_exponent  <= temp_exponent + 10'd1;  // Adjust exponent for the right shift.
            end
            else begin
              // Shift left by one. (Assumes product[46] is 1 for a normalized result.)
              z_mantissa <= product[46:23];
              guard_bit   <= product[22];
              round_bit   <= product[21];
              sticky      <= |product[20:0];
              z_exponent  <= temp_exponent;
            end

            // Rounding: Round-to-nearest even.
            if (guard_bit && (round_bit || sticky || z_mantissa[0])) begin
              z_mantissa <= z_mantissa + 1;
              // Check if mantissa rounding caused an overflow.
              if (z_mantissa == 24'hFFFFFF) begin
                z_exponent <= z_exponent + 10'd1;
                z_mantissa <= z_mantissa >> 1;
              end
            end
          end
        end

        3'd4: begin
          // Output Generation Phase:
          if (!special_case) begin
            // Check for exponent overflow.
            if (z_exponent[7:0] >= 8'hFF) begin
              z <= { (a_sign ^ b_sign), 8'hFF, 23'd0 };  // Infinity.
            end
            // Check for underflow. (Denormalized numbers are not implemented here.)
            else if (z_exponent[7:0] == 8'd0) begin
              z <= { (a_sign ^ b_sign), 31'd0 };         // Zero.
            end
            else begin
              // Pack the sign, the 8-bit exponent, and the 23-bit fraction.
              // Note: z_mantissa[23] is the implicit bit and is not stored.
              z <= { (a_sign ^ b_sign), z_exponent[7:0], z_mantissa[22:0] };
            end
          end
          // Clear special case flag for next operation.
          special_case <= 0;
        end

        3'd5: begin
          // End of operation cycle: reset the counter.
          counter <= 0;
        end

        default: begin
          // Default case (should not occur).
          counter <= 0;
        end
      endcase

      // Increment counter if not manually set.
      if (counter != 3'd5)
        counter <= counter + 1;
    end
  end

endmodule