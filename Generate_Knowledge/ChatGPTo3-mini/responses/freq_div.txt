module freq_div(
    input CLK_in,
    input RST,
    output reg CLK_50,
    output reg CLK_10,
    output reg CLK_1
);

    // Internal counters for frequency division
    reg [2:0] cnt_10;    // 3-bit counter for dividing by 10 (counts 0-4)
    reg [5:0] cnt_100;   // 6-bit counter for dividing by 100 (counts 0-49)

    // 50MHz Clock Generation: Toggle at every positive edge (Divide by 2)
    always @(posedge CLK_in or posedge RST) begin
        if (RST)
            CLK_50 <= 1'b0;
        else
            CLK_50 <= ~CLK_50;
    end

    // 10MHz Clock Generation: Toggle after every 5 CLK_in cycles (Divide by 10)
    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            cnt_10 <= 3'd0;
            CLK_10 <= 1'b0;
        end
        else begin
            if (cnt_10 == 3'd4) begin
                cnt_10 <= 3'd0;
                CLK_10 <= ~CLK_10;
            end
            else begin
                cnt_10 <= cnt_10 + 3'd1;
            end
        end
    end

    // 1MHz Clock Generation: Toggle after every 50 CLK_in cycles (Divide by 100)
    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            cnt_100 <= 6'd0;
            CLK_1 <= 1'b0;
        end
        else begin
            if (cnt_100 == 6'd49) begin
                cnt_100 <= 6'd0;
                CLK_1 <= ~CLK_1;
            end
            else begin
                cnt_100 <= cnt_100 + 6'd1;
            end
        end
    end

endmodule