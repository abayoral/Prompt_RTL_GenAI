module instr_reg(
    input        clk,
    input        rst,        // active low reset
    input  [1:0] fetch,      // 2-bit fetch control signal
    input  [7:0] data,       // 8-bit instruction/data input
    output [2:0] ins,        // opcode: high 3 bits of ins_p1
    output [4:0] ad1,        // register address: low 5 bits of ins_p1
    output [7:0] ad2         // full instruction from ins_p2
);

  // Internal registers to store the instructions
  reg [7:0] ins_p1;
  reg [7:0] ins_p2;

  always @(posedge clk) begin
    // Check for active low reset
    if (!rst) begin
      ins_p1 <= 8'b0;
      ins_p2 <= 8'b0;
    end 
    else begin
      // When fetch equals 2'b01, capture instruction into ins_p1
      if (fetch == 2'b01)
        ins_p1 <= data;
        
      // When fetch equals 2'b10, capture instruction into ins_p2
      if (fetch == 2'b10)
        ins_p2 <= data;
      // When fetch is neither 2'b01 nor 2'b10, registers retain their values.
    end
  end

  // Derive outputs from stored instructions:
  // 'ins' outputs the high 3 bits of ins_p1 (opcode)
  assign ins = ins_p1[7:5];

  // 'ad1' outputs the low 5 bits of ins_p1 (register address)
  assign ad1 = ins_p1[4:0];

  // 'ad2' outputs the complete 8-bit instruction from ins_p2
  assign ad2 = ins_p2;

endmodule