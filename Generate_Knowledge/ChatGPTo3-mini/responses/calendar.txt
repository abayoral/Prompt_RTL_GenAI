module calendar(
    input CLK,
    input RST,
    output reg [5:0] Secs,
    output reg [5:0] Mins,
    output reg [5:0] Hours
);

  // Seconds counter: cycles from 0 to 59.
  always @(posedge CLK or posedge RST) begin
    if (RST)
      Secs <= 6'd0;
    else begin
      if (Secs == 6'd59)
        Secs <= 6'd0;
      else
        Secs <= Secs + 6'd1;
    end
  end

  // Minutes counter: increments when seconds complete a cycle.
  always @(posedge CLK or posedge RST) begin
    if (RST)
      Mins <= 6'd0;
    else begin
      // Check condition for seconds completion.
      if (Secs == 6'd59) begin
        if (Mins == 6'd59)
          Mins <= 6'd0;
        else
          Mins <= Mins + 6'd1;
      end
    end
  end

  // Hours counter: increments when both seconds and minutes have completed their cycles.
  always @(posedge CLK or posedge RST) begin
    if (RST)
      Hours <= 6'd0;
    else begin
      // When both Secs and Mins hit their final counts, drive Hours increment.
      if ((Secs == 6'd59) && (Mins == 6'd59)) begin
        if (Hours == 6'd23)
          Hours <= 6'd0;
        else
          Hours <= Hours + 6'd1;
      end
    end
  end

endmodule