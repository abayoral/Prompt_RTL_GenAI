```verilog
module top_module(
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q
); 

    reg [511:0] next_q;
    
    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else begin
            // Calculate next_q based on Rule 110
            next_q[0]     = q[0] ^ q[1]; // Special case for first cell
            next_q[511]   = q[510] | q[511]; // Special case for last cell
            for (integer i = 1; i < 511; i = i + 1) begin
                next_q[i]   = (q[i-1] & q[i] & ~q[i+1]) |
                              (q[i-1] & ~q[i] & q[i+1]) |
                              (~q[i-1] & q[i]) |
                              (~q[i] & q[i+1]);
            end
            q <= next_q;
        end
    end
    
endmodule
```
