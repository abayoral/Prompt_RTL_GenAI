```verilog
module synchronizer (
    input wire clk_a,
    input wire clk_b,
    input wire arstn,
    input wire brstn,
    input wire [3:0] data_in,
    input wire data_en,
    output reg [3:0] dataout
);

    // Registers for managing data and enable signals
    reg [3:0] data_reg;
    reg en_data_reg;
    reg en_clap_one;
    reg en_clap_two;
    reg [3:0] synchronized_data;

    // Clock domain A: Handling incoming data and enable signals
    always @(posedge clk_a or negedge arstn) begin
        if (!arstn) begin
            data_reg <= 4'b0;
            en_data_reg <= 1'b0;
        end else begin
            if (data_en) begin
                data_reg <= data_in;
            end
            en_data_reg <= data_en;
        end
    end

    // Clock domain B: Delayed enable signal
    always @(posedge clk_b or negedge brstn) begin
        if (!brstn) begin
            en_clap_one <= 1'b0;
            en_clap_two <= 1'b0;
            synchronized_data <= 4'b0;
        end else begin
            en_clap_one <= en_data_reg;
            en_clap_two <= en_clap_one;
            if (en_clap_two) begin
                synchronized_data <= data_reg;
            end
        end
    end

    // Data output logic
    always @(posedge clk_b or negedge brstn) begin
        if (!brstn) begin
            dataout <= 4'b0;
        end else if (en_clap_two) begin
            dataout <= synchronized_data;
        end
    end

endmodule
```