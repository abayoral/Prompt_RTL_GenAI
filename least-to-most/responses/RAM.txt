```verilog
module dual_port_ram #(parameter WIDTH = 6, DEPTH = 8)(
    input wire clk,
    input wire rst_n,
    input wire write_en,
    input wire [2:0] write_addr,
    input wire [WIDTH-1:0] write_data,
    input wire read_en,
    input wire [2:0] read_addr,
    output reg [WIDTH-1:0] read_data
);

    // Memory array declaration
    reg [WIDTH-1:0] mem [0:DEPTH-1];

    // Initialize memory to all zeros at startup or reset
    integer i;
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            for (i = 0; i < DEPTH; i = i + 1) begin
                mem[i] <= {WIDTH{1'b0}};  // Initialize all memory locations to zero
            end
            read_data <= {WIDTH{1'b0}};
        end else begin
            // Handle write operation
            if (write_en) begin
                mem[write_addr] <= write_data;
            end

            // Handle read operation
            if (read_en) begin
                read_data <= mem[read_addr];
            end else begin
                read_data <= {WIDTH{1'b0}}; // Ensure read_data is stable when read_en is not active
            end
        end
    end

endmodule
```
