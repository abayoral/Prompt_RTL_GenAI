```verilog
module float_multi(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

// Internal signals
reg [2:0] counter;
reg [23:0] a_mantissa, b_mantissa, z_mantissa;
reg [8:0] a_exponent, b_exponent, z_exponent; // 8 bits for exponent, 1 extra bit for operations
reg a_sign, b_sign, z_sign;
reg [49:0] product;
reg guard_bit, round_bit, sticky;

// IEEE 754 constants
parameter EXPONENT_BIAS = 127;

// Always block for the sequential logic
always @(posedge clk or posedge rst) begin
    if (rst) begin
        counter <= 3'b000;
        z <= 32'b0;
    end else begin
        case (counter)
            3'b000: begin
                // Increment cycle counter
                counter <= counter + 1;

                // Extract components
                a_sign <= a[31];
                a_exponent <= a[30:23];
                a_mantissa <= {1'b1, a[22:0]}; // Implicit leading 1

                b_sign <= b[31];
                b_exponent <= b[30:23];
                b_mantissa <= {1'b1, b[22:0]}; // Implicit leading 1
            end

            3'b001: begin
                counter <= counter + 1;

                // Detect special cases
                if (a_exponent == 8'hFF) begin // NaN or infinity
                    z <= {a_sign, 8'hFF, a[22:0]};
                    counter <= 3'b111; // Skip other phases
                end else if (b_exponent == 8'hFF) begin
                    z <= {b_sign, 8'hFF, b[22:0]};
                    counter <= 3'b111;
                end else if (a_exponent == 0) begin // Zero or denormalized
                    z <= {b_sign, b_exponent, b_mantissa[22:0]};
                    counter <= 3'b111;
                end else if (b_exponent == 0) begin
                    z <= {a_sign, a_exponent, a_mantissa[22:0]};
                    counter <= 3'b111;
                end else begin
                    // Regular operation
                    z_sign <= a_sign ^ b_sign;
                    z_exponent <= a_exponent + b_exponent - EXPONENT_BIAS;
                    product <= a_mantissa * b_mantissa;
                    counter <= 3'b010;
                end
            end

            3'b010: begin
                counter <= counter + 1;

                // Normalize product
                if (product[47]) begin
                    z_mantissa <= product[47:24]; // High bits
                    guard_bit <= product[23];
                    round_bit <= product[22];
                    sticky <= |product[21:0];
                    z_exponent <= z_exponent + 1; // Adjust exponent
                end else begin
                    z_mantissa <= product[46:23];
                    guard_bit <= product[22];
                    round_bit <= product[21];
                    sticky <= |product[20:0];
                end
                counter <= 3'b011;
            end

            3'b011: begin
                counter <= counter + 1;

                // Rounding logic
                if (guard_bit && (round_bit || sticky || z_mantissa[0])) begin
                    z_mantissa <= z_mantissa + 1;
                    if (z_mantissa == 24'hFFFFFF) begin
                        z_exponent <= z_exponent + 1;
                        z_mantissa <= z_mantissa >> 1;
                    end
                end

                // Handle overflow and underflow
                if (z_exponent >= 255) begin // Overflow
                    z <= {z_sign, 8'hFF, 23'b0}; // Infinity
                end else if (z_exponent <= 0) begin // Underflow
                    z <= 32'b0; // Zero
                end else begin
                    z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                end

                counter <= 3'b000; // Reset counter
            end

            3'b111: begin // Final State
                counter <= 3'b000; // Reset counter
            end

            default: counter <= 3'b000;
        endcase
    end
end

endmodule
```