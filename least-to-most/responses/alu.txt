```verilog
module alu(
    input wire [31:0] a,
    input wire [31:0] b,
    input wire [5:0] aluc,
    output reg [31:0] r,
    output reg zero,
    output reg carry,
    output reg negative,
    output reg overflow,
    output reg flag
);

    wire [31:0] sum, diff;
    wire c_out_add, c_out_sub;
    assign {c_out_add, sum} = a + b;
    assign {c_out_sub, diff} = a - b;

    always @(*) begin
        carry = 0;
        overflow = 0;
        negative = 0;
        flag = 0;
        
        case (aluc)
            6'b100000: begin // ADD
                r = sum;
                carry = c_out_add;
                overflow = (~a[31] & ~b[31] & r[31]) | (a[31] & b[31] & ~r[31]);
            end
            6'b100001: begin // ADDU
                r = sum;
                carry = c_out_add;
            end
            6'b100010: begin // SUB
                r = diff;
                carry = c_out_sub;
                overflow = (~a[31] & b[31] & r[31]) | (a[31] & ~b[31] & ~r[31]);
            end
            6'b100011: begin // SUBU
                r = diff;
                carry = c_out_sub;
            end
            6'b100100: r = a & b; // AND
            6'b100101: r = a | b; // OR
            6'b100110: r = a ^ b; // XOR
            6'b100111: r = ~(a | b); // NOR
            6'b101010: begin // SLT
                r = (a < b) ? 1 : 0;
                flag = (a < b);
            end
            6'b101011: begin // SLTU
                r = (a < b) ? 1 : 0;
                flag = (a < b);
            end
            6'b000000: r = b << a[4:0]; // SLL
            6'b000010: r = b >> a[4:0]; // SRL
            6'b000011: r = $signed(b) >>> a[4:0]; // SRA
            6'b000100: r = b << a[4:0]; // SLLV
            6'b000110: r = b >> a[4:0]; // SRLV
            6'b000111: r = $signed(b) >>> a[4:0]; // SRAV
            6'b001111: r = {b[15:0], 16'b0}; // LUI
            default: r = 32'bz; // high-impedance for unhandled cases
        endcase

        zero = (r == 32'b0);
        negative = r[31];
    end
endmodule
```