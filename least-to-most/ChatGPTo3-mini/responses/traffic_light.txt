module traffic_light(
    input rst_n,
    input clk,
    input pass_request,
    output reg [7:0] clock,  // internal timerâ€™s count value
    output reg red,
    output reg yellow,
    output reg green
);

// State encoding
parameter IDLE      = 2'b00;
parameter S1_RED    = 2'b01;  // Vehicle red (pedestrian green)
parameter S2_YELLOW = 2'b10;  // Vehicle yellow (pedestrian red)
parameter S3_GREEN  = 2'b11;  // Vehicle green (pedestrian red)

// Duration values for each state (in clock cycles)
parameter DURATION_RED    = 8'd10;
parameter DURATION_YELLOW = 8'd5;
parameter DURATION_GREEN  = 8'd60;

// Internal registers for state and counter
reg [1:0] state;
reg [7:0] cnt;

// Internal registers for next output values (for clarity)
reg p_red, p_yellow, p_green;

// Next-state and counter logic
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        // On reset, initialize to IDLE and counter 0.
        state <= IDLE;
        cnt   <= 8'd0;
    end else begin
        state <= (state == IDLE) ? S1_RED : next_state(state, cnt, pass_request);
        cnt   <= next_count(state, cnt, pass_request);
    end
end

// Function to compute next state based on current state, counter and pass_request.
// We use a function to keep the main always block clean.
function [1:0] next_state;
    input [1:0] curr_state;
    input [7:0] curr_cnt;
    input pass_req;
    begin
        case (curr_state)
            S1_RED:  // Red state lasts DURATION_RED cycles, then go to green
                next_state = (curr_cnt == 8'd0) ? S3_GREEN : S1_RED;
            S3_GREEN: // Green state lasts DURATION_GREEN cycles
                next_state = (curr_cnt == 8'd0) ? S2_YELLOW : S3_GREEN;
            S2_YELLOW: // Yellow state lasts DURATION_YELLOW cycles
                next_state = (curr_cnt == 8'd0) ? S1_RED : S2_YELLOW;
            default: // For IDLE and any unexpected states, transition to red.
                next_state = S1_RED;
        endcase
    end
endfunction

// Function to compute next counter value
// Implements countdown, and applies pedestrian shortening on green if applicable.
function [7:0] next_count;
    input [1:0] curr_state;
    input [7:0] curr_cnt;
    input pass_req;
    begin
        case (curr_state)
            IDLE: begin
                // When leaving IDLE, start the red duration.
                next_count = DURATION_RED;
            end
            S1_RED: begin
                if (curr_cnt == 8'd0) 
                    next_count = DURATION_GREEN;
                else 
                    next_count = curr_cnt - 8'd1;
            end
            S3_GREEN: begin
                // If pedestrian request is pressed and more than 10 cycles remain,
                // force the countdown to shorten so that total remaining time is 10.
                if (pass_req && (curr_cnt > 8'd10))
                    // Note: This adjustment is done once. Then normal countdown resumes.
                    next_count = 8'd10;
                else if (curr_cnt == 8'd0)
                    next_count = DURATION_YELLOW;
                else 
                    next_count = curr_cnt - 8'd1;
            end
            S2_YELLOW: begin
                if (curr_cnt == 8'd0)
                    next_count = DURATION_RED;
                else 
                    next_count = curr_cnt - 8'd1;
            end
            default: begin
                next_count = 8'd0;
            end
        endcase
    end
endfunction

// Output and clock display update
// The output "clock" shows the current internal counter.
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        clock <= 8'd0;
    end else begin
        clock <= cnt;
    end
end

// Lighting output assignments based on current state
// Using intermediate registers (p_red, p_yellow, p_green) for clarity.
always @(*) begin
    case (state)
        S1_RED: begin
            p_red    = 1'b1;  // Vehicle red on; pedestrian can cross.
            p_yellow = 1'b0;
            p_green  = 1'b0;
        end
        S2_YELLOW: begin
            p_red    = 1'b0;
            p_yellow = 1'b1;
            p_green  = 1'b0;
        end
        S3_GREEN: begin
            p_red    = 1'b0;
            p_yellow = 1'b0;
            p_green  = 1'b1;
        end
        default: begin
            // In IDLE or undefined state, keep all off.
            p_red    = 1'b0;
            p_yellow = 1'b0;
            p_green  = 1'b0;
        end
    endcase
end

// Registering the output signals synchronously.
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        red    <= 1'b0;
        yellow <= 1'b0;
        green  <= 1'b0;
    end else begin
        red    <= p_red;
        yellow <= p_yellow;
        green  <= p_green;
    end
end

endmodule