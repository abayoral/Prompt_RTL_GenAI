module top_module(
    input clk,
    input reset,
    input ena,
    output reg pm,
    output reg [7:0] hh,  // two-digit BCD for hour (01, 02, ..., 12)
    output reg [7:0] mm,  // two-digit BCD for minute (00 - 59)
    output reg [7:0] ss   // two-digit BCD for second (00 - 59)
);

    // On reset, clock shows 12:00:00 and pm=0 (AM)
    // Hours: valid values (in BCD): 12, 01, 02, ... , 09, 10, 11.
    // Minutes/Seconds: from 00 to 59 (BCD with tens digit 0-5, ones 0-9).

    // We implement the counters with synchronous reset and update on ena pulses.

    always @(posedge clk) begin
        if(reset) begin
            ss <= 8'd0;      // 00 seconds
            mm <= 8'd0;      // 00 minutes
            hh <= 8'h12;     // 12 (BCD 12) for hour
            pm <= 1'b0;      // AM (0)
        end
        else if(ena) begin
            // ----- Seconds Counter -----
            if(ss == 8'd59) begin
                ss <= 8'd0;
                // ----- Minutes Counter -----
                if(mm == 8'd59) begin
                    mm <= 8'd0;
                    // ----- Hours Counter -----
                    // Special rules:
                    // If hh == 11 then next hour is 12 and pm toggles.
                    // If hh == 12 then next hour is 01 and pm remains unchanged.
                    // Otherwise, just add one in proper BCD.
                    if(hh == 8'h11) begin
                        hh <= 8'h12;
                        pm <= ~pm;
                    end
                    else if(hh == 8'h12) begin
                        hh <= 8'h01;
                    end
                    else begin
                        // For hrs 01,02,...,09,10
                        if(hh[3:0] == 4'd9)
                            hh <= {hh[7:4] + 4'd1, 4'd0}; // e.g. 09 -> 10
                        else
                            hh <= {hh[7:4], hh[3:0] + 4'd1};
                    end
                end
                else begin
                    // Increment minute in BCD.
                    if(mm[3:0] == 4'd9)
                        mm <= {mm[7:4] + 4'd1, 4'd0};
                    else
                        mm <= {mm[7:4], mm[3:0] + 4'd1};
                end
            end
            else begin
                // Increment seconds in BCD.
                if(ss[3:0] == 4'd9)
                    ss <= {ss[7:4] + 4'd1, 4'd0};
                else
                    ss <= {ss[7:4], ss[3:0] + 4'd1};
            end
        end
    end

endmodule