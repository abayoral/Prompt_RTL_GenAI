module accu (
    input           clk,
    input           rst_n,
    input  [7:0]    data_in,
    input           valid_in,
    output reg      valid_out,
    output reg [9:0] data_out
);

    reg [9:0] sum_reg;
    reg [1:0] count;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            sum_reg   <= 10'd0;
            count     <= 2'd0;
            valid_out <= 1'b0;
            data_out  <= 10'd0;
        end else begin
            // Default valid_out de-asserted
            valid_out <= 1'b0;
            if (valid_in) begin
                if (count == 2'd3) begin
                    // This is the fourth data; accumulate and output.
                    data_out  <= sum_reg + data_in;
                    valid_out <= 1'b1;
                    // Reset accumulator and counter
                    sum_reg   <= 10'd0;
                    count     <= 2'd0;
                end else begin
                    // Accumulate data and count valid inputs.
                    sum_reg <= sum_reg + data_in;
                    count   <= count + 1'b1;
                end
            end
        end
    end

endmodule