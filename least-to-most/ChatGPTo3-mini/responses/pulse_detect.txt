module pulse_detect(
    input  clk,
    input  rst_n,
    input  data_in,
    output reg data_out
);

    // Define states
    localparam S0 = 1'b0,  // Waiting for rising edge (0 -> 1)
               S1 = 1'b1;  // Detected 1, waiting for falling edge (1 -> 0)

    reg state;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state    <= S0;
            data_out <= 1'b0;
        end else begin
            case (state)
                S0: begin
                    data_out <= 1'b0;  // Ensure data_out is low unless pulse detected
                    if (data_in) begin
                        // Detected rising edge from 0 to 1: move to intermediate state
                        state <= S1;
                    end else begin
                        state <= S0;
                    end
                end
                S1: begin
                    if (!data_in) begin
                        // Completed pulse: detected falling edge from 1 to 0
                        data_out <= 1'b1;  // Pulse detected output high for this clock cycle
                        state    <= S0;    // Return to initial state for new detection
                    end else begin
                        data_out <= 1'b0;
                        state    <= S1;    // Remain waiting for falling edge
                    end
                end
                default: begin
                    state    <= S0;
                    data_out <= 1'b0;
                end
            endcase
        end
    end

endmodule