module top_module ( 
    input clk, 
    input [7:0] d, 
    input [1:0] sel, 
    output reg [7:0] q 
);
    // Intermediate signals for the outputs of the three D flip-flop stages.
    wire [7:0] stage1, stage2, stage3;
    
    // Instantiate the three 8-bit D flip-flops.
    my_dff8 dff1 (
        .clk(clk),
        .d(d),
        .q(stage1)
    );
    
    my_dff8 dff2 (
        .clk(clk),
        .d(stage1),
        .q(stage2)
    );
    
    my_dff8 dff3 (
        .clk(clk),
        .d(stage2),
        .q(stage3)
    );
    
    // 4-to-1 multiplexer implemented with an always block.
    // Depending on the value of sel, q is driven by:
    // 00 -> input d (zero delay)
    // 01 -> stage1 output (one cycle delay)
    // 10 -> stage2 output (two cycle delay)
    // 11 -> stage3 output (three cycle delay)
    always @(*) begin
        case (sel)
            2'b00: q = d;
            2'b01: q = stage1;
            2'b10: q = stage2;
            2'b11: q = stage3;
            default: q = d;
        endcase
    end
endmodule