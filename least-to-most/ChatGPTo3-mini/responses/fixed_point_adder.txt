module fixed_point_adder #(parameter Q = 4, parameter N = 16) (
    input  [N-1:0] a,
    input  [N-1:0] b,
    output reg [N-1:0] c
);

  // Internal register to hold the result
  reg [N-1:0] res;

  // Extended register for addition to catch potential overflow on the magnitude sum
  reg [N:0] tmp_sum;

  // Register to hold subtraction difference result
  reg [N-1:0] diff;

  // Register to hold the computed sign for subtraction result
  reg sign_result;

  // Wires for absolute values of a and b
  wire [N-1:0] a_abs;
  wire [N-1:0] b_abs;

  // Compute absolute value using two's complement if negative
  assign a_abs = a[N-1] ? (~a + 1) : a;
  assign b_abs = b[N-1] ? (~b + 1) : b;

  // Combinational logic for fixed-point addition/subtraction
  always @(*) begin
    // Check if the sign bits of a and b are the same
    if (a[N-1] == b[N-1]) begin
      // Both numbers have the same sign. Add their magnitudes.
      tmp_sum = a_abs + b_abs;
      // Overflow management: tmp_sum has one extra bit.
      // In this simple implementation, we simply take the lower N bits.
      if (a[N-1] == 1'b0) begin
        // Both are positive; result sign remains positive.
        res = tmp_sum[N-1:0];
      end else begin
        // Both are negative; take two's complement of the magnitude sum to restore negative representation.
        res = ~tmp_sum[N-1:0] + 1;
      end
    end else begin
      // Numbers have different signs. Perform subtraction between absolute values.
      if (a_abs >= b_abs) begin
        diff = a_abs - b_abs;
        // The sign of the result is the same as the sign of a (since a's magnitude is larger).
        sign_result = a[N-1];
      end else begin
        diff = b_abs - a_abs;
        // The sign of the result is the same as that of b (since b's magnitude is larger).
        sign_result = b[N-1];
      end
      // Represent the result in proper fixed-point format
      if (sign_result == 1'b0)
        res = diff;             // Positive result
      else
        res = ~diff + 1;        // Negative result in two's complement
    end

    // Assign the computed result to output port c
    c = res;
  end

endmodule