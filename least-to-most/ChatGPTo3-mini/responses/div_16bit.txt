module div_16bit(
    input  [15:0] A,    // 16-bit dividend
    input  [7:0]  B,    // 8-bit divisor
    output reg [15:0] result, // 16-bit quotient (padded)
    output reg [15:0] odd     // 16-bit remainder (padded)
);

  // Internal registers to hold the inputs
  reg [15:0] a_reg;
  reg [7:0]  b_reg;

  // Internal registers for the division process.
  // Here q_temp is a 9-bit quotient because when dividing a 16-bit number by an 8-bit number,
  // the quotient can be up to 9 bits wide. We will pad it to 16 bits for output.
  reg [8:0] q_temp;
  // rem is 9 bits wide to allow the subtraction (it holds the current remainder with one extra bit)
  reg [8:0] rem;
  
  integer i;  // loop index

  // First always block: Capture the input values into internal registers.
  always @(*) begin
    a_reg = A;
    b_reg = B;
  end

  // Second always block: Perform the combinational division algorithm.
  always @(*) begin
    // Handle the divisor = 0 case to avoid any undefined arithmetic.
    if (b_reg == 0) begin
      q_temp = 9'b0;
      rem    = 9'b0;
    end else begin
      // Initialize the remainder with the upper 8 bits of the dividend,
      // extended to 9 bits (MSB is 0).
      rem = {1'b0, a_reg[15:8]};
      
      // Determine the most-significant quotient bit.
      if (rem >= {1'b0, b_reg}) begin
        q_temp[8] = 1'b1;
        rem = rem - {1'b0, b_reg};
      end else begin
        q_temp[8] = 1'b0;
      end
      
      // Process the remaining lower 8 bits of the dividend.
      // Iterate from bit index 7 downto 0.
      for (i = 7; i >= 0; i = i - 1) begin
        // Left shift the current remainder by 1 and bring in the next dividend bit.
        rem = {rem[7:0], a_reg[i]};
        
        // If the updated remainder is greater than or equal to the divisor,
        // subtract the divisor and record a '1' in the quotient.
        if (rem >= {1'b0, b_reg}) begin
          q_temp[i] = 1'b1;
          rem = rem - {1'b0, b_reg};
        end else begin
          q_temp[i] = 1'b0;
        end
      end
    end
    
    // The computed quotient is 9 bits; pad the upper 7 bits with zeros for the 16-bit output.
    result = {7'b0, q_temp};
    
    // The final remainder is at most 8 bits (the extra bit in rem is only used during calculation).
    // Pad the upper 8 bits with zeros for the 16-bit output.
    odd = {8'b0, rem[7:0]};
  end

endmodule