module top_module (
    input clk,
    input reset,
    input [31:0] in,
    output [31:0] out
);

    // Register to hold output state (SR flip-flop behavior)
    reg [31:0] out_reg;
    // Register to delay the input by one clock cycle for falling edge detection
    reg [31:0] in_dly;

    // Assign the registered output to the module output
    assign out = out_reg;

    always @(posedge clk) begin
        // Synchronous reset has precedence
        if (reset) begin
            out_reg <= 32'b0;
            // Option: Sample 'in' during reset to update previous state;
            // This ensures proper edge-detection after reset.
            in_dly <= in;
        end
        else begin
            // For each bit, compute falling edge: when previous cycle had 1 and current cycle has 0.
            // This will be captured the cycle after the falling edge occurs.
            // Since out_reg should remain 1 once set, we OR it with new falling edge detections.
            out_reg <= out_reg | (in_dly & ~in);
            // Update the delayed input for use in next cycle.
            in_dly <= in;
        end
    end

endmodule