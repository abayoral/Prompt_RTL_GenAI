module fixed_point_subtractor #(
  parameter N = 16, // total number of bits
  parameter Q = 8   // number of fractional bits
)(
  input  [N-1:0] a, // first fixed‐point operand
  input  [N-1:0] b, // second fixed‐point operand
  output [N-1:0] c  // fixed‐point subtraction result
);

  // Internal register to hold the subtraction result.
  reg [N-1:0] res;

  // The algorithm follows these steps:
  // 1. Determine the sign of each operand (MSB is sign).
  // 2. If both operands have the same sign then subtract the magnitudes.
  //    Depending on which magnitude is larger, the result sign is chosen accordingly.
  // 3. If the operands have different signs then the operation is equivalent
  //    to adding the absolute values. The final sign is chosen based on the overall
  //    arithmetic outcome.
  // 4. Finally, if the computed magnitude is zero, ensure the sign bit is set to 0.

  // Note: Fixed‐point numbers in two’s complement form can be handled by
  // doing arithmetic on the entire number (integer and fractional parts together).
  // However, to meet the given specification we explicitly separate the
  // sign/magnitude handling.
  
  // Combinational block to compute the subtraction result.
  always @(*) begin
    // Working variables:
    // diff: holds the absolute difference (or in case of different signs, the sum of magnitudes)
    // sign: will be 0 for positive result and 1 for negative result.
    reg [N-1:0] diff;
    reg sign;

    diff = 0;
    sign = 0;

    // Compare the sign bits: a[N-1] and b[N-1]
    if (a[N-1] == b[N-1]) begin
      // Case 1: Both operands have the same sign.
      if (a[N-1] == 0) begin
        // Both operands are positive.
        // Direct subtraction: a - b.
        // To keep the result non-negative, subtract the smaller from the larger.
        if (a >= b) begin
          diff = a - b;
          sign = 0; // same as both operands (positive)
        end else begin
          diff = b - a;
          sign = 1; // negative result because a is smaller than b
        end
      end 
      else begin
        // Both operands are negative.
        // First compute absolute values:
        // For a negative number in two's complement,
        // abs(x) = ~x + 1.
        reg [N-1:0] abs_a;
        reg [N-1:0] abs_b;
        abs_a = (~a) + 1;
        abs_b = (~b) + 1;
        // Effective operation: (-abs_a) - (-abs_b) = abs_b - abs_a.
        if (abs_a >= abs_b) begin
          diff = abs_a - abs_b;
          // Since a is “more negative” than b, the effective result is negative.
          sign = 1;
        end 
        else begin
          diff = abs_b - abs_a;
          sign = 0;
        end
      end
    end 
    else begin
      // Case 2: Operands have different signs.
      // The operation becomes the addition of the two magnitudes.
      if (a[N-1] == 0 && b[N-1] == 1) begin
        // a is positive and b is negative.
        // Compute absolute value of b.
        reg [N-1:0] abs_b;
        abs_b = (~b) + 1;
        diff = a + abs_b;
        // a - (negative b) is effectively addition.
        // In typical arithmetic, a + abs(b) is always positive.
        sign = 0;
      end 
      else if (a[N-1] == 1 && b[N-1] == 0) begin
        // a is negative and b is positive.
        // Compute absolute value of a.
        reg [N-1:0] abs_a;
        abs_a = (~a) + 1;
        diff = abs_a + b;
        // (-abs(a)) - b equals -(abs(a)+b): a negative result.
        sign = 1;
      end
    end

    // Final assembly of the result in two's complement form.
    // If the computed magnitude is zero, force the result (including sign bit) to 0.
    if (diff == 0)
      res = {N{1'b0}};
    else if (sign == 0)
      // Positive result: the magnitude is represented directly.
      res = diff;
    else
      // Negative result: convert the magnitude back to two's complement.
      res = (~diff) + 1;
  end

  // Drive the output from the internal result register.
  assign c = res;

endmodule