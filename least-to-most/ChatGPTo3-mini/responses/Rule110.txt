module top_module(
    input clk,
    input load,
    input [511:0] data,
    output [511:0] q
);

    reg [511:0] state;
    reg [511:0] next;
    integer i;
    
    // Combinational block: determine next state for each cell.
    always @(*) begin
        for (i = 0; i < 512; i = i + 1) begin
            // Determine left, center, right values.
            // For boundaries, assume off (0).
            // Using a temporary 3-bit vector for pattern.
            reg left, center, right;
            if (i == 0)
                left = 1'b0;
            else
                left = state[i-1];
            center = state[i];
            if (i == 511)
                right = 1'b0;
            else
                right = state[i+1];
            case ({left, center, right})
                3'b111: next[i] = 1'b0; // 111 -> 0
                3'b110: next[i] = 1'b1; // 110 -> 1
                3'b101: next[i] = 1'b1; // 101 -> 1
                3'b100: next[i] = 1'b0; // 100 -> 0
                3'b011: next[i] = 1'b1; // 011 -> 1
                3'b010: next[i] = 1'b1; // 010 -> 1
                3'b001: next[i] = 1'b1; // 001 -> 1
                3'b000: next[i] = 1'b0; // 000 -> 0
                default: next[i] = 1'b0;
            endcase
        end
    end
    
    // Sequential block: update state on clock edge.
    always @(posedge clk) begin
        if (load)
            state <= data;
        else
            state <= next;
    end
    
    // Output current state.
    assign q = state;
    
endmodule