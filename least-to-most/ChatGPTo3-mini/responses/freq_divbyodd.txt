module freq_divbyodd #(
    parameter NUM_DIV = 5  // Must be an odd number
)(
    input  clk,    // Input clock signal
    input  rst_n,  // Active low reset signal
    output clk_div // Divided clock output
);

    // Internal registers for divisional clock signals
    reg clk_div1;
    reg clk_div2;
    
    // Counters for the rising and falling edge counters.
    // The width needs to be enough to count to NUM_DIV-1.
    localparam CNT_WIDTH = $clog2(NUM_DIV);
    reg [CNT_WIDTH-1:0] cnt1;
    reg [CNT_WIDTH-1:0] cnt2;
    
    // Local parameter to represent the mid count value, using integer division.
    // For an odd divisor, this gives the floor(NUM_DIV/2)
    localparam HALF_CNT = NUM_DIV/2;
    
    // Process on positive edges of clk: count and toggle clk_div1
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1      <= 0;
            clk_div1  <= 0;
        end else begin
            if (cnt1 == NUM_DIV - 1)
                cnt1 <= 0;
            else
                cnt1 <= cnt1 + 1;
                
            if (cnt1 == HALF_CNT)
                clk_div1 <= ~clk_div1;
        end
    end
    
    // Process on negative edges of clk: count and toggle clk_div2
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2      <= 0;
            clk_div2  <= 0;
        end else begin
            if (cnt2 == NUM_DIV - 1)
                cnt2 <= 0;
            else
                cnt2 <= cnt2 + 1;
                
            if (cnt2 == HALF_CNT)
                clk_div2 <= ~clk_div2;
        end
    end
    
    // Combine the two divided clocks to form the final divided clock output.
    assign clk_div = clk_div1 | clk_div2;

endmodule