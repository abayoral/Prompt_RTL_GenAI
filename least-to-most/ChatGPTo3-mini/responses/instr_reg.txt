module instr_reg(
    input clk,
    input rst,          // Active low reset
    input [1:0] fetch,  // Control signal: 2'b01 => fetch from register, 2'b10 => fetch from RAM/ROM
    input [7:0] data,   // 8-bit instruction data input
    output [2:0] ins,   // High 3 bits of the first fetched instruction (opcode)
    output [4:0] ad1,   // Low 5 bits of the first fetched instruction (register address)
    output [7:0] ad2    // Complete 8-bit instruction from the second source
);

    // Two internal 8-bit instruction registers
    reg [7:0] ins_p1;
    reg [7:0] ins_p2;

    // Derive outputs:
    // - ins: upper 3 bits of ins_p1
    // - ad1: lower 5 bits of ins_p1
    // - ad2: complete 8-bit value from ins_p2
    assign ins = ins_p1[7:5];
    assign ad1 = ins_p1[4:0];
    assign ad2 = ins_p2;

    // Sequential logic: on rising edge of clock, process reset and fetch operations
    always @(posedge clk) begin
        // Check active-low reset: if rst is 0, clear both registers
        if (!rst) begin
            ins_p1 <= 8'h00;
            ins_p2 <= 8'h00;
        end
        // If reset is not active, process instruction fetch based on the fetch control signal
        else begin
            case (fetch)
                2'b01: begin
                    // Fetch instruction from data input into ins_p1
                    ins_p1 <= data;
                end
                2'b10: begin
                    // Fetch instruction from data input into ins_p2
                    ins_p2 <= data;
                end
                default: begin
                    // No valid fetch command; retain current register values
                    ins_p1 <= ins_p1;
                    ins_p2 <= ins_p2;
                end
            endcase
        end
    end

endmodule