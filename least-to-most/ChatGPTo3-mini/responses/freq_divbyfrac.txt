module freq_divbyfrac (
    input  clk,      // Main clock input
    input  rst_n,    // Active low reset
    output clk_div   // Fractionally divided clock output (3.5x division)
);

  //-------------------------------------------------------------------------
  // Explanation:
  // This design uses a double‐edge clocking technique to obtain a fractional 
  // frequency division factor of 3.5. The trick is to create two intermediate 
  // clock signals that are generated by counting clock cycles:
  //  • One clock branch (phase A) is updated on the rising edge of clk.
  //    It counts 7 cycles (0 to 6) and produces a high output for 4 cycles, 
  //    low for 3 cycles.
  //  • The second branch (phase B) is updated on the falling edge of clk,
  //    and similarly counts 7 edges and produces a high level for the first 4 
  //    counts and low for the next 3 counts.
  // These two clocks are naturally phase‐shifted by about half a period of the 
  // source clock. The two phase‐shifted clocks are then logically OR’d to create 
  // the final divided clock signal. The OR combination “fills in” the gaps of the 
  // uneven division, yielding a near uniform output clock.
  //-------------------------------------------------------------------------
  
  // Parameter for modulo counting. The counter cycles through 7 states: 0-6.
  localparam MUL2_DIV_CLK = 7;
  
  // Internal counters and phase registers.
  reg [2:0] counter_a;  // Counter for rising edge branch (phase A)
  reg       clk_phase_a;
  
  reg [2:0] counter_b;  // Counter for falling edge branch (phase B)
  reg       clk_phase_b;
  
  // Rising edge block: count clock cycles on the rising edge.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      counter_a   <= 3'd0;
      clk_phase_a <= 1'b0;
    end
    else begin
      if(counter_a == (MUL2_DIV_CLK - 1)) begin
        counter_a <= 3'd0;
      end
      else begin
        counter_a <= counter_a + 3'd1;
      end
      
      // Generate a phase signal: high for 4 counts (0-3), low for 3 counts (4-6).
      if(counter_a < 3'd4)
        clk_phase_a <= 1'b1;
      else
        clk_phase_a <= 1'b0;
    end
  end
  
  // Falling edge block: count clock cycles on the falling edge.
  always @(negedge clk or negedge rst_n) begin
    if (!rst_n) begin
      counter_b   <= 3'd0;
      clk_phase_b <= 1'b0;
    end
    else begin
      if(counter_b == (MUL2_DIV_CLK - 1)) begin
        counter_b <= 3'd0;
      end
      else begin
        counter_b <= counter_b + 3'd1;
      end
      
      // Similarly, create a phase signal on the falling edge branch.
      if(counter_b < 3'd4)
        clk_phase_b <= 1'b1;
      else
        clk_phase_b <= 1'b0;
    end
  end
  
  // Combine the two phase-adjusted intermediate clock signals with OR.
  // This ensures that when one branch goes low, the other (shifted by half a cycle)
  // may already be high, resulting in a smoother overall output clock with an effective
  // division of 3.5x.
  assign clk_div = clk_phase_a | clk_phase_b;
  
endmodule