module dual_port_ram #(
    parameter WIDTH = 6,
    parameter DEPTH = 8,
    parameter ADDR_WIDTH = 3
)(
    input                 clk,
    input                 rst_n,      // active low reset
    input                 write_en,   // write enable
    input  [ADDR_WIDTH-1:0] write_addr, // write address
    input  [WIDTH-1:0]    write_data, // write data
    input                 read_en,    // read enable
    input  [ADDR_WIDTH-1:0] read_addr,  // read address
    output reg [WIDTH-1:0] read_data  // read data
);

    // memory array declaration
    reg [WIDTH-1:0] mem [0:DEPTH-1];
    integer i;

    // Write process and synchronous reset for memory initialization.
    // When rst_n is deasserted (low), all memory locations are set to 0.
    always @(posedge clk) begin
        if (!rst_n) begin
            // Initialize all memory locations to 0.
            for (i = 0; i < DEPTH; i = i + 1) begin
                mem[i] <= {WIDTH{1'b0}};
            end
        end else begin
            // Write operation when write_en is active.
            if (write_en) begin
                mem[write_addr] <= write_data;
            end
        end
    end

    // Read process using synchronous approach.
    // When rst_n is deasserted (low), read_data is set to 0.
    always @(posedge clk) begin
        if (!rst_n) begin
            read_data <= {WIDTH{1'b0}};
        end else begin
            if (read_en) begin
                read_data <= mem[read_addr];
            end
        end
    end

endmodule