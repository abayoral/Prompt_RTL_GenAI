```verilog
module freq_diveven #(parameter NUM_DIV = 4)(
    input wire clk,       // input clock signal
    input wire rst_n,     // active-low reset signal
    output reg clk_div    // divided clock output signal
);

    // Ensure NUM_DIV is even and greater than zero
    initial begin
        if (NUM_DIV <= 0 || NUM_DIV % 2 != 0) begin
            $display("NUM_DIV must be a positive even number.");
            $stop;
        end
    end
    
    reg [3:0] cnt; // 4-bit counter to count clock cycles

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 4'b0000;   // Reset counter
            clk_div <= 0;     // Reset divided clock
        end else begin
            if (cnt < (NUM_DIV / 2) - 1) begin
                cnt <= cnt + 1; // Increment counter
            end else begin
                cnt <= 0;         // Reset counter
                clk_div <= ~clk_div; // Toggle divided clock
            end
        end
    end

endmodule
```

This Verilog module `freq_diveven` implements a frequency divider that can divide an input clock by an even divisor, `NUM_DIV`. The counter, `cnt`, tracks the number of clock edges to achieve the desired division, and `clk_div` toggles to produce the output clock signal's reduced frequency. The module resets both the counter and the divided clock to zero when `rst_n` is asserted low, ensuring correct operation during startup and asynchronous resets.