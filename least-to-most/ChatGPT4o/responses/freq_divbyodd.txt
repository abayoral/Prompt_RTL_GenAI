```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5
) (
    input wire clk,
    input wire rst_n,
    output reg clk_div
);

    // Calculation for half the division, based on the theory for odd divisors
    localparam HALF_DIV = (NUM_DIV - 1) / 2;

    reg [31:0] cnt1;
    reg [31:0] cnt2;
    reg clk_div1, clk_div2;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 0;
        end else begin
            if (cnt1 == HALF_DIV) begin
                cnt1 <= 0;
                clk_div1 <= ~clk_div1;
            end else begin
                cnt1 <= cnt1 + 1;
            end
        end
    end

    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 0;
        end else begin
            if (cnt2 == HALF_DIV) begin
                cnt2 <= 0;
                clk_div2 <= ~clk_div2;
            end else begin
                cnt2 <= cnt2 + 1;
            end
        end
    end

    // Combined result of clk_div1 and clk_div2
    always @(*) begin
        clk_div = clk_div1 | clk_div2;
    end
    
endmodule
```