```verilog
module top_module(
    input in,
    input [1:0] state,
    output reg [1:0] next_state,
    output reg out
);

    parameter A=2'b00, B=2'b01, C=2'b10, D=2'b11;

    // State transition logic: next_state = f(state, in)
    always @(*) begin
        case(state)
            A: begin
                next_state = (in == 1'b0) ? A : B;
            end
            B: begin
                next_state = (in == 1'b0) ? C : B;
            end
            C: begin
                next_state = (in == 1'b0) ? A : D;
            end
            D: begin
                next_state = (in == 1'b0) ? C : B;
            end
            default: begin
                next_state = A; // Fallback to state A for robustness
            end
        endcase
    end

    // Output logic:  out = f(state) for a Moore state machine
    always @(*) begin
        case(state)
            A: out = 1'b0;
            B: out = 1'b0;
            C: out = 1'b0;
            D: out = 1'b1;
            default: out = 1'b0; // Default output
        endcase
    end

endmodule
```