```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
); 

    // FSM state declarations
    typedef enum reg [1:0] {IDLE, START, DATA, STOP} state_t;
    state_t current_state, next_state;
    
    // Register to hold the shift data for the byte
    reg [7:0] shift_reg;
    reg [2:0] bit_counter; // Counter to track number of bits received

    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            shift_reg <= 8'b0;
            out_byte <= 8'b0;
            done <= 1'b0;
            bit_counter <= 3'b0;
        end else begin
            current_state <= next_state;

            case (current_state)
                START: begin
                    if(bit_counter < 3'b111) begin
                        bit_counter <= bit_counter + 1'b1;
                        shift_reg <= {in, shift_reg[7:1]}; // Shift in; LSB comes first
                    end
                end
                DATA: begin
                    if(bit_counter < 3'b111) begin
                        bit_counter <= bit_counter + 1'b1;
                        shift_reg <= {in, shift_reg[7:1]}; // Continue shifting in the bits
                    end
                end
                STOP: begin
                    out_byte <= shift_reg; // Data is now valid
                    done <= 1'b1;
                end
                default: begin
                    done <= 1'b0;
                    bit_counter <= 3'b0;
                end
            endcase
        end
    end
    
    // Next state logic
    always @(*) begin
        case (current_state)
            IDLE: begin
                if (in == 1'b0) // Start bit detected (which is 0)
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: begin
                if (bit_counter == 3'b111)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            DATA: begin
                if (bit_counter == 3'b111)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in == 1'b1) // Stop bit detected (which is 1)
                    next_state = IDLE;
                else
                    next_state = START; // Re-align to find a correct stop bit
            end
            default: next_state = IDLE;
        endcase
    end
endmodule
```