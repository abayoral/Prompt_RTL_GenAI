```verilog
module my_dff8 ( 
    input clk, 
    input [7:0] d, 
    output reg [7:0] q 
);
    always @(posedge clk) begin
        q <= d;
    end
endmodule

module top_module ( 
    input clk, 
    input [7:0] d, 
    input [1:0] sel, 
    output [7:0] q 
);
    wire [7:0] q1, q2, q3;

    // Instantiate three 8-bit D flip-flops (my_dff8)
    my_dff8 dff1 ( 
        .clk(clk),
        .d(d),
        .q(q1)
    );

    my_dff8 dff2 (
        .clk(clk),
        .d(q1),
        .q(q2)
    );

    my_dff8 dff3 (
        .clk(clk),
        .d(q2),
        .q(q3)
    );

    // 4-to-1 multiplexer using always block
    always @(*) begin
        case (sel)
            2'b00: q = d;   // No delay
            2'b01: q = q1;  // Delay of 1 cycle
            2'b10: q = q2;  // Delay of 2 cycles
            2'b11: q = q3;  // Delay of 3 cycles
            default: q = 8'b0; // Default case, should not occur
        endcase
    end

endmodule
```