```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    reg [3:0] bit_counter; // Counter for bits received
    reg [7:0] received_data; // Buffer to store the received data byte
    reg receiving; // State of the FSM: If we're currently receiving a byte
    reg stop_bit_expected; // Flag to check if stop bit is expected
    reg parity_bit_received; // Flag to check if parity bit has been received

    wire odd_parity; // Wire for output of the parity module

    // Instantiate the parity module
    parity parity_inst (
        .clk(clk),
        .reset(reset || (bit_counter == 0 && !receiving)), // Reset at start of reception
        .in(in),
        .odd(odd_parity)
    );

    always @(posedge clk) begin
        if (reset) begin
            bit_counter <= 0;
            out_byte <= 0;
            receiving <= 0;
            done <= 0;
            stop_bit_expected <= 0;
            parity_bit_received <= 0;
        end else begin
            // FSM: Simple state-based behavior
            if (!receiving) begin
                if (in == 0) begin // Start bit detected
                    receiving <= 1;
                    bit_counter <= 0;
                end
                done <= 0;
            end else begin
                if (bit_counter < 8) begin
                    received_data[bit_counter] <= in; // Shift in the data bits
                end

                bit_counter <= bit_counter + 1;

                if (bit_counter == 8) begin
                    parity_bit_received <= in; // Capture parity bit
                end

                if (bit_counter == 9) begin
                    if (in == 1) begin // Stop bit should be 1
                        stop_bit_expected <= 1;
                    end else begin
                        stop_bit_expected <= 0;
                    end

                    // Check for stop bit and parity correctness
                    if (stop_bit_expected && (odd_parity == 1)) begin
                        out_byte <= received_data;
                        done <= 1; // Byte successfully received
                    end else begin
                        done <= 0; // Failed due to stop bit or parity check
                    end

                    // Reset state after reception
                    receiving <= 0;
                    stop_bit_expected <= 0;
                    bit_counter <= 0;
                end
            end
        end
    end
endmodule
```