```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    // Define the states of the FSM
    typedef enum reg [1:0] {WAIT_FOR_START, BYTE1, BYTE2, BYTE3} state_t;
    state_t state, next_state;

    // Internal registers for data storage
    reg [7:0] byte1, byte2, byte3;
    
    // State transition
    always @(posedge clk) begin
        if (reset) begin
            state <= WAIT_FOR_START;
        end else begin
            state <= next_state;
        end
    end
    
    // Next state logic
    always @(*) begin
        case (state)
            WAIT_FOR_START: begin
                if (in[3]) begin
                    next_state = BYTE1;
                end else begin
                    next_state = WAIT_FOR_START;
                end
            end
            BYTE1: begin
                next_state = BYTE2;
            end
            BYTE2: begin
                next_state = BYTE3;
            end
            BYTE3: begin
                next_state = WAIT_FOR_START;
            end
            default: begin
                next_state = WAIT_FOR_START;
            end
        endcase
    end

    // Output logic and data capture
    always @(posedge clk) begin
        if (reset) begin
            out_bytes <= 24'b0;
            done <= 0;
            byte1 <= 8'b0;
            byte2 <= 8'b0;
            byte3 <= 8'b0;
        end else begin
            done <= 0;
            case (state)
                WAIT_FOR_START: begin
                    // Nothing to capture here
                end
                BYTE1: begin
                    byte1 <= in;
                end
                BYTE2: begin
                    byte2 <= in;
                end
                BYTE3: begin
                    byte3 <= in;
                    done <= 1;
                    out_bytes <= {byte1, byte2, in}; // Capture the complete 3-byte message
                end
            endcase
        end
    end

endmodule
```