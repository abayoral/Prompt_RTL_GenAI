```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
);

    // State encoding
    typedef enum reg [1:0] {
        IDLE    = 2'b00, // Idle state, waiting for the start of a message
        BYTE1   = 2'b01, // Received first byte of the message
        BYTE2   = 2'b10, // Received second byte of the message
        BYTE3   = 2'b11  // Received third byte of the message
    } state_t;

    // State variables
    reg [1:0] state, next_state;

    // State transition logic (combinational)
    always @(*) begin
        case (state)
            IDLE: begin
                if (in[3] == 1)  // Check if this is the first byte of a message
                    next_state = BYTE1;
                else
                    next_state = IDLE;
            end
            BYTE1: begin
                next_state = BYTE2; // Always transition to BYTE2 after BYTE1
            end
            BYTE2: begin
                next_state = BYTE3; // Always transition to BYTE3 after BYTE2
            end
            BYTE3: begin
                next_state = IDLE; // After BYTE3, go back to IDLE
            end
            default: begin
                next_state = IDLE; // Default to IDLE state
            end
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk or posedge reset) begin
        if (reset)
            state <= IDLE;
        else
            state <= next_state;
    end

    // Output logic
    always @(posedge clk) begin
        if (reset) 
            done <= 0;
        else if (state == BYTE3)
            done <= 1;  // Assert done signal when reaching BYTE3
        else
            done <= 0;
    end

endmodule
```