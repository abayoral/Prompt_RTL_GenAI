```verilog
module instr_reg (
    input wire clk,
    input wire rst, 
    input wire [1:0] fetch, 
    input wire [7:0] data, 
    output reg [2:0] ins, 
    output reg [4:0] ad1, 
    output reg [7:0] ad2
);

    reg [7:0] ins_p1;
    reg [7:0] ins_p2;

    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            ins_p1 <= 8'b0;
            ins_p2 <= 8'b0;
        end else begin
            case (fetch)
                2'b01: ins_p1 <= data;
                2'b10: ins_p2 <= data;
                default: begin
                    ins_p1 <= ins_p1; // retain current value
                    ins_p2 <= ins_p2; // retain current value
                end
            endcase
        end
    end

    always @* begin
        // Split ins_p1 into opcode and address parts
        ins = ins_p1[7:5];
        ad1 = ins_p1[4:0];
        // Pass entire ins_p2 as ad2
        ad2 = ins_p2;
    end

endmodule
```
