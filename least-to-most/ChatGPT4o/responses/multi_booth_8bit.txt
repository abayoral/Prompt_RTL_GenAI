```verilog
module multi_booth_8bit(
    input wire clk,
    input wire reset,
    input wire [7:0] a,
    input wire [7:0] b,
    output reg [15:0] p,
    output reg rdy
);
    reg [15:0] multiplicand, multiplier;
    reg [4:0] ctr;
    reg [15:0] product;
    reg [1:0] booth_code;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            // Initialize states on reset
            multiplier <= {{8{a[7]}}, a};
            multiplicand <= {{8{b[7]}}, b};
            product <= 16'h0000;
            ctr <= 5'd0;
            rdy <= 1'b0;
            booth_code <= 2'b00;
        end else if (!rdy) begin
            // Booth's algorithm steps
            booth_code <= {multiplier[1:0]};
            case (booth_code)
                2'b01: product <= product + multiplicand; // Add multiplicand
                2'b10: product <= product - multiplicand; // Subtract multiplicand
                default: ; // No operation
            endcase
            // Arithmetic right shift of multiplier and update
            {multiplier, product} <= {product[15], product, multiplier[15:1]};

            // Increment counter
            ctr <= ctr + 1;

            // Check if 16 cycles are complete
            if (ctr == 5'd15) begin
                p <= product;
                rdy <= 1'b1;
            end
        end
    end
endmodule
```
