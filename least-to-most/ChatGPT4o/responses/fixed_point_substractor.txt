```verilog
module fixed_point_subtractor #(parameter N = 16, parameter Q = 8) (
    input  wire [N-1:0] a,
    input  wire [N-1:0] b,
    output reg  [N-1:0] c
);
    // Internal register to hold result
    reg signed [N:0] temp_res; // Using N+1 bits for handling overflow/underflow

    // Perform subtraction
    always @(*) begin
        // Sign-extend both operands
        reg signed [N:0] a_ext;
        reg signed [N:0] b_ext;
        a_ext = {a[N-1], a}; // Extend with sign bit
        b_ext = {b[N-1], b}; // Extend with sign bit

        // Compute result
        temp_res = a_ext - b_ext;

        // Handle sign of zero output
        if (temp_res[N:0] == 0)
            c = 0; // Explicitly set to zero
        else
            c = temp_res[N-1:0]; // Assign the result considering N bits
    end

endmodule
```

This code implements a fixed-point subtraction module with specified precision. The sign handling, including the explicit setting of the zero output, is adhered to by extending the operands for arithmetic operations and considering the sign bit correctly. The result is stored in a signed register of size `N+1` to accommodate potential overflow during the computation.