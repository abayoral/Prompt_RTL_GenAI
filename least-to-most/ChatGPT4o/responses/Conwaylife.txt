```verilog
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q 
);

    reg [15:0] grid [15:0]; // 16x16 grid

    integer i, j;
    integer ni, nj;
    integer count;
    
    // Function to compute neighbors
    function [3:0] neighbor_count(input integer x, input integer y);
        integer dx, dy;
        integer nx, ny;
        begin
            neighbor_count = 0;
            for (dx = -1; dx <= 1; dx = dx + 1) begin
                for (dy = -1; dy <= 1; dy = dy + 1) begin
                    if (dx != 0 || dy != 0) begin  // Exclude the cell itself
                        nx = (x + dx + 16) % 16;
                        ny = (y + dy + 16) % 16;
                        neighbor_count = neighbor_count + grid[nx][ny];
                    end
                end
            end
        end
    endfunction

    always @(posedge clk) begin
        if (load) begin
            // Load the initial state into grid
            for (i = 0; i < 16; i = i + 1) begin
                grid[i] <= data[(i*16)+:16];
            end
        end
        else begin
            // Calculate the next state
            reg [15:0] next_grid [15:0];
            for (i = 0; i < 16; i = i + 1) begin
                for (j = 0; j < 16; j = j + 1) begin
                    count = neighbor_count(i, j);
                    if (count == 3) 
                        next_grid[i][j] = 1;
                    else if (count == 2)
                        next_grid[i][j] = grid[i][j];
                    else
                        next_grid[i][j] = 0;
                end
            end
            // Update grid
            for (i = 0; i < 16; i = i + 1) begin
                grid[i] <= next_grid[i];
            end
        end

        // Update the output q
        for (i = 0; i < 16; i = i + 1) begin
            q[(i*16)+:16] <= grid[i];
        end
    end

endmodule
```