```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);

    // State Encoding
    typedef enum logic [2:0] {
        IDLE      = 3'b000,
        START_BIT = 3'b001,
        DATA_BIT  = 3'b010,
        STOP_BIT  = 3'b011,
        DONE      = 3'b100,
        ERROR     = 3'b101
    } state_t;
    
    state_t state, next_state;
    
    reg [3:0] bit_counter;  // Counts bits from 0 to 8 (8 data bits)

    // State Transition Logic
    always_ff @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next State Logic
    always_comb begin
        next_state = state; // Default to the current state
        done = 1'b0;        // Default to not done
        case (state)
            IDLE: begin
                if (in == 1'b0) begin  // Look for start bit
                    next_state = START_BIT;
                end
            end
            START_BIT: begin
                next_state = DATA_BIT;
            end
            DATA_BIT: begin
                if (bit_counter == 4'd8) begin
                    next_state = STOP_BIT;
                end
            end
            STOP_BIT: begin
                if (in == 1'b1) begin
                    next_state = DONE;
                end else begin
                    next_state = ERROR; // Stop bit incorrect, wait for the next correct stop bit
                end
            end
            DONE: begin
                done = 1'b1;
                next_state = IDLE;  // Return to IDLE after successful done signal
            end
            ERROR: begin
                if (in == 1'b1) begin
                    next_state = IDLE; // When a correct stop bit is found, reset to IDLE
                end
            end
        endcase
    end

    // Bit Counter Logic
    always_ff @(posedge clk) begin
        if (reset || state == IDLE || state == START_BIT || state == ERROR) begin
            bit_counter <= 4'd0;
        end else if (state == DATA_BIT) begin
            bit_counter <= bit_counter + 1'b1;
        end
    end

endmodule
```