```verilog
module LIFObuffer (
    input [3:0] dataIn,
    input RW,   // Read (1) / Write (0) control 
    input EN,   // Enable signal 
    input Rst,  // Reset signal 
    input Clk,  // Clock signal 
    output reg EMPTY, // Empty flag 
    output reg FULL,  // Full flag 
    output reg [3:0] dataOut // Data output
);

    reg [3:0] stack_mem[3:0]; // 4x4-bit stack memory 
    reg [2:0] SP;  // Stack Pointer (0 to 4, 5 states, need 3 bits)

    // LIFO buffer behavior implementation
    always @(posedge Clk or posedge Rst) begin
        if (Rst) begin
            // Reset stack pointer and buffer contents
            SP <= 3'd4;
            stack_mem[0] <= 4'b0000;
            stack_mem[1] <= 4'b0000;
            stack_mem[2] <= 4'b0000;
            stack_mem[3] <= 4'b0000;
            EMPTY <= 1;
            FULL <= 0;
        end else if (EN) begin
            if (!RW) begin
                // Push operation
                if (!FULL) begin
                    SP <= SP - 1;
                    stack_mem[SP-1] <= dataIn;
                end
            end else begin
                // Pop operation
                if (!EMPTY) begin
                    dataOut <= stack_mem[SP];
                    stack_mem[SP] <= 4'b0000;
                    SP <= SP + 1;
                end
            end
        end
    end

    // Update EMPTY and FULL flags
    always @(*) begin
        EMPTY = (SP == 3'd4);
        FULL = (SP == 3'd0);
    end

endmodule
```
