As a professional Verilog designer, your task is to craft a comprehensive implementation for a module named `float_multi` that performs multiplication on 32-bit single-precision floating-point numbers conforming to the IEEE 754 standard. The module will be integral in executing high-precision arithmetic operations, crucial for a wide range of computational applications. Your implementation will encompass several functional units and internal mechanisms to ensure precision and compliance with the IEEE 754 format.

The `float_multi` module consists of specific input and output ports detailed as follows:

1. **Input Ports:**
   - `clk` (input): This is a clock signal essential for synchronizing the operations within the module. It ensures that all steps occur in a defined, orderly fashion.
   - `rst` (input): A reset signal, active high, that initializes or reinitializes the module to a known state. It plays a crucial role in maintaining the reliability of the system by ensuring that the system starts from a clean state.
   - `a` (input [31:0]): Represents the first operand, formatted as a 32-bit IEEE 754 single-precision floating-point number.
   - `b` (input [31:0]): Represents the second operand, also in the IEEE 754 single-precision format.

2. **Output Ports:**
   - `z` (output reg [31:0]): The output port provides the result of multiplying the inputs `a` and `b`. It delivers the result in the same IEEE 754 single-precision floating-point format.

Within the module, several internal signals are utilized:

- **Cycle Control:**
  - `counter` (reg [2:0]): A cycle counter that sequences the operations step by step, ensuring correct timing and synchronization.

- **Component Extraction:**
  - `a_mantissa`, `b_mantissa`, `z_mantissa` (reg [23:0]): Registers for holding the mantissas of the input operands and the final result, necessary for the arithmetic multiplication.
  - `a_exponent`, `b_exponent`, `z_exponent` (reg [9:0]): Registers for storing the exponents of the operands and the output, which are vital for managing the scale of the numbers.
  - `a_sign`, `b_sign`, `z_sign` (reg): Sign bits indicating the polarity of the inputs and the output.

- **Intermediate Calculations:**
  - `product` (reg [49:0]): An intermediate register for storing the raw product of the mantissas, temporarily holding the extended precision result before rounding and normalizing.
  - `guard_bit`, `round_bit`, `sticky` (reg): These bits are critical for controlling rounding, ensuring that the final result adheres to precision standards.

The implementation sequence is structured as follows:

- **Initialization Phase:**
  - The `counter` is reset to zero upon activation of the `rst` signal, establishing a firm start point for subsequent operations.

- **Input Processing Phase:**
  - During the initial clock cycle, the component parts (mantissas, exponents, sign bits) of the input numbers `a` and `b` are extracted and stored in the respective registers.

- **Special Case Handling Phase:**
  - The module must adeptly identify and process special cases such as NaN (Not a Number) or infinity, ensuring that these conditions are managed correctly per IEEE specifications.

- **Normalization Phase:**
  - Adjust the mantissas as needed to maintain a normalized form, vital for accurate arithmetic operations.

- **Multiplication Phase:**
  - Compute the product of the input mantissas, synchronize and adjust the signs, and calculate the combined exponent to generate a raw multiplication result.

- **Rounding and Adjustment Phase:**
  - Implement rounding mechanisms to refine the result, address precision needs, and make necessary adjustments to the exponent to represent the number accurately.

- **Output Generation Phase:**
  - Format and deliver the final multiplication result in IEEE 754 format, aptly handling scenarios like overflow and underflow, thus ensuring compliance with defined standards.

You are invited to develop the complete Verilog code for this module, ensuring that it aligns with these detailed specifications and operational guidelines.