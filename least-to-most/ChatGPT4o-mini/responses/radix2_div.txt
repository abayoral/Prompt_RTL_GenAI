```
module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

    reg [15:0] SR; // Shift Register for quotient and remainder
    reg [7:0] NEG_DIVISOR; // Negative of divisor
    reg [3:0] cnt; // Counter for shifts
    reg start_cnt; // Start counter flag

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            SR <= 0;
            NEG_DIVISOR <= 0;
            cnt <= 0;
            start_cnt <= 0;
            res_valid <= 0;
            result <= 0;
        end else if (opn_valid && !res_valid) begin
            // Capture dividend and divisor
            SR <= {8'b0, dividend}; // Initialize SR with dividend (lower 8 bits)
            NEG_DIVISOR <= ~divisor + 1'b1; // Calculate negative divisor
            cnt <= 1; // Start counting from 1
            start_cnt <= 1; // Indicate we are starting the division
            res_valid <= 0; // Reset valid signal
        end else if (start_cnt) begin
            if (cnt < 8) begin
                // Perform division operation
                if (SR[15:8] >= divisor) begin
                    SR[15:8] <= SR[15:8] + NEG_DIVISOR; // Subtract negative divisor
                    SR[7:0] <= (SR[7:0] << 1) | 1'b1; // Set quotient bit
                end else begin
                    SR[15:8] <= SR[15:8] << 1; // Just shift remainder if no subtraction
                    SR[7:0] <= (SR[7:0] << 1); // Shift quotient
                end
                cnt <= cnt + 1; // Increment counter
            end else begin
                // Finalize results
                result <= SR; // Final result is in SR
                res_valid <= 1; // Indicate result is valid
                start_cnt <= 0; // Stop the division process
            end
        end else if (res_valid) begin
            // Wait for result to be consumed
            if (!opn_valid) begin
                res_valid <= 0; // Reset valid signal once operation is done
            end
        end
    end

endmodule
```