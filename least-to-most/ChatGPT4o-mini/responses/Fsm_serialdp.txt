```
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
); 

    reg [3:0] state;
    reg [3:0] next_state;
    reg [7:0] data;
    reg parity_bit;
    wire odd_parity;
    
    parity p_unit (
        .clk(clk),
        .reset(reset),
        .in(in),
        .odd(odd_parity)
    );

    // State encoding
    localparam IDLE = 4'b0000,
               START = 4'b0001,
               DATA = 4'b0010,
               PARITY = 4'b0011,
               STOP = 4'b0100;

    // State transition and output logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            out_byte <= 8'b0;
            done <= 0;
        end else begin
            state <= next_state;
        end
    end

    always @(*) begin
        next_state = state; // Default to hold state
        done = 0; // Default done to 0
        
        case (state)
            IDLE: begin
                if (in == 0) begin // Detect start bit
                    next_state = START;
                end
            end
            
            START: begin
                next_state = DATA; // Move to data state after start bit
            end

            DATA: begin
                if (data < 8) begin // Read 8 data bits
                    data = {in, data[7:1]};
                end else begin
                    next_state = PARITY; // Move to parity state after data
                end
            end
            
            PARITY: begin
                parity_bit = in; // Capture parity bit
                next_state = STOP; // Move to stop bit state
            end
            
            STOP: begin
                if (in == 1) begin // Check if stop bit is valid
                    if (odd_parity) begin
                        out_byte = data; // Store data if parity is correct
                        done = 1; // Assert done
                    end
                    next_state = IDLE; // Go back to idle state
                end else begin
                    // If stop bit is not detected, remain in STOP state
                    next_state = STOP; 
                end
            end
            
            default: next_state = IDLE; // Default case
        endcase
    end
    
endmodule
```