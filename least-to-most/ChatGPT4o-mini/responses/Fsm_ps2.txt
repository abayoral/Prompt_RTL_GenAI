```
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
);
    
    typedef enum reg [1:0] {
        IDLE,      // Waiting for start of message
        BYTE1,     // First byte of message received
        BYTE2,     // Second byte of message received
        DONE       // Message completed
    } state_t;

    state_t current_state, next_state;

    // State transition logic (combinational)
    always @(*) begin
        case (current_state)
            IDLE: begin
                if (in[3] == 1'b1)
                    next_state = BYTE1;
                else
                    next_state = IDLE;
            end
            BYTE1: begin
                next_state = BYTE2;
            end
            BYTE2: begin
                next_state = DONE;
            end
            DONE: begin
                next_state = IDLE;  // After signaling done, return to IDLE
            end
            default: next_state = IDLE;
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            done <= 1'b0;
        end else begin
            current_state <= next_state;

            // Output logic
            if (next_state == DONE) begin
                done <= 1'b1; // Signal done
            end else begin
                done <= 1'b0; // Reset done in other states
            end
        end
    end

endmodule
```