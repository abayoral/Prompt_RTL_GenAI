```verilog
module LIFObuffer (
    input  wire [3:0] dataIn,
    input  wire RW,
    input  wire EN,
    input  wire Rst,
    input  wire Clk,
    output reg EMPTY,
    output reg FULL,
    output reg [3:0] dataOut
);

    reg [3:0] stack_mem [3:0]; // 4-bit data entries, 4 entries
    reg [1:0] SP; // Stack pointer to track position (0 to 3)

    always @(posedge Clk or posedge Rst) begin
        if (Rst) begin
            SP <= 2'b00; // Reset pointer for empty stack
            EMPTY <= 1'b1; // Mark the buffer as empty
            FULL <= 1'b0; // Mark the buffer as not full
            dataOut <= 4'b0000; // Clear output data
            // Clear stack memory
            stack_mem[0] <= 4'b0000;
            stack_mem[1] <= 4'b0000;
            stack_mem[2] <= 4'b0000;
            stack_mem[3] <= 4'b0000;
        end else if (EN) begin
            if (RW == 1'b0) begin // Push operation
                if (!FULL) begin
                    stack_mem[SP] <= dataIn; // Write data to stack
                    SP <= SP + 1'b1; // Move stack pointer down
                end
            end else begin // Pop operation
                if (!EMPTY) begin
                    SP <= SP - 1'b1; // Move stack pointer up
                    dataOut <= stack_mem[SP]; // Read data from stack
                    stack_mem[SP] <= 4'b0000; // Clear the memory location
                end
            end
            
            // Update EMPTY and FULL flags
            EMPTY <= (SP == 2'b00);
            FULL <= (SP == 2'b11);
        end
    end

endmodule
```