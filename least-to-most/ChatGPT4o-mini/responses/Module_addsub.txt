```
module top_module(
    input [31:0] a,
    input [31:0] b,
    input sub,
    output [31:0] sum
);
    wire [15:0] b_inverted;
    wire carry_out1, carry_out2;

    // Invert b when sub is 1
    assign b_inverted = b[15:0] ^ {16{sub}}; // Invert lower 16 bits of b

    // First adder to add the lower 16 bits
    add16 u1 (
        .a(a[15:0]),
        .b(b_inverted),
        .cin(sub),
        .sum(sum[15:0]),
        .cout(carry_out1)
    );

    // Invert b when sub is 1 for the upper bits
    assign b_inverted = b[31:16] ^ {16{sub}}; // Invert upper 16 bits of b

    // Second adder to add the upper 16 bits
    add16 u2 (
        .a(a[31:16]),
        .b(b_inverted),
        .cin(carry_out1), // Carry from the lower adder
        .sum(sum[31:16]),
        .cout(carry_out2)
    );

endmodule
```