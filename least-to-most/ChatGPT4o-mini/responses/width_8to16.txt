```
module width_8to16 (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    reg [7:0] first_byte;
    reg first_valid;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'b0;
            valid_out <= 1'b0;
            first_valid <= 1'b0;
        end else begin
            if (valid_in) begin
                if (!first_valid) begin
                    // Store first 8 bits
                    first_byte <= data_in;
                    first_valid <= 1'b1;
                end else begin
                    // Form 16-bit output
                    data_out <= {first_byte, data_in};
                    valid_out <= 1'b1;
                    first_valid <= 1'b0; // Reset for next transaction
                end
            end else begin
                // If no valid input, reset valid_out
                valid_out <= 1'b0;
            end
        end
    end

endmodule
```