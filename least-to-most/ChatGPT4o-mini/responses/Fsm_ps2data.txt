```
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    reg [1:0] state, next_state;
    reg [7:0] byte1, byte2, byte3;
    reg [2:0] byte_count;

    // State encoding
    localparam IDLE   = 2'b00,
               BYTE1  = 2'b01,
               BYTE2  = 2'b10,
               BYTE3  = 2'b11;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            byte_count <= 0;
            out_bytes <= 24'b0;
            done <= 0;
        end else begin
            state <= next_state;
        end
    end

    always @(*) begin
        next_state = state;
        done = 0;

        case (state)
            IDLE: begin
                if (in[3]) begin
                    byte1 = in;
                    byte_count = 1;
                    next_state = BYTE1;
                end
            end
            BYTE1: begin
                byte2 = in;
                byte_count = 2;
                next_state = BYTE2;
            end
            BYTE2: begin
                byte3 = in;
                byte_count = 3;
                next_state = BYTE3;
            end
            BYTE3: begin
                done = 1;
                out_bytes = {byte1, byte2, byte3};
                if (in[3]) begin
                    byte1 = in;
                    byte_count = 1;
                    next_state = BYTE1;
                end else begin
                    next_state = IDLE;
                end
            end
        endcase
    end

endmodule
```