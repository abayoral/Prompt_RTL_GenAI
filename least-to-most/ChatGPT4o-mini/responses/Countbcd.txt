```
module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q
);
    reg [3:0] units;   // Ones digit
    reg [3:0] tens;    // Tens digit
    reg [3:0] hundreds; // Hundreds digit
    reg [3:0] thousands; // Thousands digit

    assign q = {thousands, hundreds, tens, units};

    // Enable signals for upper three digits
    assign ena[1] = (units == 4'b1001) ? 1'b1 : 1'b0; // Enable tens for units rollover
    assign ena[2] = (tens == 4'b1001 && ena[1]) ? 1'b1 : 1'b0; // Enable hundreds for tens rollover
    assign ena[3] = (hundreds == 4'b1001 && ena[2]) ? 1'b1 : 1'b0; // Enable thousands for hundreds rollover

    // One-digit BCD counter
    always @(posedge clk) begin
        if (reset) begin
            units <= 4'b0000;
            tens <= 4'b0000;
            hundreds <= 4'b0000;
            thousands <= 4'b0000;
        end else begin
            if (units == 4'b1001) begin
                units <= 4'b0000;
                if (tens == 4'b1001) begin
                    tens <= 4'b0000;
                    if (hundreds == 4'b1001) begin
                        hundreds <= 4'b0000;
                        if (thousands == 4'b1001) begin
                            thousands <= 4'b0000; // Reset thousands on overflow
                        end else begin
                            thousands <= thousands + 1'b1; // Increment thousands
                        end
                    end else begin
                        hundreds <= hundreds + 1'b1; // Increment hundreds
                    end
                end else begin
                    tens <= tens + 1'b1; // Increment tens
                end
            end else begin
                units <= units + 1'b1; // Increment units
            end
        end
    end

endmodule
```