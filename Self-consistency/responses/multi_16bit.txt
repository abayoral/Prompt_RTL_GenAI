module multi_16bit (
    input wire clk,
    input wire rst_n,
    input wire start,
    input wire [15:0] ain,
    input wire [15:0] bin,
    output reg [31:0] yout,
    output reg done
);
    reg [4:0] i;             // Shift count register
    reg done_r;              // Completion flag register
    reg [15:0] areg;         // Multiplicand register
    reg [15:0] breg;         // Multiplier register
    reg [31:0] yout_r;       // Product register

    // Process logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            i <= 0;
            done_r <= 0;
            areg <= 0;
            breg <= 0;
            yout_r <= 0;
        end else begin
            if (start) begin
                if (i == 0) begin
                    areg <= ain;
                    breg <= bin;
                    yout_r <= 0;
                end
                
                if (i <= 16) begin
                    if (areg[i-1]) begin
                        yout_r <= yout_r + (breg << (i-1));
                    end
                    i <= i + 1;
                end
                
                if (i == 16) begin
                    done_r <= 1;
                end else if (i == 17) begin
                    done_r <= 0; // Reset done_r after the complete operation
                    i <= 0; // Reset shift count
                end
            end else begin
                i <= 0;
            end
        end
    end

    // Output assignments
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            yout <= 0;
            done <= 0;
        end else begin
            yout <= yout_r;
            done <= done_r;
        end
    end
    
endmodule