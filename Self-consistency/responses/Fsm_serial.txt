module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);

    // Define states
    typedef enum reg [2:0] {
        IDLE,       // Waiting for start bit
        START,      // Start bit detected
        DATA,       // Receiving data bits
        STOP        // Stop bit detection
    } state_t;

    state_t current_state, next_state;
    reg [3:0] bit_count;

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            bit_count <= 0;
        end else begin
            current_state <= next_state;
            if (current_state == DATA) begin
                bit_count <= bit_count + 1;
            end else begin
                bit_count <= 0;
            end
        end
    end

    // Next state logic
    always @(*) begin
        done = 0;
        case (current_state)
            IDLE: begin
                if (in == 0) begin
                    next_state = START;
                end else begin
                    next_state = IDLE;
                end
            end

            START: begin
                next_state = DATA;
            end
        
            DATA: begin
                if (bit_count == 8) begin
                    next_state = STOP;
                end else begin
                    next_state = DATA;
                end
            end

            STOP: begin
                if (in == 1) begin
                    done = 1;
                    next_state = IDLE;
                end else begin
                    next_state = STOP;
                end
            end

            default: next_state = IDLE;
        endcase
    end

endmodule