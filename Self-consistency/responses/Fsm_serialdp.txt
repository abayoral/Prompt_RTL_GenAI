module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // FSM States
    typedef enum reg [2:0] {
        IDLE,
        START,
        RECEIVE,
        PARITY_CHECK,
        STOP
    } state_t;

    state_t current_state, next_state;

    reg [3:0] bit_counter;
    reg [8:0] shift_reg; // Includes 8 data bits + 1 parity bit
    reg parity_bit;
    wire odd;

    // Instantiate the parity module
    parity parity_checker (
        .clk(clk),
        .reset(reset | (current_state == IDLE) | (current_state == START)),
        .in(in),
        .odd(odd)
    );

    // FSM - Next State Logic
    always @(*) begin
        next_state = current_state;
        case (current_state)
            IDLE: begin
                if (in == 0) // Detect the start bit (0)
                    next_state = START;
            end
            START: begin
                next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_counter == 9) // 8 data bits + 1 parity bit
                    next_state = PARITY_CHECK;
            end
            PARITY_CHECK: begin
                if (odd)
                    next_state = STOP;
                else
                    next_state = IDLE; // Parity error, wait for a new start bit
            end
            STOP: begin
                if (in == 1) // Wait for the stop bit (1)
                    next_state = IDLE;
            end
            default: begin
                next_state = IDLE;
            end
        endcase
    end

    // FSM - State Register
    always @(posedge clk) begin
        if (reset)
            current_state <= IDLE;
        else
            current_state <= next_state;
    end

    // Input Shifting and Data Processing
    always @(posedge clk) begin
        if (reset) begin
            bit_counter <= 0;
            shift_reg <= 0;
            parity_bit <= 0;
            done <= 0;
        end else begin
            case (current_state)
                IDLE: begin
                    bit_counter <= 0;
                    shift_reg <= 0;
                    done <= 0;
                end
                START: begin
                    bit_counter <= 0;
                end
                RECEIVE: begin
                    shift_reg <= {in, shift_reg[8:1]}; // Shift left
                    bit_counter <= bit_counter + 1;
                end
                PARITY_CHECK: begin
                    parity_bit <= shift_reg[0]; // LSB is the parity bit
                end
                STOP: begin
                    if (in == 1 && odd) begin // Check stop bit and parity
                        out_byte <= shift_reg[8:1]; // Extract the data byte
                        done <= 1;
                    end
                end
            endcase
        end
    end

endmodule