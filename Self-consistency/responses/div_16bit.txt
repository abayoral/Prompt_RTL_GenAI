module div_16bit (
    input [15:0] A,    // 16-bit dividend
    input [7:0]  B,    // 8-bit divisor
    output reg [15:0] result,  // 16-bit quotient
    output reg [7:0] odd      // 8-bit remainder
);

    reg [15:0] dividend;
    reg [7:0] divisor;
    reg [15:0] quotient;
    reg [15:0] remainder;

    integer i;

    always @(*) begin
        dividend = A;
        divisor = B;
        quotient = 16'd0;
        remainder = 16'd0;

        for (i = 15; i >= 0; i = i - 1) begin
            remainder = (remainder << 1) | (dividend[15]);
            dividend = dividend << 1;

            if (remainder[15:8] >= divisor) begin
                remainder[15:8] = remainder[15:8] - divisor;
                quotient[i] = 1'b1;
            end else begin
                quotient[i] = 1'b0;
            end
        end

        result = quotient;
        odd = remainder[15:8];
    end

endmodule