module freq_divbyodd #(
    parameter NUM_DIV = 5
)(
    input wire clk,
    input wire rst_n,
    output reg clk_div
);

    // Ensure the parameter is a valid odd number
    initial begin
        if ((NUM_DIV % 2) == 0) begin
            $display("Error: NUM_DIV must be an odd number.");
            $finish;
        end
    end

    // Counter declarations
    reg [$clog2(NUM_DIV)-1:0] cnt1, cnt2;
    reg clk_div1, clk_div2;
    
    // Calculate half of NUM_DIV
    localparam HALF_DIV = (NUM_DIV - 1) >> 1;  // Equivalent to (NUM_DIV - 1) / 2
    
    // Synchronous reset and counting logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 1'b0;
        end else begin
            if (cnt1 == NUM_DIV - 1) begin
                cnt1 <= 0;
                clk_div1 <= ~clk_div1;
            end else begin
                cnt1 <= cnt1 + 1;
            end
        end
    end
    
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 1'b0;
        end else begin
            if (cnt2 == HALF_DIV) begin
                cnt2 <= 0;
                clk_div2 <= ~clk_div2;
            end else begin
                cnt2 <= cnt2 + 1;
            end
        end
    end

    // Output clock generation
    always @(*) begin
        clk_div = clk_div1 | clk_div2;
    end

endmodule