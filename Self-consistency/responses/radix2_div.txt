module radix2_div (
    input clk,
    input rst,
    input sign,
    input [7:0] dividend,
    input [7:0] divisor,
    input opn_valid,
    output reg res_valid,
    output reg [15:0] result
);
    reg [7:0] abs_dividend, abs_divisor, quotient, remainder;
    reg [15:0] shift_reg;
    reg [3:0] cnt;
    reg start_cnt;
    wire [8:0] subtract_result;
    reg [7:0] neg_divisor;
    reg neg_result;

    // Calculate absolute values and sign flags
    always @(*) begin
        if (sign) begin
            abs_dividend = dividend[7] ? ~dividend + 1'b1 : dividend;
            abs_divisor = divisor[7] ? ~divisor + 1'b1 : divisor;
            neg_result = dividend[7] ^ divisor[7];
        end else begin
            abs_dividend = dividend;
            abs_divisor = divisor;
            neg_result = 0;
        end
        neg_divisor = ~abs_divisor + 1'b1;
    end

    // Subtract divisor from higher bits of shift register
    assign subtract_result = {shift_reg[14:7], 1'b0} + {neg_divisor, 1'b0};

    // Main operation controlled by sequential logic
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            cnt <= 0;
            start_cnt <= 0;
            res_valid <= 0;
            shift_reg <= 0;
        end else begin
            if (opn_valid && !res_valid && !start_cnt) begin
                shift_reg <= {8'b0, abs_dividend};
                start_cnt <= 1;
                cnt <= 0;
                res_valid <= 0;
            end else if (start_cnt) begin
                if (cnt < 8) begin
                    if (subtract_result[8] == 0) begin
                        shift_reg <= {subtract_result[7:0], shift_reg[6:0]} + 1;
                    end else begin
                        shift_reg <= {shift_reg[14:0], 1'b0};
                    end
                    cnt <= cnt + 1;
                end else begin
                    quotient <= shift_reg[7:0];
                    remainder <= shift_reg[15:8];
                    res_valid <= 1;
                    start_cnt <= 0;
                end
            end

            // Generate final result
            if (res_valid) begin
                if (sign && neg_result) begin
                    result[7:0] <= ~quotient + 1'b1; 
                end else begin
                    result[7:0] <= quotient;
                end
                
                if (sign && dividend[7]) begin
                    result[15:8] <= ~remainder + 1'b1;
                end else begin
                    result[15:8] <= remainder;
                end                
                res_valid <= 0;
            end
        end
    end
endmodule