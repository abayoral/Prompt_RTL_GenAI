module fixed_point_adder #(parameter Q = 8, parameter N = 16)(
    input [N-1:0] a,
    input [N-1:0] b,
    output [N-1:0] c
);
    reg [N:0] sum;  // Additional bit width to handle overflow
    reg [N-1:0] res;
    reg signed [N-1:0] abs_a, abs_b;

    always @(*) begin
        // Determine absolute values
        abs_a = a[N-1] ? (~a + 1'b1) : a;
        abs_b = b[N-1] ? (~b + 1'b1) : b;
        
        // Determine operation
        if (a[N-1] == b[N-1]) begin
            // Same sign, perform addition
            sum = abs_a + abs_b;
            
            // Check for overflow and assign result
            if (sum[N] == 1) begin
                res = {a[N-1], {N-1{1'b1}}};  // Overflow result to max value with the sign
            end else begin
                res = sum[N-1:0];
            end
            
            // Assign the sign
            res[N-1] = a[N-1];
        end else begin
            // Different signs, perform subtraction
            if (abs_a >= abs_b) begin
                sum = abs_a - abs_b;
                res = sum[N-1:0];
                res[N-1] = a[N-1];
            end else begin
                sum = abs_b - abs_a;
                res = sum[N-1:0];
                res[N-1] = b[N-1];
            end
        end
    end

    assign c = res;
endmodule