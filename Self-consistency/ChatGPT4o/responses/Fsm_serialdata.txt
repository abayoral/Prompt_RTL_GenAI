module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
); 

    // State encoding
    typedef enum logic [1:0] {
        IDLE = 2'b00,   // Waiting for start bit
        RECEIVE = 2'b01, // Receiving data bits
        STOP = 2'b10    // Waiting for stop bit
    } state_t;

    state_t state, next_state;

    reg [2:0] bit_position; // Keep track of bit position in byte (3 bits: 0 to 7)
    reg [7:0] shift_reg;    // Shift register to store byte data

    // State transition
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic and output logic
    always @(*) begin
        // Default values
        next_state = state;
        done = 1'b0;
        
        case (state)
            IDLE: begin
                // Look for start bit (assuming it is a '0')
                if (in == 1'b0) begin
                    next_state = RECEIVE;
                    bit_position = 3'b000; // reset bit position counter
                end
            end

            RECEIVE: begin
                // Shift in data bits
                shift_reg[bit_position] = in;

                if (bit_position == 3'b111) begin
                    next_state = STOP;
                end else begin
                    bit_position = bit_position + 1;
                end
            end

            STOP: begin
                if (in == 1'b1) begin // Verify stop bit (assuming it is a '1')
                    done = 1'b1;
                    out_byte = shift_reg; // Output the byte
                    next_state = IDLE; // Go back to waiting for next start bit
                end
            end
        endcase
    end

    // Sequential logic to shift the input bits
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 8'b0;
            bit_position <= 3'b000;
        end else if (state == RECEIVE) begin
            shift_reg[bit_position] <= in; // Capture the incoming data bit
        end
    end

endmodule