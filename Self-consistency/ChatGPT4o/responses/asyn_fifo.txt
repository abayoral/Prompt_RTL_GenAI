module dual_port_ram #(parameter WIDTH = 8, DEPTH = 16, ADDR_WIDTH = 4)(
    input wclk,
    input wenc,
    input [ADDR_WIDTH-1:0] waddr,
    input [WIDTH-1:0] wdata,
    input rclk,
    input renc,
    input [ADDR_WIDTH-1:0] raddr,
    output reg [WIDTH-1:0] rdata
);
    reg [WIDTH-1:0] mem [0:DEPTH-1];

    always @(posedge wclk) begin
        if (wenc)
            mem[waddr] <= wdata;
    end

    always @(posedge rclk) begin
        if (renc)
            rdata <= mem[raddr];
    end
endmodule

module asyn_fifo #(parameter WIDTH = 8, DEPTH = 16, ADDR_WIDTH = 4)(
    input wclk,
    input rclk,
    input wrstn,
    input rrstn,
    input winc,
    input rinc,
    input [WIDTH-1:0] wdata,
    output [WIDTH-1:0] rdata,
    output wfull,
    output rempty
);

    reg [ADDR_WIDTH:0] wptr_bin, wptr_gray, rptr_bin, rptr_gray;
    reg [ADDR_WIDTH:0] wq2_rptr, rq2_wptr;
    wire [ADDR_WIDTH-1:0] waddr, raddr;
    
    // Instantiating dual-port RAM
    dual_port_ram #(.WIDTH(WIDTH), .DEPTH(DEPTH), .ADDR_WIDTH(ADDR_WIDTH)) 
        fifo_ram (
            .wclk(wclk),
            .wenc(winc && !wfull),
            .waddr(wptr_bin[ADDR_WIDTH-1:0]),
            .wdata(wdata),
            .rclk(rclk),
            .renc(rinc && !rempty),
            .raddr(rptr_bin[ADDR_WIDTH-1:0]),
            .rdata(rdata)
        );

    // Gray code conversion for binary to gray
    function [ADDR_WIDTH:0] bin_to_gray(input [ADDR_WIDTH:0] bin);
        bin_to_gray = (bin >> 1) ^ bin;
    endfunction

    // Gray code conversion for gray to binary
    function [ADDR_WIDTH:0] gray_to_bin(input [ADDR_WIDTH:0] gray);
        integer i;
        begin
            gray_to_bin[ADDR_WIDTH] = gray[ADDR_WIDTH];
            for (i = ADDR_WIDTH-1; i >= 0; i = i - 1) begin
                gray_to_bin[i] = gray_to_bin[i + 1] ^ gray[i];
            end
        end
    endfunction

    // Write pointer logic
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            wptr_bin <= 0;
            wptr_gray <= 0;
        end else if (winc && !wfull) begin
            wptr_bin <= wptr_bin + 1;
            wptr_gray <= bin_to_gray(wptr_bin + 1);
        end
    end

    // Read pointer logic
    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            rptr_bin <= 0;
            rptr_gray <= 0;
        end else if (rinc && !rempty) begin
            rptr_bin <= rptr_bin + 1;
            rptr_gray <= bin_to_gray(rptr_bin + 1);
        end
    end

    // Synchronize read pointer into write clock domain
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            wq2_rptr <= 0;
        end else begin
            wq2_rptr <= {wq2_rptr[ADDR_WIDTH-1:0], rptr_gray};
        end
    end

    // Synchronize write pointer into read clock domain
    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            rq2_wptr <= 0;
        end else begin
            rq2_wptr <= {rq2_wptr[ADDR_WIDTH-1:0], wptr_gray};
        end
    end

    // Full and empty logic
    assign wfull = (wptr_gray == {~wq2_rptr[ADDR_WIDTH], wq2_rptr[ADDR_WIDTH-1:0]});
    assign rempty = (rptr_gray == rq2_wptr[ADDR_WIDTH:0]);

endmodule