module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output reg [3:1] ena,
    output reg [15:0] q
);

    // Internal wires to propagate enable signals
    wire ena1, ena2, ena3;

    // Combinatorial logic for enabling each BCD digit counter
    assign ena1 = (q[3:0] == 4'd9); // Enable the tens digit when ones is 9
    assign ena2 = (q[7:4] == 4'd9) & ena1; // Enable the hundreds digit when tens is 9
    assign ena3 = (q[11:8] == 4'd9) & ena2; // Enable the thousands digit when hundreds is 9
    
    // Sequential logic for the BCD counters
    always @(posedge clk) begin
        if (reset) begin
            q <= 16'b0;
            ena <= 3'b0;
        end else begin
            // Ones digit
            if (q[3:0] == 4'd9) 
                q[3:0] <= 4'd0;
            else 
                q[3:0] <= q[3:0] + 1;

            // Tens digit
            if (ena1) begin
                if (q[7:4] == 4'd9) 
                    q[7:4] <= 4'd0;
                else
                    q[7:4] <= q[7:4] + 1;
            end

            // Hundreds digit
            if (ena2) begin
                if (q[11:8] == 4'd9) 
                    q[11:8] <= 4'd0;
                else
                    q[11:8] <= q[11:8] + 1;
            end

            // Thousands digit
            if (ena3) begin
                if (q[15:12] == 4'd9) 
                    q[15:12] <= 4'd0;
                else
                    q[15:12] <= q[15:12] + 1;
            end
        end

        // Assign enable outputs
        ena[1] <= ena1;
        ena[2] <= ena2;
        ena[3] <= ena3;
    end

endmodule