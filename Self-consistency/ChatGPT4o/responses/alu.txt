module alu (
    input [31:0] a, b,
    input [5:0] aluc,
    output reg [31:0] r,
    output reg zero,
    output reg carry,
    output reg negative,
    output reg overflow,
    output reg flag
);

always @(*) begin
    reg signed [31:0] signed_a, signed_b;
    reg [32:0] extended_result;
    signed_a = a;
    signed_b = b;
    carry = 0;
    overflow = 0;
    flag = 0;
    case (aluc)
        // ADD
        6'b100000: begin
            {carry, r} = a + b;
            overflow = (signed_a[31] == signed_b[31]) && (r[31] != signed_a[31]);
        end
        
        // ADDU
        6'b100001: begin
            {carry, r} = a + b;
            overflow = 0;
        end

        // SUB
        6'b100010: begin
            {carry, r} = a - b;
            overflow = (signed_a[31] != signed_b[31]) && (r[31] != signed_a[31]);
        end
        
        // SUBU
        6'b100011: begin
            {carry, r} = a - b;
            overflow = 0;
        end

        // AND
        6'b100100: r = a & b;

        // OR
        6'b100101: r = a | b;

        // XOR
        6'b100110: r = a ^ b;

        // NOR
        6'b100111: r = ~(a | b);

        // SLT
        6'b101010: begin
            r = (signed_a < signed_b) ? 32'b1 : 32'b0;
            flag = r[0];
        end

        // SLTU
        6'b101011: begin
            r = (a < b) ? 32'b1 : 32'b0;
            flag = r[0];
        end

        // SLL
        6'b000000: r = b << a[4:0];

        // SRL
        6'b000010: r = b >> a[4:0];

        // SRA
        6'b000011: r = $signed(b) >>> a[4:0];

        // SLLV
        6'b000100: r = b << a[4:0];

        // SRLV
        6'b000110: r = b >> a[4:0];

        // SRAV
        6'b000111: r = $signed(b) >>> a[4:0];

        // LUI
        6'b001111: r = {b[15:0], 16'b0};

        default: r = 32'bz; // High-impedance state for unhandled cases
    endcase

    zero = (r == 32'b0);
    negative = r[31];
end

endmodule