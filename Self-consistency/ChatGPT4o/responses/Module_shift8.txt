module my_dff8 (
    input clk,
    input [7:0] d,
    output reg [7:0] q
);
    always @(posedge clk) begin
        q <= d;
    end
endmodule

module top_module (
    input clk,
    input [7:0] d,
    input [1:0] sel,
    output reg [7:0] q
);
    wire [7:0] q0, q1, q2; // Intermediate stage outputs

    // Instantiate three 8-bit D flip-flop modules
    my_dff8 dff1(.clk(clk), .d(d), .q(q0));
    my_dff8 dff2(.clk(clk), .d(q0), .q(q1));
    my_dff8 dff3(.clk(clk), .d(q1), .q(q2));

    // Multiplexer to select the output based on sel
    always @(*) begin
        case (sel)
            2'b00: q = d;   // Direct input
            2'b01: q = q0;  // Output after first D flip-flop
            2'b10: q = q1;  // Output after second D flip-flop
            2'b11: q = q2;  // Output after third D flip-flop
            default: q = 8'b0; // Default case, should never happen
        endcase
    end
endmodule