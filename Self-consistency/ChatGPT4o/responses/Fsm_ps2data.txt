module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);
    // State encoding
    typedef enum reg [1:0] {
        WAIT_BYTE1 = 2'b00,
        WAIT_BYTE2 = 2'b01,
        WAIT_BYTE3 = 2'b10
    } state_t;

    state_t state, next_state;
    
    // Registers to hold incoming bytes
    reg [7:0] byte1, byte2, byte3;
    
    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= WAIT_BYTE1;
            done <= 0;
            byte1 <= 8'b0;
            byte2 <= 8'b0;
            byte3 <= 8'b0;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic and output logic
    always @(*) begin
        // Default assignments
        next_state = state;
        done = 0;
        
        case (state)
            WAIT_BYTE1: begin
                if (in[3] == 1'b1) begin // Check for starting byte of a new message
                    byte1 = in;
                    next_state = WAIT_BYTE2;
                end
            end
            WAIT_BYTE2: begin
                byte2 = in;
                next_state = WAIT_BYTE3;
            end
            WAIT_BYTE3: begin
                byte3 = in;
                out_bytes = {byte1, byte2, byte3};
                done = 1;
                next_state = WAIT_BYTE1;
            end
        endcase
    end
endmodule