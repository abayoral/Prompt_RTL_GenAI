module top_module(
    input clk,
    input reset,
    input ena,
    output reg pm,
    output reg [7:0] hh,
    output reg [7:0] mm,
    output reg [7:0] ss); 

    // Internal registers for BCD counting of hours, minutes, and seconds
    reg [3:0] hours_ones, hours_tens;
    reg [3:0] mins_ones, mins_tens;
    reg [3:0] secs_ones, secs_tens;

    // On reset, initialize to 12:00:00 AM
    always @(posedge clk) begin
        if (reset) begin
            hours_ones <= 4'd2;
            hours_tens <= 4'd1;
            mins_ones <= 4'd0;
            mins_tens <= 4'd0;
            secs_ones <= 4'd0;
            secs_tens <= 4'd0;
            pm <= 1'b0; // AM
        end 
        else if (ena) begin
            // Increment the seconds
            if (secs_ones == 4'd9) begin
                secs_ones <= 4'd0;
                if (secs_tens == 4'd5) begin
                    secs_tens <= 4'd0;

                    // Increment the minutes
                    if (mins_ones == 4'd9) begin
                        mins_ones <= 4'd0;
                        if (mins_tens == 4'd5) begin
                            mins_tens <= 4'd0;
                            
                            // Increment the hours
                            if (hours_ones == 4'd9 || (hours_tens == 4'd1 && hours_ones == 4'd2)) begin
                                hours_ones <= 4'd1;
                                if (hours_tens == 4'd1) begin
                                    hours_tens <= 4'd0;
                                    // Toggle AM/PM
                                    pm <= ~pm;
                                end
                            end else begin
                                hours_ones <= hours_ones + 1'b1;
                            end
                            
                            if (hours_ones == 4'd2 && hours_tens == 4'd0) begin
                                hours_ones <= 4'd1;
                                hours_tens <= 4'd1;
                            end

                        end else begin
                            mins_tens <= mins_tens + 1'b1;
                        end
                    end else begin
                        mins_ones <= mins_ones + 1'b1;
                    end
                end else begin
                    secs_tens <= secs_tens + 1'b1;
                end
            end else begin
                secs_ones <= secs_ones + 1'b1;
            end
        end
    end

    // Concatenate BCD digits into 8-bit outputs.
    assign hh = {hours_tens, hours_ones};
    assign mm = {mins_tens, mins_ones};
    assign ss = {secs_tens, secs_ones};

endmodule