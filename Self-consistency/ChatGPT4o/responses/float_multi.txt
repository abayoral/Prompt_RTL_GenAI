module float_multi(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

    // Internal registers
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [9:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;
    reg [2:0] counter;
    wire [7:0] a_exponent_raw, b_exponent_raw;
    wire [23:0] a_mantissa_raw, b_mantissa_raw;
  
    // Component extraction
    assign a_exponent_raw = a[30:23];
    assign b_exponent_raw = b[30:23];
    assign a_mantissa_raw = {1'b1, a[22:0]}; // Implicit leading one for normalized numbers
    assign b_mantissa_raw = {1'b1, b[22:0]};
    assign a_sign = a[31];
    assign b_sign = b[31];

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            z <= 32'b0;
            counter <= 3'b000;
        end else begin
            case (counter)
                3'b000: begin
                    // Initialization phase
                    counter <= 3'b001;
                end

                3'b001: begin
                    // Input Processing Phase
                    a_mantissa <= a_mantissa_raw;
                    b_mantissa <= b_mantissa_raw;
                    a_exponent <= {2'b00, a_exponent_raw};
                    b_exponent <= {2'b00, b_exponent_raw};
                    z_sign <= a_sign ^ b_sign;
                    counter <= 3'b010;
                end

                3'b010: begin
                    // Special Case Handling Phase
                    if ((a_exponent_raw == 8'hFF && a[22:0] != 0) || (b_exponent_raw == 8'hFF && b[22:0] != 0)) begin
                        // NaN detection
                        z <= {1'b0, 8'hFF, 23'h400000}; // Quiet NaN
                        counter <= 3'b000;
                    end else if (a_exponent_raw == 8'hFF || b_exponent_raw == 8'hFF) begin
                        // Infinity detection
                        z <= {z_sign, 8'hFF, 23'b0};
                        counter <= 3'b000;
                    end else if (a_exponent_raw == 0 || b_exponent_raw == 0) begin
                        // Zero detection
                        z <= {z_sign, 31'b0};
                        counter <= 3'b000;
                    end else begin
                        counter <= 3'b011;
                    end
                end

                3'b011: begin
                    // Multiplication Phase
                    product <= a_mantissa * b_mantissa;
                    z_exponent <= a_exponent + b_exponent - 10'd127; // Bias adjustment
                    guard_bit <= product[25];
                    round_bit <= product[24];
                    sticky <= |product[23:0];
                    counter <= 3'b100;
                end

                3'b100: begin
                    // Normalization and Rounding Phase
                    if (product[47]) begin
                        z_exponent <= z_exponent + 1;
                        product <= product >> 1;
                    end
                    z_mantissa <= product[46:24];
                    if (guard_bit && (round_bit | sticky | z_mantissa[0]))
                        z_mantissa <= z_mantissa + 1;
                    if (z_exponent >= 10'hFF) begin
                        // Handle overflow
                        z <= {z_sign, 8'hFF, 23'b0};
                    end else if (z_exponent <= 0) begin
                        // Handle underflow
                        z <= {z_sign, 31'b0};
                    end else begin
                        // Normal execution result
                        z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                    end
                    counter <= 3'b000;
                end

                default: counter <= 3'b000;
            endcase
        end
    end

endmodule