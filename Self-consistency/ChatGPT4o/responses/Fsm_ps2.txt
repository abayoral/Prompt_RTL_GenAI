module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output done);   // Output done signal

    // State encoding
    typedef enum reg [1:0] {
        WAIT_FOR_START = 2'b00,
        BYTE_1         = 2'b01,
        BYTE_2         = 2'b10,
        DONE           = 2'b11
    } state_t;
    
    state_t current_state, next_state;

    // State transition logic
    always @(*) begin
        case (current_state)
            WAIT_FOR_START: begin
                // Wait for a byte with bit[3]=1
                if (in[3] == 1'b1) begin
                    next_state = BYTE_1;
                end else begin
                    next_state = WAIT_FOR_START;
                end
            end
            BYTE_1: begin
                // We've received the first byte of the message
                next_state = BYTE_2;
            end
            BYTE_2: begin
                // We've received the second byte of the message
                next_state = DONE;
            end
            DONE: begin
                // Signal the done, then immediately transition to WAIT_FOR_START
                next_state = WAIT_FOR_START;
            end
            default: next_state = WAIT_FOR_START;
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= WAIT_FOR_START;
        end else begin
            current_state <= next_state;
        end
    end

    // Output logic
    assign done = (current_state == DONE);

endmodule