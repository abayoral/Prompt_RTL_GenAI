module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
); 

    // State encoding
    typedef enum reg [1:0] {
        IDLE      = 2'b00,
        BYTE1     = 2'b01,
        BYTE2     = 2'b10,
        BYTE3     = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State transition logic (combinational)
    always @* begin
        case (current_state)
            IDLE: begin
                if (in[3] == 1'b1) 
                    next_state = BYTE1;
                else 
                    next_state = IDLE;
            end
            BYTE1: begin
                next_state = BYTE2;
            end
            BYTE2: begin
                next_state = BYTE3;
            end
            BYTE3: begin
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            done <= 1'b0;
        end else begin
            current_state <= next_state;
            done <= (current_state == BYTE3);
        end
    end

    // Output logic
    // done is already generated in the sequential logic above

endmodule