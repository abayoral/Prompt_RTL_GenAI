module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

    reg [7:0] abs_dividend;
    reg [7:0] NEG_DIVISOR;
    reg [3:0] cnt;
    reg start_cnt;
    reg [15:0] SR; // Shift register

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            result <= 16'b0;
            abs_dividend <= 8'b0;
            NEG_DIVISOR <= 8'b0;
            cnt <= 4'b0;
            start_cnt <= 0;
            SR <= 16'b0;
        end else begin
            if (opn_valid && !res_valid) begin
                // Latched operation
                abs_dividend <= dividend;
                NEG_DIVISOR <= ~divisor + 1'b1; // Two's complement for signed
                SR <= {8'b0, abs_dividend}; // Load dividend into SR
                cnt <= 4'b1; // Start with first iteration
                start_cnt <= 1;
                res_valid <= 0; // Ensure result is invalid until processing is finished
            end

            if (start_cnt) begin
                if (cnt < 4'b1000) begin // Less than 8 iterations
                    // Perform the division steps
                    SR <= {SR[14:0], 1'b0}; // Shift left
                    if (SR[15:8] >= divisor) begin
                        SR[15:8] <= SR[15:8] + NEG_DIVISOR; // Subtract divisor
                        SR[0] <= 1'b1; // Quotient bit is set
                    end
                    cnt <= cnt + 1; // Increment the counter
                end else begin
                    // Finished division
                    start_cnt <= 0;
                    result <= {SR[15:8], SR[7:0]}; // Store result: {remainder, quotient}
                    res_valid <= 1; // Mark result as valid
                end
            end
        end
    end

endmodule