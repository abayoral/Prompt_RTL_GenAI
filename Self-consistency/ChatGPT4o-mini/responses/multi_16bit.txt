module multi_16bit (
    input clk,
    input rst_n,
    input start,
    input [15:0] ain,
    input [15:0] bin,
    output reg [31:0] yout,
    output reg done
);

    reg [15:0] areg;              // Multiplicand register
    reg [15:0] breg;              // Multiplier register
    reg [31:0] yout_r;            // Product register
    reg [4:0] i;                  // Shift count register
    reg done_r;                   // Done flag register

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            i <= 0;
            done_r <= 0;
            yout_r <= 0;
            areg <= 0;
            breg <= 0;
        end
        else if (start) begin
            if (i < 17) begin
                i <= i + 1;
            end
        end
        else begin
            i <= 0;  // Reset shift count if start is low
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            done_r <= 0;
        end
        else begin
            if (i == 16) begin
                done_r <= 1;  // Set done when shift count is 16
            end
            else if (i == 17) begin
                done_r <= 0;  // Reset done when shift count exceeds 16
            end
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            areg <= 0;
            breg <= 0;
            yout_r <= 0;
        end
        else if (start) begin
            if (i == 0) begin
                areg <= ain;  // Load multiplicand
                breg <= bin;  // Load multiplier
                yout_r <= 0;  // Initialize product register
            end
            else if (i > 0 && i <= 16) begin
                if (areg[i-1]) begin
                    yout_r <= yout_r + (breg << (i - 1));  // Accumulate product
                end
            end
        end
    end

    always @(posedge clk) begin
        yout <= yout_r;  // Assign product output
        done <= done_r;  // Assign completion flag output
    end

endmodule