module parity (
    input clk,
    input reset,
    input in,
    output reg odd
);

    always @(posedge clk)
        if (reset) odd <= 0;
        else if (in) odd <= ~odd;

endmodule

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    reg [3:0] state;
    reg [3:0] bit_count;
    wire odd_parity;
    reg parity_bit;
    reg [7:0] data_byte;
    wire reset_parity;

    // Parity module instance
    parity parity_inst (
        .clk(clk),
        .reset(reset_parity),
        .in(in),
        .odd(odd_parity)
    );

    // FSM states
    localparam IDLE = 4'b0000,
               START = 4'b0001,
               DATA = 4'b0010,
               PARITY = 4'b0011,
               STOP = 4'b0100;

    // State machine
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            done <= 0;
            out_byte <= 0;
            reset_parity <= 1;
        end else begin
            case (state)
                IDLE: begin
                    done <= 0;
                    if (in == 0) begin // Start bit detected
                        state <= START;
                        reset_parity <= 0; // Start counting parity
                    end
                end
                START: begin
                    if (in == 1) begin // Wait for start bit to be high
                        state <= DATA;
                        bit_count <= 0;
                    end
                end
                DATA: begin
                    data_byte[bit_count] <= in; // Capture data bits
                    if (bit_count < 7) begin
                        bit_count <= bit_count + 1;
                    end else begin
                        parity_bit <= in; // Capture parity bit
                        state <= PARITY;
                    end
                end
                PARITY: begin
                    if (bit_count == 8) begin
                        reset_parity <= 1; // Reset parity counter for next byte
                        if (parity_bit == odd_parity) begin
                            done <= 1; // Parity check passed
                        end
                        state <= STOP;
                    end
                end
                STOP: begin
                    if (in == 1) begin // Wait for stop bit
                        out_byte <= data_byte; // Output received byte
                        state <= IDLE; // Back to IDLE
                    end
                end
                default: state <= IDLE;
            endcase
        end
    end

endmodule