module add1 (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    assign sum = a ^ b ^ cin; // sum = a XOR b XOR cin
    assign cout = (a & b) | (cin & (a ^ b)); // cout = (a AND b) OR (cin AND (a XOR b))
endmodule

module add16 (
    input [15:0] a,
    input [15:0] b,
    input cin,
    output [15:0] sum,
    output cout
);
    wire [15:0] c; // carry wires

    add1 fa0(.a(a[0]), .b(b[0]), .cin(cin), .sum(sum[0]), .cout(c[0]));
    generate
        genvar i;
        for (i = 1; i < 16; i = i + 1) begin: full_adders
            add1 fa(.a(a[i]), .b(b[i]), .cin(c[i-1]), .sum(sum[i]), .cout(c[i]));
        end
    endgenerate
    
    assign cout = c[15]; // last carry out
endmodule

module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire cout_lower, cout_upper;
    wire [15:0] sum_lower, sum_upper;

    add16 adder1 (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(sum_lower),
        .cout(cout_lower)
    );

    add16 adder2 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b0),
        .sum(sum_upper),
        .cout(cout_upper)
    );

    assign sum = {sum_upper, sum_lower}; // concatenate upper and lower sums
endmodule