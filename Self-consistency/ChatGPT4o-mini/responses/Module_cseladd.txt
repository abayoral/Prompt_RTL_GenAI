module add16 ( input[15:0] a, input[15:0] b, input cin, output[15:0] sum, output cout );

endmodule

module mux2to1 (
    input [15:0] in0,
    input [15:0] in1,
    input sel,
    output [15:0] out
);
    assign out = sel ? in1 : in0;
endmodule

module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire [15:0] sum0, sum1, sum2;
    wire cout0, cout1;
    wire sel;

    assign sel = 0; // This can be modified for actual implementation if needed

    // First add16 instance (lower 16 bits)
    add16 adder0 (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(0),
        .sum(sum0),
        .cout(cout0)
    );

    // Second add16 instance (upper 16 bits with carry from lower)
    add16 adder1 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(cout0),
        .sum(sum1),
        .cout(cout1)
    );

    // Third add16 instance (upper 16 bits without carry)
    add16 adder2 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(0),
        .sum(sum2),
        .cout()
    );

    // Multiplexer to select between the two results based on carry
    mux2to1 mux (
        .in0(sum1),
        .in1(sum2),
        .sel(cout0),
        .out(sum[31:16])
    );

    // Final sum concatenation
    assign sum[15:0] = sum0;
    assign sum[31:16] = mux.out;

endmodule