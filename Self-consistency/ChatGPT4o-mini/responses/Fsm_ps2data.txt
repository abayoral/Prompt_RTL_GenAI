module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    typedef enum reg [1:0] {
        IDLE = 2'b00,
        BYTE1 = 2'b01,
        BYTE2 = 2'b10,
        BYTE3 = 2'b11
    } state_t;

    state_t current_state, next_state;
    reg [7:0] byte_buffer [2:0]; // Buffer to hold the received bytes
    integer byte_count;

    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            done <= 0;
            byte_count <= 0;
        end else begin
            current_state <= next_state;
            if (next_state == BYTE3) begin
                done <= 1;
                out_bytes <= {byte_buffer[0], byte_buffer[1], byte_buffer[2]};
            end else begin
                done <= 0;
            end
        end
    end

    always @(*) begin
        case (current_state)
            IDLE: begin
                if (in[3] == 1) begin
                    byte_count = 0;
                    byte_buffer[byte_count] = in;
                    next_state = BYTE1;
                end else begin
                    next_state = IDLE;
                end
            end
            
            BYTE1: begin
                byte_count = 1;
                byte_buffer[byte_count] = in;
                next_state = BYTE2;
            end
            
            BYTE2: begin
                byte_count = 2;
                byte_buffer[byte_count] = in;
                next_state = BYTE3;
            end

            BYTE3: begin
                byte_buffer[byte_count] = in;
                next_state = IDLE; // Go back to IDLE after capturing 3 bytes
            end
            
            default: next_state = IDLE;
        endcase
    end
    
endmodule