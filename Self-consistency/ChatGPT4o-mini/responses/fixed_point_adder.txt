module fixed_point_adder #(parameter Q = 16, parameter N = 32) (
    input [N-1:0] a,
    input [N-1:0] b,
    output reg [N-1:0] c
);
    reg [N-1:0] res;
    
    always @(*) begin
        if (a[N-1] == b[N-1]) begin
            // Both numbers have the same sign
            res = a + b;

            // Check for overflow
            if (res[N-1] != a[N-1]) begin
                // Overflow occurred
                c = (a[N-1]) ? {1'b1, {N-1{1'b0}}} : {1'b0, {N-1{1'b1}}}; // Saturate to max/min
            end else begin
                c = res; // No overflow
            end
        end else begin
            // Different signs, perform subtraction
            if (a[N-1] == 1'b0 && b[N-1] == 1'b1) begin
                // a is positive, b is negative
                res = a + (~b + 1'b1);
            end else begin
                // a is negative, b is positive
                res = b + (~a + 1'b1);
            end

            // Check for underflow or adjust sign
            if (res[N-1] == 1'b1) begin
                // Result is negative
                c = res; // Assignment directly as we deal with negative resolution
            end else begin
                c = res; // Assignment directly as computed
            end
        end
    end
endmodule