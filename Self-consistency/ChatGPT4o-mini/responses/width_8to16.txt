module width_8to16 (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    reg [7:0] data_high;
    reg [7:0] data_low;
    reg state;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'b0;
            valid_out <= 1'b0;
            data_high <= 8'b0;
            data_low <= 8'b0;
            state <= 1'b0;
        end else begin
            if (valid_in) begin
                if (state == 1'b0) begin
                    data_high <= data_in;  // Store first 8-bit data
                    state <= 1'b1;          // Move to next state
                end else begin
                    data_low <= data_in;   // Store second 8-bit data
                    data_out <= {data_high, data_low}; // Concatenate to form 16-bit data
                    valid_out <= 1'b1;      // Indicate valid output
                    state <= 1'b0;          // Reset state for next input pair
                end
            end else if (state == 1'b1) begin
                // If valid_in is not true, keep the high data without changing
                // But the valid_out will not be set until the second data is received.
            end
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_out <= 1'b0; // Reset valid_out during reset
        end else if (state == 1'b0) begin
            valid_out <= 1'b0; // Reset valid_out when we are ready for next pair
        end else if (state == 1'b1 && valid_in == 0) begin
            valid_out <= 1'b0; // Clear it if we wait for second data
        end
    end

endmodule