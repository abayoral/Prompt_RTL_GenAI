module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    typedef enum reg [1:0] {
        IDLE = 2'b00,
        START_BIT = 2'b01,
        DATA_BITS = 2'b10,
        STOP_BIT = 2'b11
    } state_t;

    state_t state, next_state;
    reg [3:0] bit_count;
    reg [7:0] data_shift;

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            out_byte <= 0;
            done <= 0;
            data_shift <= 0;
        end else begin
            state <= next_state;
            if (state == DATA_BITS) begin
                bit_count <= bit_count + 1;
                data_shift <= {in, data_shift[7:1]};
            end
            if (state == STOP_BIT) begin
                out_byte <= data_shift;
                done <= 1;
            end else begin
                done <= 0;
            end
        end
    end

    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) // looking for start bit
                    next_state = START_BIT;
                else
                    next_state = IDLE;
            end
            START_BIT: begin
                next_state = DATA_BITS;
                bit_count = 0;
            end
            DATA_BITS: begin
                if (bit_count < 7)
                    next_state = DATA_BITS;
                else
                    next_state = STOP_BIT;
            end
            STOP_BIT: begin
                if (in == 1) // valid stop bit
                    next_state = IDLE;
                else
                    next_state = STOP_BIT; // wait for a valid stop bit
            end
            default: next_state = IDLE;
        endcase
    end

endmodule