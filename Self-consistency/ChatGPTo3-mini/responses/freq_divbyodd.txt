module freq_divbyodd #(parameter NUM_DIV = 5) (
    input  wire clk,
    input  wire rst_n,
    output wire clk_div
);

  // Calculate required counter width
  localparam CNT_WIDTH = $clog2(NUM_DIV);

  // Two counters for positive and negative edge tracking
  reg [CNT_WIDTH-1:0] cnt1, cnt2;
  
  // Two auxiliary clock signals for posedge and negedge division
  reg clk_div1, clk_div2;

  // Positive-edge triggered counter and divider signal logic.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      cnt1      <= 0;
      clk_div1  <= 0;
    end
    else begin
      // Increment counter or reset
      if (cnt1 == NUM_DIV - 1)
        cnt1 <= 0;
      else
        cnt1 <= cnt1 + 1;
      
      // Toggle the division clock when counter equals half of NUM_DIV.
      // For an odd number, integer division gives floor(NUM_DIV/2).
      if (cnt1 == (NUM_DIV >> 1))
        clk_div1 <= ~clk_div1;
    end
  end

  // Negative-edge triggered counter and divider signal logic.
  always @(negedge clk or negedge rst_n) begin
    if (!rst_n) begin
      cnt2      <= 0;
      clk_div2  <= 0;
    end
    else begin
      // Increment counter or reset
      if (cnt2 == NUM_DIV - 1)
        cnt2 <= 0;
      else
        cnt2 <= cnt2 + 1;
      
      // Toggle the division clock when counter equals half of NUM_DIV.
      if (cnt2 == (NUM_DIV >> 1))
        clk_div2 <= ~clk_div2;
    end
  end

  // Output frequency-divided clock is the OR of both auxiliary clocks.
  assign clk_div = clk_div1 | clk_div2;

endmodule