module my_dff8 (
    input clk,
    input [7:0] d,
    output reg [7:0] q
);
    always @(posedge clk)
        q <= d;
endmodule

module top_module (
    input clk,
    input [7:0] d,
    input [1:0] sel,
    output reg [7:0] q
);
    wire [7:0] stage1, stage2, stage3;
    
    // Instantiate three 8-bit D flip-flops to form a shift register of length 3.
    my_dff8 ff0 (
        .clk(clk),
        .d(d),
        .q(stage1)
    );
    
    my_dff8 ff1 (
        .clk(clk),
        .d(stage1),
        .q(stage2)
    );
    
    my_dff8 ff2 (
        .clk(clk),
        .d(stage2),
        .q(stage3)
    );
    
    // 4-to-1 multiplexer to choose the output based on sel.
    always @(*) begin
        case(sel)
            2'b00: q = d;       // Zero delay: output the input directly.
            2'b01: q = stage1;  // One-clock-cycle delay
            2'b10: q = stage2;  // Two-clock-cycle delay
            2'b11: q = stage3;  // Three-clock-cycle delay
            default: q = 8'b0;
        endcase
    end
endmodule