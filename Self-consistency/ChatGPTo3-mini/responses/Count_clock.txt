module top_module(
    input clk,
    input reset,
    input ena,
    output pm,
    output [7:0] hh,
    output [7:0] mm,
    output [7:0] ss);

    // Internal registers for seconds, minutes, hours and AM/PM flag.
    // sec and min range from 0 to 59, hr is stored as an integer from 1 to 12.
    reg [5:0] sec;
    reg [5:0] min;
    reg [3:0] hr;
    reg pm_reg;
    
    // Synchronous counting with reset priority.
    // When ena is asserted, the clock is incremented once. 
    // Seconds count from 0-59. On rollover (59->0), minutes and then hours update.
    // Hours follow 12-hour format:
    //   - When hr==11 and minutes roll over, the next hour is 12 and pm toggles.
    //   - When hr==12 and minutes roll over, the next hour is 1 (pm remains unchanged).
    always @(posedge clk) begin
        if (reset) begin
            sec    <= 6'd0;
            min    <= 6'd0;
            hr     <= 4'd12; // 12:00:00
            pm_reg <= 1'b0;  // AM
        end else if (ena) begin
            if (sec == 6'd59) begin
                sec <= 6'd0;
                if (min == 6'd59) begin
                    min <= 6'd0;
                    // Hour update with special treatment for 11 and 12.
                    if (hr == 4'd11) begin
                        hr     <= 4'd12;
                        pm_reg <= ~pm_reg; // toggle am/pm
                    end else if (hr == 4'd12) begin
                        hr <= 4'd1;
                    end else begin
                        hr <= hr + 4'd1;
                    end
                end else begin
                    min <= min + 6'd1;
                end
            end else begin
                sec <= sec + 6'd1;
            end
        end
    end

    // Convert hr (an integer 1-12) to 2-digit BCD.
    // For numbers less than 10, the tens digit is 0; for 10 to 12, the tens digit is 1.
    assign hh = (hr < 4'd10) ? {4'd0, hr} : {4'd1, hr - 4'd10};

    // Convert minute and second counters (0-59) to 2-digit BCD.
    // We use constant division by 10. The tens digit is the quotient and the ones digit is the remainder.
    assign mm = { (min / 10), (min - ((min / 10) * 10)) };
    assign ss = { (sec / 10), (sec - ((sec / 10) * 10)) };

    // Output AM/PM flag.
    assign pm = pm_reg;

endmodule