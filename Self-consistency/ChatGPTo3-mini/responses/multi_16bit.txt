module multi_16bit(
    input         clk,
    input         rst_n,
    input         start,
    input  [15:0] ain,
    input  [15:0] bin,
    output [31:0] yout,
    output        done
);

  // Internal registers
  reg [4:0]   i;         // shift count (needs 5 bits to count up to 17)
  reg         done_r;    // done flag register
  reg [15:0]  areg;      // register to store multiplicand
  reg [15:0]  breg;      // register to store multiplier
  reg [31:0]  yout_r;    // product accumulator register

  // Shift count register update
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
      i <= 0;
    else if (start) begin
      if (i < 17)
        i <= i + 1;
    end else
      i <= 0;
  end

  // Multiplier completion flag generation
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n)
      done_r <= 1'b0;
    else if (i == 5'd16)
      done_r <= 1'b1;
    else if (i == 5'd17)
      done_r <= 1'b0;
    // Otherwise, keep previous done_r value.
  end

  // Shift and Accumulate Operation
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      areg   <= 16'd0;
      breg   <= 16'd0;
      yout_r <= 32'd0;
    end
    else if (start) begin
      // For the very first clock when i == 0, load areg and breg; reset product accumulator.
      if (i == 0) begin
        areg   <= ain;
        breg   <= bin;
        yout_r <= 32'd0;
      end
      // For i in the range of 1 to 16, accumulate if the (i-1)th bit of areg is high.
      else if (i >= 1 && i <= 16) begin
        if (areg[i-1])
          yout_r <= yout_r + ( {16'd0, breg} << (i-1) );
      end
      // No operation defined for i == 17; wait for start to go low to reset.
    end
    else begin
      // When start is inactive, clear registers
      areg   <= 16'd0;
      breg   <= 16'd0;
      yout_r <= 32'd0;
    end
  end

  // Output assignments
  assign yout = yout_r;
  assign done = done_r;

endmodule