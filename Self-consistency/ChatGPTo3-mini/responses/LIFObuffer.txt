module LIFObuffer(
    input wire [3:0] dataIn,  // 4-bit input to be pushed onto the stack
    input wire RW,          // Read/Write control: 1 for pop (read), 0 for push (write)
    input wire EN,          // Enable signal for operations
    input wire Rst,         // Active-high synchronous reset
    input wire Clk,         // Clock signal for synchronous operations
    output wire EMPTY,      // Flag indicating the buffer is empty
    output wire FULL,       // Flag indicating the buffer is full
    output reg [3:0] dataOut  // 4-bit output for popped data
);

    // The stack has 4 entries, with indices 0 to 3.
    // We use a stack pointer (sp) that ranges from 0 (full) to 4 (empty).
    // When sp == 4, the stack is empty. When sp == 0, the stack is full.
    reg [2:0] sp; // 3-bit pointer to cover values from 0 to 4.
    reg [3:0] stack_mem [0:3];  // Memory array for the stack (4 entries, 4 bits each).

    // Continuous assignments for flag outputs based on the stack pointer.
    assign FULL  = (sp == 3'd0);
    assign EMPTY = (sp == 3'd4);

    integer i;
    
    // Synchronous process: on each rising edge of Clk, perform reset, push or pop operations.
    always @(posedge Clk) begin
        if (Rst) begin
            // Synchronous reset: clear the stack memory and set the stack pointer to indicate empty.
            sp <= 3'd4;  // When sp is 4, the stack is empty.
            dataOut <= 4'b0;
            for (i = 0; i < 4; i = i + 1) begin
                stack_mem[i] <= 4'b0;
            end
        end else if (EN) begin
            // When enabled, check the RW signal to decide whether to push or pop.
            if (RW == 1'b0) begin
                // PUSH operation: Only push if the stack isn't full.
                if (!FULL) begin
                    sp <= sp - 1;         // Decrement pointer first.
                    stack_mem[sp - 1] <= dataIn;  // Store the input data at the new top.
                end
            end else if (RW == 1'b1) begin
                // POP operation: Only pop if the stack isn't empty.
                if (!EMPTY) begin
                    dataOut <= stack_mem[sp];  // Retrieve the data from the current top.
                    stack_mem[sp] <= 4'b0;       // Clear the stack memory at that position.
                    sp <= sp + 1;         // Increment pointer indicating removal.
                end
            end
        end
    end

endmodule