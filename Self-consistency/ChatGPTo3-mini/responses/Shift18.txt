module top_module(
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [63:0] q);

    // Always block for synchronous load and shift operations.
    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else if (ena) begin
            case (amount)
                2'b00: q <= q << 1;            // shift left by 1 bit
                2'b01: q <= q << 8;            // shift left by 8 bits
                2'b10: q <= $signed(q) >>> 1;   // arithmetic right shift by 1
                2'b11: q <= $signed(q) >>> 8;   // arithmetic right shift by 8
                default: q <= q;               // retain same value if amount is unspecified
            endcase
        end
    end

endmodule