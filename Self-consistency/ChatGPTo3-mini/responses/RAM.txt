module dual_port_ram #( 
  parameter WIDTH = 6, 
  parameter DEPTH = 8 
)(
  input               clk,
  input               rst_n,       // active-low reset
  input               write_en,    // write enable
  input       [2:0]   write_addr,  // address for write (log2(DEPTH)=3)
  input       [WIDTH-1:0] write_data,  // data to write
  input               read_en,     // read enable
  input       [2:0]   read_addr,   // address for read (log2(DEPTH)=3)
  output reg  [WIDTH-1:0] read_data  // data output from read operation
);

  // Internal memory array declaration
  reg [WIDTH-1:0] mem [0:DEPTH-1];
  integer i;

  // Write operation with synchronous functionality and asynchronous reset
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      // Initialize all memory locations to zero on reset
      for(i = 0; i < DEPTH; i = i + 1) begin
        mem[i] <= {WIDTH{1'b0}};
      end
    end
    else begin
      if (write_en) begin
        mem[write_addr] <= write_data;
      end
    end
  end

  // Read operation: on each clock cycle, if read enabled, update output data from specified address
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      read_data <= {WIDTH{1'b0}};
    end
    else begin
      if (read_en) begin
        read_data <= mem[read_addr];
      end
    end
  end

endmodule