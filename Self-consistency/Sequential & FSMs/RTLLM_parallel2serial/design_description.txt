As a skilled Verilog designer, you are tasked with creating a module named `parallel2serial` that performs parallel-to-serial data conversion. The objective is to convert every group of four input bits into a single bit serial output sequence. This process should start with the most significant bit (MSB) and conclude with the least significant bit (LSB). To achieve this, the following conditions and functionalities are required:

1. **Module Configuration:**

   - **Input Ports:**
     - `clk`: This is the clock input signal which will drive synchronous operations within the module.
     - `rst_n`: An active-low reset signal used for initializing and resetting the system. When it's 0, the system undergoes reset, and when it's 1, the system is out of reset.
     - `d`: A 4-bit input signal representing the parallel data that needs to be converted into a serial format.

   - **Output Ports:**
     - `valid_out`: An output signal indicating the availability of valid serial data. It is asserted high (1) when the serial data is ready to be read.
     - `dout`: A single-bit output that corresponds to the current bit in the serial conversion process.

2. **Operational Details:**

   - **Conversion Mechanism:**
     - Begin with assigning the most significant bit (MSB) of the 4-bit input `d` to the serial output `dout`.
     - Over the next three clock cycles, sequentially output the remaining bits, working from the second most significant bit down to the least significant bit (LSB).
     - Utilize a counter, denoted as `cnt`, to track the position within the 4-bit sequence. The counter aids in ensuring that the correct bit is output based on the current cycle in the sequence.

   - **Valid Signal Logic:**
     - The `valid_out` signal should be set to 1 when a valid serial bit is present on `dout`. Specifically, this occurs initially when `dout` reflects the MSB of `d`, and continues until the entire sequence completes after four cycles.
     - If the counter reaches a value of 3, this signifies that all bits have been processed. Consequently, the counter is reset to 0, and `valid_out` remains driven as high throughout this sequence.

3. **Counter and Reset Behavior:**
   - During operation, if `rst_n` is high, the counter (`cnt`) is responsible for cycling through values from 0 to 3, each indicating which bit of `d` is currently being output.
   - Upon the reset condition (`rst_n` asserted low), all internal state elements including the counter should be initialized to known states, effectively preparing the system for fresh input data.

By considering these specifications, focus on conceptualizing the Verilog code structure that adheres to the outlined design requirements.