```
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
);

    // State encoding
    typedef enum reg [1:0] {
        IDLE = 2'b00,
        BYTE1 = 2'b01,
        BYTE2 = 2'b10,
        BYTE3 = 2'b11
    } state_t;

    state_t current_state, next_state;
    reg [1:0] byte_count;

    // State transition logic (combinational)
    always @(*) begin
        case (current_state)
            IDLE: begin
                if (in[3]) begin
                    next_state = BYTE1;
                    byte_count = 2'b01;
                end else begin
                    next_state = IDLE;
                    byte_count = 2'b00;
                end
                done = 1'b0;
            end
            
            BYTE1: begin
                next_state = BYTE2;
                byte_count = 2'b10;
                done = 1'b0;
            end
            
            BYTE2: begin
                next_state = BYTE3;
                byte_count = 2'b11;
                done = 1'b0;
            end
            
            BYTE3: begin
                next_state = IDLE;
                byte_count = 2'b00;
                done = 1'b1; // Signal done after receiving the third byte
            end
            
            default: begin
                next_state = IDLE;
                byte_count = 2'b00;
                done = 1'b0;
            end
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            done <= 1'b0;
        end else begin
            current_state <= next_state;
        end
    end

endmodule
```