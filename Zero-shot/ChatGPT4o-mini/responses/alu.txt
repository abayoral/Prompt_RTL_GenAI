```verilog
module alu (
    input  wire [31:0] a,       // First operand
    input  wire [31:0] b,       // Second operand
    input  wire [5:0]  aluc,    // ALU control signal
    output reg  [31:0] r,       // ALU result
    output reg  zero,           // Zero flag
    output reg  carry,          // Carry out flag
    output reg  negative,       // Negative flag
    output reg  overflow,       // Overflow flag
    output reg  flag            // Set on Less Than flag
);

always @(*) begin
    // Default outputs
    r = 32'bz;
    zero = 0;
    carry = 0;
    negative = 0;
    overflow = 0;
    flag = 0;

    case (aluc)
        6'b100000: begin // ADD
            {carry, r} = a + b;
            overflow = (a[31] == b[31]) && (r[31] != a[31]);
        end
        6'b100001: begin // ADDU
            r = a + b;
        end
        6'b100010: begin // SUB
            {carry, r} = a - b;
            overflow = (a[31] != b[31]) && (r[31] != a[31]);
        end
        6'b100011: begin // SUBU
            r = a - b;
        end
        6'b100100: begin // AND
            r = a & b;
        end
        6'b100101: begin // OR
            r = a | b;
        end
        6'b100110: begin // XOR
            r = a ^ b;
        end
        6'b100111: begin // NOR
            r = ~(a | b);
        end
        6'b101010: begin // SLT
            flag = (a < b) ? 1 : 0;
            r = 0; // Define output for SLT
        end
        6'b101011: begin // SLTU
            flag = ({1'b0, a} < {1'b0, b}) ? 1 : 0;
            r = 0; // Define output for SLTU
        end
        6'b000000: begin // SLL
            r = b << a[4:0];
        end
        6'b000010: begin // SRL
            r = b >> a[4:0];
        end
        6'b000011: begin // SRA
            r = $signed(b) >>> a[4:0];
        end
        6'b000100: begin // SLLV
            r = b << a[10:6];
        end
        6'b000110: begin // SRLV
            r = b >> a[10:6];
        end
        6'b000111: begin // SRAV
            r = $signed(b) >>> a[10:6];
        end
        6'b001111: begin // LUI
            r = {a[15:0], 16'b0};
        end
        default: begin
            r = 32'bz; // High-impedance for undefined operations
        end
    endcase

    // Set the zero flag
    zero = (r == 32'b0) ? 1 : 0;

    // Set the negative flag based on the result
    negative = r[31];
end

endmodule
```