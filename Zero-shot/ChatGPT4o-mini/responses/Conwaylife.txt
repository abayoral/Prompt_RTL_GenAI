```
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
);
    reg [255:0] next_q;

    always @(posedge clk) begin
        if (load) 
            q <= data;
        else 
            q <= next_q;
    end

    integer i, j, neighbors;

    always @* begin
        next_q = 256'b0; // Default next state to all dead cells
        for (i = 0; i < 16; i = i + 1) begin
            for (j = 0; j < 16; j = j + 1) begin
                neighbors = 
                    q[((i - 1 + 16) % 16) * 16 + ((j - 1 + 16) % 16)] + // Top-left
                    q[((i - 1 + 16) % 16) * 16 + j] + // Top
                    q[((i - 1 + 16) % 16) * 16 + ((j + 1) % 16)] + // Top-right
                    q[(i * 16 + ((j - 1 + 16) % 16))] + // Left
                    q[(i * 16 + ((j + 1) % 16))] + // Right
                    q[((i + 1) % 16) * 16 + ((j - 1 + 16) % 16)] + // Bottom-left
                    q[((i + 1) % 16) * 16 + j] + // Bottom
                    q[((i + 1) % 16) * 16 + ((j + 1) % 16)]; // Bottom-right

                case (neighbors)
                    2: next_q[i * 16 + j] = q[i * 16 + j];  // Stay the same
                    3: next_q[i * 16 + j] = 1'b1;            // Become alive
                    default: next_q[i * 16 + j] = 1'b0;      // Become dead
                endcase
            end
        end
    end
endmodule
```