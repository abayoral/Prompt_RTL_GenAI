```
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
); 

    reg [3:0] state, next_state;
    reg [2:0] bit_count;
    wire odd_parity;
    reg parity_reset;

    // State encoding
    localparam IDLE = 4'b0000,
               START = 4'b0001,
               DATA = 4'b0010,
               PARITY = 4'b0011,
               STOP = 4'b0100,
               DONE = 4'b0101;

    // Instantiate the parity module
    parity parity_unit (
        .clk(clk),
        .reset(parity_reset),
        .in(in),
        .odd(odd_parity)
    );

    // FSM Logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            out_byte <= 0;
            done <= 0;
            parity_reset <= 1;
        end else begin
            state <= next_state;
            if (state == DATA) begin
                out_byte <= {in, out_byte[7:1]}; // Shift in data bit
                bit_count <= bit_count + 1;
            end
            if (state == PARITY) begin
                parity_reset <= 0; // Deactivate parity reset to count the parity bit
            end
            if (state == DONE) begin
                done <= 1;
            end else begin
                done <= 0; // Clear done in other states
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 0) begin // Start bit detected
                    next_state = START;
                end else begin
                    next_state = IDLE;
                end
            end
            START: begin
                next_state = DATA; // Move to data state after start bit
                bit_count = 0;
                parity_reset = 1; // Reset parity counting
            end
            DATA: begin
                if (bit_count == 7) begin
                    next_state = PARITY; // After receiving 8 bits, go to parity check
                end else begin
                    next_state = DATA; // Stay in data state
                end
            end
            PARITY: begin
                next_state = STOP; // Move to stop state after parity bit
            end
            STOP: begin
                if (in == 1) begin // Stop bit detected
                    if (odd_parity) begin // Check for odd parity
                        next_state = DONE; // Correct byte received
                    end else begin
                        next_state = IDLE; // Parity error, go back to idle
                    end
                end else begin
                    next_state = STOP; // Wait for stop bit
                end
            end
            DONE: begin
                next_state = IDLE; // After done, return to idle
            end
            default: next_state = IDLE; // Default case to idle
        endcase
    end

endmodule
```