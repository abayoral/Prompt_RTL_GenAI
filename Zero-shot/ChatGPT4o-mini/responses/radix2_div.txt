```
module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

    reg [7:0] abs_dividend;
    reg [7:0] NEG_DIVISOR;
    reg [7:0] SR; // Shift Register for dividend
    reg [3:0] cnt; // Counter for division iterations
    reg start_cnt; // Signal to start counting

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            result <= 16'b0;
            SR <= 8'b0;
            cnt <= 4'b0;
            start_cnt <= 0;
        end else if (opn_valid && !res_valid) begin
            abs_dividend <= (sign && dividend[7]) ? ~dividend + 1 : dividend; // Absolute value of dividend
            NEG_DIVISOR <= (sign && divisor[7]) ? ~divisor + 1 : divisor; // Negative value of divisor
            SR <= abs_dividend << 1; // Initialize SR
            cnt <= 1; // Initialize counter
            start_cnt <= 1; // Start counting
            res_valid <= 0; // Reset result valid flag
        end else if (start_cnt) begin
            if (cnt < 8) begin
                if (SR[7:0] >= NEG_DIVISOR) begin
                    SR <= SR - NEG_DIVISOR; // Subtracting NEG_DIVISOR if SR is greater
                    result[7:0] <= result[7:0] + 1; // Increment quotient
                end
                SR <= SR << 1; // Shift left
                cnt <= cnt + 1; // Increment counter
            end else begin
                start_cnt <= 0; // Stop counting
                res_valid <= 1; // Result is now valid
                result[15:8] <= SR; // Remainder
                result[7:0] <= result[7:0]; // Finalized quotient
            end
        end
    end
    
endmodule
```