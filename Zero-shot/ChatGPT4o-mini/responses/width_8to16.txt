```
module width_8to16 (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    reg [7:0] data_buffer;
    reg [1:0] state;

    // State Encoding
    localparam IDLE    = 2'b00,
               FIRST   = 2'b01,
               SECOND  = 2'b10;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'b0;
            valid_out <= 1'b0;
            data_buffer <= 8'b0;
            state <= IDLE;
        end else begin
            case (state)
                IDLE: begin
                    if (valid_in) begin
                        data_buffer <= data_in; // Store first valid input
                        state <= FIRST;
                    end
                    valid_out <= 1'b0;
                end
                
                FIRST: begin
                    if (valid_in) begin
                        data_out <= {data_buffer, data_in}; // Concatenate to form 16-bit output
                        valid_out <= 1'b1; // Set valid output
                        state <= SECOND; // Move to the second stage
                    end
                end
                
                SECOND: begin
                    valid_out <= 1'b0; // Reset valid signal for the next cycle
                    if (!valid_in) begin
                        state <= IDLE; // Return to idle state
                    end
                end

                default: state <= IDLE; // Safety default
            endcase
        end
    end
endmodule
```