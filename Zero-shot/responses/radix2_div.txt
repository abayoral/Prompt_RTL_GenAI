```verilog
module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

    reg [15:0] shift_reg;
    reg [7:0] abs_dividend;
    reg [7:0] abs_divisor;
    reg [7:0] neg_divisor;
    reg [3:0] count;
    reg start_cnt;
    
    // Determine absolute values
    wire [7:0] dividend_abs = sign ? (dividend[7] ? (~dividend + 1) : dividend) : dividend;
    wire [7:0] divisor_abs  = sign ? (divisor[7] ? (~divisor + 1) : divisor) : divisor;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            result <= 0;
            shift_reg <= 0;
            count <= 0;
            start_cnt <= 0;
        end
        else begin
            if (opn_valid && !res_valid) begin
                // Load up the initial values if operation valid and result not ready
                abs_dividend <= dividend_abs;
                abs_divisor <= divisor_abs;
                neg_divisor <= -divisor_abs;
                shift_reg <= {8'b0, dividend_abs};
                count <= 1;
                start_cnt <= 1;
            end
            
            else if (start_cnt) begin
                if (count <= 8) begin
                    // Perform the division
                    shift_reg = shift_reg << 1;
                    if (shift_reg[15:8] >= abs_divisor) begin
                        shift_reg[15:8] = shift_reg[15:8] + neg_divisor;
                        shift_reg[0] = 1'b1;
                    end
                    else begin
                        shift_reg[0] = 1'b0;
                    end
                    count <= count + 1;
                end
                else begin
                    // Finalize division
                    start_cnt <= 0;
                    res_valid <= 1;
                    
                    // Consider sign of the result
                    if (sign && (dividend[7] ^ divisor[7])) begin
                        result[7:0] <= -shift_reg[7:0];
                    end
                    else begin
                        result[7:0] <= shift_reg[7:0];
                    end

                    // Correct remainder sign if needed
                    result[15:8] <= sign && dividend[7] ? -shift_reg[15:8] : shift_reg[15:8];
                end
            end

            // Reset res_valid when result is consumed
            if (res_valid && opn_valid)
                res_valid <= 0;
        end
    end
endmodule
```