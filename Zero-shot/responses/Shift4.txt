```verilog
module top_module(
    input clk,
    input areset,  // async active-high reset to zero
    input load,
    input ena,
    input [3:0] data,
    output reg [3:0] q);

    always @(posedge clk or posedge areset) begin
        if (areset) begin
            q <= 4'b0000;  // Asynchronous reset: Clear the register to zero
        end else begin
            if (load) begin
                q <= data;  // Synchronous load: Load the data into the register
            end else if (ena) begin
                q <= {1'b0, q[3:1]};  // Shift right: q[3] gets zero, q[0] is shifted out
            end
        end
    end

endmodule
```