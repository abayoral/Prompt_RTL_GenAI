```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    typedef enum reg [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        RECEIVE = 3'b010,
        PARITY_CHECK = 3'b011,
        STOP = 3'b100,
        DONE = 3'b101
    } state_t;
    
    state_t state, next_state;
    reg [3:0] bit_count; // To count number of bits received
    reg [8:0] shift_reg; // To hold the 8 data bits and 1 parity bit
    
    wire parity_odd;
    reg parity_reset;
    
    parity parity_inst (
        .clk(clk),
        .reset(parity_reset),
        .in(in),
        .odd(parity_odd)
    );

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            out_byte <= 8'b0;
            shift_reg <= 9'b0;
            done <= 1'b0;
            parity_reset <= 1'b1; // Reset the parity checker
        end else begin
            state <= next_state;
            if (state == RECEIVE) begin
                bit_count <= bit_count + 1;
                shift_reg <= {in, shift_reg[8:1]}; // Shift in the received bit
            end else if (state == DONE) begin
                out_byte <= shift_reg[7:0];
                done <= 1'b1;
            end else begin
                done <= 1'b0;
            end
            
            if (state == IDLE || state == DONE || state == PARITY_CHECK) begin
                parity_reset <= 1'b1; // Reset the parity checker
            end else begin
                parity_reset <= 1'b0; // Start checking parity once bits are being received
            end
        end
    end

    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (in == 0) // Start bit detected
                    next_state = START;
            end
            START: begin
                next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_count == 9) // 8 data bits + 1 parity bit received
                    next_state = PARITY_CHECK;
            end
            PARITY_CHECK: begin
                if (parity_odd == 1'b1) // Checks if odd parity is maintained
                    next_state = STOP;
                else
                    next_state = IDLE; // If parity check fails, go back to IDLE
            end
            STOP: begin
                if (in == 1) // Stop bit expected
                    next_state = DONE;
            end
            DONE: begin
                next_state = IDLE; // Reset after successful reception
            end
            default: begin
                next_state = IDLE;
            end
        endcase
    end

endmodule
```