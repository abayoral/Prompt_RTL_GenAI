```verilog
module pe(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] c
);

    // Temporary variable to hold product of a and b
    wire [63:0] product; // 64-bit to handle overflow during multiplication
    assign product = a * b;

    // Always block to handle synchronous operations
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            c <= 32'b0; // Reset accumulator
        end else begin
            c <= c + product[31:0]; // Accumulate the lower 32 bits of the product
        end
    end

endmodule
```
