```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // FSM states
    typedef enum reg [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        DONE = 3'b100
    } state_t;
    
    state_t state, next_state;
    reg [7:0] shift_reg;  // 8-bit shift register to store the received data bits
    reg [2:0] bit_count;  // Counter to count the number of bits received

    // FSM logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            done <= 0;
            out_byte <= 8'b0;
            shift_reg <= 8'b0;
            bit_count <= 3'b0;
        end else begin
            state <= next_state;
            
            case (state)
                IDLE: begin
                    done <= 0;
                end
                START: begin
                    bit_count <= 3'b0; // Reset bit counter
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift in the new bit
                    bit_count <= bit_count + 1'b1;
                end
                STOP: begin
                    if (in == 1'b1) begin // Check stop bit
                        out_byte <= shift_reg;
                        done <= 1;
                    end else begin
                        done <= 0;
                    end
                end
                DONE: begin
                    done <= 1;
                end
            endcase
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in == 1'b0) begin  // Detect start bit (assume active low)
                    next_state = START;
                end else begin
                    next_state = IDLE;
                end
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count == 3'b111) begin  // 8 bits received
                    next_state = STOP;
                end else begin
                    next_state = DATA;
                end
            end
            STOP: begin
                if (in == 1'b1) begin  // Ensure correct stop bit
                    next_state = DONE;
                end else begin
                    next_state = IDLE;  // Go back to searching for a new start
                end
            end
            DONE: begin
                next_state = IDLE; // After done, recheck for new start bit
            end
            default: begin
                next_state = IDLE;
            end
        endcase
    end

endmodule
```