```verilog
module top_module(
    input clk,
    input in,
    input reset,   // Synchronous reset
    output reg done
);

    // Declare states
    typedef enum reg [2:0] {
        IDLE = 3'd0,
        START = 3'd1,
        DATA = 3'd2,
        STOP = 3'd3,
        ERROR = 3'd4
    } state_t;

    // State register
    reg [2:0] current_state, next_state;
    reg [2:0] bit_counter; // Counter for the 8 data bits

    // State transitions
    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            bit_counter <= 3'd0;
            done <= 0;
        end
        else begin
            current_state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        // Default assignments
        next_state = current_state;
        done = 0;

        case (current_state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end

            START: begin
                next_state = DATA;
                bit_counter = 3'd0;
            end

            DATA: begin
                if (bit_counter == 3'd7) begin
                    next_state = STOP;
                end
                bit_counter = bit_counter + 1;
            end

            STOP: begin
                if (in == 1) begin // Check stop bit
                    done = 1;
                    next_state = IDLE;
                end else begin
                    next_state = ERROR;
                end
            end

            ERROR: begin
                if (in == 1) // Wait for stop bit to return to IDLE
                    next_state = IDLE;
            end

            default: next_state = IDLE;
        endcase
    end

endmodule
```