```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5 // Must be an odd number
) (
    input clk,
    input rst_n,
    output reg clk_div
);

    // Internal registers
    reg [31:0] cnt1;
    reg [31:0] cnt2;
    reg clk_div1;
    reg clk_div2;

    // Calculate half of the divisor
    localparam HALF_DIV = NUM_DIV / 2;
    
    // Assert a compile-time check to ensure NUM_DIV is odd
    initial begin
        if (NUM_DIV % 2 == 0) begin
            $fatal("The divisor NUM_DIV must be an odd number.");
        end
    end

    // Counter and clock_div1 logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 0;
        end else if (cnt1 == NUM_DIV - 1) begin
            cnt1 <= 0;
            clk_div1 <= ~clk_div1;
        end else begin
            cnt1 <= cnt1 + 1;
        end
    end

    // Counter and clock_div2 logic
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 0;
        end else if (cnt2 == NUM_DIV - 1) begin
            cnt2 <= 0;
            clk_div2 <= ~clk_div2;
        end else begin
            cnt2 <= cnt2 + 1;
        end
    end

    // Output clock_div logic
    always @* begin
        clk_div = clk_div1 | clk_div2;
    end

endmodule
```
