```verilog
module freq_diveven #(
    parameter NUM_DIV = 4 // Must be an even number
)(
    input  wire clk,    // Input clock signal
    input  wire rst_n,  // Active-low reset signal
    output reg  clk_div // Divided clock output
);

    reg [3:0] cnt; // 4-bit register for counting

    // Ensure NUM_DIV is an even number and greater than zero
    initial begin
        if (NUM_DIV % 2 != 0 || NUM_DIV <= 0) begin
            $fatal("NUM_DIV must be a positive even number.");
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 4'b0;      // Reset counter to zero
            clk_div <= 1'b0;  // Reset divided clock to zero
        end else begin
            if (cnt == (NUM_DIV - 1)) begin
                cnt <= 4'b0;      // Reset counter
                clk_div <= ~clk_div; // Toggle the divided clock
            end else begin
                cnt <= cnt + 1;   // Increment counter
            end
        end
    end
endmodule
```
