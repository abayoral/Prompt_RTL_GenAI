```verilog
module float_multi(
    input wire clk,
    input wire rst,
    input wire [31:0] a,
    input wire [31:0] b,
    output reg [31:0] z
);

    reg [2:0] counter;
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [9:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;

    // Parameters for IEEE 754
    localparam EXPONENT_BIAS = 127;
    localparam EXPONENT_BITS = 8;
    localparam MANTISSA_BITS = 23;

    initial begin
        counter = 0;
        z = 0;
    end

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 0;
            z <= 0;
        end else begin
            case(counter)
                0: begin // Initialization
                    if (a[30:23] == 255 || b[30:23] == 255) begin
                        // Handle special cases of NaN and Infinity
                        z <= {a[31] ^ b[31], 255, a[22:0] | b[22:0]};
                        counter <= 0;
                    end
                    else if (a[30:0] == 0 || b[30:0] == 0) begin
                        // Handle zero multiplication
                        z <= 0;
                        counter <= 0;
                    end else begin
                        // Extract components
                        a_sign <= a[31];
                        b_sign <= b[31];
                        z_sign <= a_sign ^ b_sign;

                        a_exponent <= a[30:23] - EXPONENT_BIAS;
                        b_exponent <= b[30:23] - EXPONENT_BIAS;
                        z_exponent <= a_exponent + b_exponent + EXPONENT_BIAS;

                        a_mantissa <= {1'b1, a[22:0]}; // Implicit leading 1
                        b_mantissa <= {1'b1, b[22:0]};

                        counter <= 1;
                    end
                end
                1: begin // Multiplication & Normalization
                    product <= a_mantissa * b_mantissa;

                    if (product[47]) begin
                        z_mantissa <= product[47:24];
                        guard_bit <= product[23];
                        round_bit <= product[22];
                        sticky <= |product[21:0];
                        z_exponent <= z_exponent + 1;
                    end else begin
                        z_mantissa <= product[46:23];
                        guard_bit <= product[22];
                        round_bit <= product[21];
                        sticky <= |product[20:0];
                    end
                    
                    counter <= 2;
                end
                2: begin // Rounding
                    if ((guard_bit && round_bit) || (guard_bit && sticky)) begin
                        z_mantissa <= z_mantissa + 1;
                    end

                    if (z_mantissa[23]) begin
                        z_exponent <= z_exponent + 1;
                    end
                    
                    if (z_exponent >= 255) begin
                        // Overflow to Infinity
                        z <= {z_sign, 8'b11111111, 23'd0};
                    end else if (z_exponent <= 0) begin
                        // Underflow to Zero
                        z <= {z_sign, 31'd0};
                    end else begin
                        // Normal Case
                        z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                    end

                    counter <= 0;
                end
                default: begin
                    counter <= 0;
                end
            endcase
        end
    end

endmodule
```