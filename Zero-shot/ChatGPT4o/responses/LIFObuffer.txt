```verilog
module LIFObuffer(
    input [3:0] dataIn,
    input RW, EN, Rst, Clk,
    output reg EMPTY, FULL,
    output reg [3:0] dataOut
);

    // LIFO buffer can contain up to 4 entries each of 4 bits
    reg [3:0] stack_mem [3:0]; // stack memory with 4 entries
    reg [2:0] SP; // Stack Pointer initialized from 0 to 4

    // Reset, push, and pop operations
    always @(posedge Clk) begin
        if (Rst) begin
            // Reset all stack entries and stack pointer
            SP <= 3'd4;
            stack_mem[0] <= 4'b0;
            stack_mem[1] <= 4'b0;
            stack_mem[2] <= 4'b0;
            stack_mem[3] <= 4'b0;
            EMPTY <= 1'b1;
            FULL <= 1'b0;
        end else if (EN) begin
            if (RW) begin
                // Pop operation
                if (!EMPTY) begin
                    dataOut <= stack_mem[SP];
                    stack_mem[SP] <= 4'b0;
                    SP <= SP + 1;

                    if (SP == 3) EMPTY <= 1'b1; // Empty when SP points to last valid position
                    FULL <= 1'b0;
                end
            end else begin
                // Push operation
                if (!FULL) begin
                    SP <= SP - 1;
                    stack_mem[SP] <= dataIn;

                    if (SP == 0) FULL <= 1'b1; // Full when SP reaches zero
                    EMPTY <= 1'b0;
                end
            end
        end
    end

    // Initialize outputs
    initial begin
        EMPTY = 1'b1;
        FULL = 1'b0;
        dataOut = 4'b0;
        SP = 3'd4;
    end

endmodule
```