```verilog
module dual_port_ram #(
    parameter WIDTH = 8,
    parameter DEPTH = 16
)(
    input wire wclk,
    input wire wenc,
    input wire [$clog2(DEPTH)-1:0] waddr,
    input wire [WIDTH-1:0] wdata,
    input wire rclk,
    input wire renc,
    input wire [$clog2(DEPTH)-1:0] raddr,
    output reg [WIDTH-1:0] rdata
);

    reg [WIDTH-1:0] mem [0:DEPTH-1];

    // Write logic
    always @(posedge wclk) begin
        if (wenc) begin
            mem[waddr] <= wdata;
        end
    end

    // Read and registered output logic
    always @(posedge rclk) begin
        if (renc) begin
            rdata <= mem[raddr];
        end
    end

endmodule

module asyn_fifo #(
    parameter WIDTH = 8,
    parameter DEPTH = 16
)(
    input wire wclk,
    input wire wrstn,
    input wire winc,
    input wire [WIDTH-1:0] wdata,
    input wire rclk,
    input wire rrstn,
    input wire rinc,
    output wire [WIDTH-1:0] rdata,
    output wire wfull,
    output wire rempty
);

    localparam ADDR_WIDTH = $clog2(DEPTH);

    reg [ADDR_WIDTH:0] wptr, rptr;
    reg [ADDR_WIDTH:0] wq2_rptr, rq2_wptr;
    wire [ADDR_WIDTH-1:0] waddr, raddr;
    wire [ADDR_WIDTH:0] wbin, rbin;
    
    // Dual-port RAM instantiation
    dual_port_ram #(.WIDTH(WIDTH), .DEPTH(DEPTH)) ram (
        .wclk(wclk),
        .wenc(winc & ~wfull),
        .waddr(waddr),
        .wdata(wdata),
        .rclk(rclk),
        .renc(rinc & ~rempty),
        .raddr(raddr),
        .rdata(rdata)
    );

    // Pointer synchronization circuitry
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            {wq2_rptr} <= 0; 
        end else begin
            wq2_rptr <= rptr;
        end
    end

    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            {rq2_wptr} <= 0;
        end else begin
            rq2_wptr <= wptr;
        end
    end

    // Binary to Gray conversion
    function [ADDR_WIDTH:0] bin_to_gray;
        input [ADDR_WIDTH:0] bin;
        begin
            bin_to_gray = (bin >> 1) ^ bin;
        end
    endfunction

    // Gray to Binary conversion
    function [ADDR_WIDTH:0] gray_to_bin;
        input [ADDR_WIDTH:0] gray;
        integer i;
        begin
            gray_to_bin = gray;
            for (i = ADDR_WIDTH-1; i >= 0; i = i - 1) begin
                gray_to_bin[i] = gray_to_bin[i] ^ gray_to_bin[i + 1];
            end
        end
    endfunction

    // Write pointer logic
    reg [ADDR_WIDTH:0] wgray;
    assign waddr = wptr[ADDR_WIDTH-1:0];
    assign wbin = gray_to_bin(wgray);
    
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            wptr <= 0;
            wgray <= 0;
        end else if (winc & ~wfull) begin
            wptr <= wptr + 1;
            wgray <= bin_to_gray(wptr + 1);
        end
    end

    // Read pointer logic
    reg [ADDR_WIDTH:0] rgray;
    assign raddr = rptr[ADDR_WIDTH-1:0];
    assign rbin = gray_to_bin(rgray);

    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            rptr <= 0;
            rgray <= 0;
        end else if (rinc & ~rempty) begin
            rptr <= rptr + 1;
            rgray <= bin_to_gray(rptr + 1);
        end
    end

    // Full and Empty logic
    assign wfull = (wgray == {~wq2_rptr[ADDR_WIDTH], wq2_rptr[ADDR_WIDTH-1:0]});
    assign rempty = (rgray == rq2_wptr);
    
endmodule
```