```verilog
module multi_pipe_8bit (
    input wire clk,
    input wire rst_n,
    input wire mul_en_in,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    output reg mul_en_out,
    output reg [15:0] mul_out
);

  // Register for input enable
  reg mul_en_reg_stage1, mul_en_reg_stage2, mul_en_reg_stage3;

  // Registers for input operands
  reg [7:0] mul_a_reg, mul_b_reg;

  // Intermediate partial products and sum registers
  reg [15:0] partial_sum_stage1, partial_sum_stage2;
  reg [15:0] temp [0:7];

  // Output register for product
  reg [15:0] mul_out_reg;

  // Register the enable signal through pipeline stages
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_en_reg_stage1 <= 0;
      mul_en_reg_stage2 <= 0;
      mul_en_reg_stage3 <= 0;
    end else begin
      mul_en_reg_stage1 <= mul_en_in;
      mul_en_reg_stage2 <= mul_en_reg_stage1;
      mul_en_reg_stage3 <= mul_en_reg_stage2;
    end
  end

  // Register the inputs when enable is high
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_a_reg <= 8'b0;
      mul_b_reg <= 8'b0;
    end else if (mul_en_in) begin
      mul_a_reg <= mul_a;
      mul_b_reg <= mul_b;
    end
  end

  // Generate partial products
  integer i;
  always @(*) begin
    for (i = 0; i < 8; i = i + 1) begin
      temp[i] = mul_b_reg[i] ? (mul_a_reg << i) : 16'b0;
    end
  end

  // Calculate partial sum (stage 1)
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      partial_sum_stage1 <= 16'b0;
    end else if (mul_en_reg_stage1) begin
      partial_sum_stage1 <= temp[0] + temp[1] + temp[2] + temp[3];
    end 
  end

  // Calculate partial sum (stage 2)
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      partial_sum_stage2 <= 16'b0;
    end else if (mul_en_reg_stage2) begin
      partial_sum_stage2 <= partial_sum_stage1 + temp[4] + temp[5];
    end 
  end

  // Calculate final product (stage 3)
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_out_reg <= 16'b0;
    end else if (mul_en_reg_stage3) begin
      mul_out_reg <= partial_sum_stage2 + temp[6] + temp[7];
    end 
  end

  // Output assignment
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_en_out <= 0;
      mul_out <= 16'b0;
    end else begin
      mul_en_out <= mul_en_reg_stage3;
      mul_out <= mul_en_out ? mul_out_reg : 16'b0;
    end
  end

endmodule
```

This Verilog code defines a module `multi_pipe_8bit`, which accomplishes an 8-bit multiplication using pipelining techniques. Its architecture is divided into stages that capture inputs, compute partial products, and accumulate these to form the final product, while controlling operations via input and output enable signals. It ensures computations are synchronized to a clock and can be reset with an active-low signal.