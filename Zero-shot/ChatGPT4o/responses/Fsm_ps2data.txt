```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done
);

    // State encoding
    localparam WAIT_BYTE_1 = 2'b00,
               BYTE_2      = 2'b01,
               BYTE_3      = 2'b10,
               DONE        = 2'b11;

    reg [1:0] state, next_state;
    reg [23:0] bytes_reg;
    reg done_reg;

    // State transition
    always @(posedge clk) begin
        if (reset) begin
            state <= WAIT_BYTE_1;
        end
        else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case(state)
            WAIT_BYTE_1: begin
                if (in[3]) next_state = BYTE_2;
                else next_state = WAIT_BYTE_1;
            end
            BYTE_2: begin
                next_state = BYTE_3;
            end
            BYTE_3: begin
                next_state = DONE;
            end
            DONE: begin
                next_state = WAIT_BYTE_1;
            end
            default: next_state = WAIT_BYTE_1;
        endcase
    end

    // Output and data path logic
    always @(posedge clk) begin
        if (reset) begin
            bytes_reg <= 24'b0;
            done_reg <= 1'b0;
        end
        else begin
            case(state)
                WAIT_BYTE_1: begin
                    if (in[3]) begin
                        bytes_reg[23:16] <= in;
                    end
                    done_reg <= 1'b0;
                end
                BYTE_2: begin
                    bytes_reg[15:8] <= in;
                end
                BYTE_3: begin
                    bytes_reg[7:0] <= in;
                end
                DONE: begin
                    done_reg <= 1'b1;
                end
                default: begin
                    bytes_reg <= bytes_reg;
                    done_reg <= 1'b0;
                end
            endcase
        end
    end

    // Outputs
    assign out_bytes = bytes_reg;
    assign done = done_reg;

endmodule
```