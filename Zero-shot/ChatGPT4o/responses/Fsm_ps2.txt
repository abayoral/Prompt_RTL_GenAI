```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output done
);

    // State definition
    typedef enum logic [1:0] {
        IDLE,        // Waiting for the start of a message
        BYTE1,       // First byte received
        BYTE2,       // Second byte received
        BYTE3_DONE   // Third byte received, assert done
    } state_t;
    
    // State registers
    state_t current_state, next_state;

    // State transition logic (combinational)
    always_comb begin
        case (current_state)
            IDLE: begin
                if (in[3] == 1'b1)
                    next_state = BYTE1;
                else
                    next_state = IDLE;
            end
            BYTE1: begin
                next_state = BYTE2;
            end
            BYTE2: begin
                next_state = BYTE3_DONE;
            end
            BYTE3_DONE: begin
                if (in[3] == 1'b1)
                    next_state = BYTE1;
                else
                    next_state = IDLE;
            end
            default: begin
                next_state = IDLE;
            end
        endcase
    end

    // State flip-flops (sequential)
    always_ff @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
        end else begin
            current_state <= next_state;
        end
    end

    // Output logic
    assign done = (current_state == BYTE3_DONE);

endmodule
```