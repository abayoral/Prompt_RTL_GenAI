module top_module(
    input clk,
    input load,
    input [255:0] data,
    output [255:0] q
);

    // We represent the 16x16 grid as a 2D array, where each element is 1-bit.
    // Each board row is stored as a 16‚Äêbit register.
    reg [15:0] board [0:15];       // Current state grid: board[0] is row0, board[15] is row15.
    reg [15:0] nextBoard [0:15];   // Temporary storage for next generation

    integer i, j;
    integer up, down, left_idx, right_idx;
    integer sum;

    // On every positive clock edge, either load the initial data or compute the next generation.
    always @(posedge clk) begin
        if (load) begin
            // Load the 256-bit input into the board.
            // q[15:0] corresponds to row 0, q[31:16] to row 1, etc.
            for (i = 0; i < 16; i = i + 1) begin
                board[i] <= data[16*i+15 -: 16];
            end
        end else begin
            // Compute next generation based on current board state.
            // Use the toroidal (wrap-around) addressing.
            for (i = 0; i < 16; i = i + 1) begin
                // It is a good practice to initialize the temporary row.
                nextBoard[i] = 16'b0;
                for (j = 0; j < 16; j = j + 1) begin
                    // Compute wrapping indices for rows and columns.
                    up       = (i == 0)    ? 15 : i - 1;
                    down     = (i == 15)   ? 0  : i + 1;
                    left_idx = (j == 0)    ? 15 : j - 1;
                    right_idx= (j == 15)   ? 0  : j + 1;
                    
                    // Sum the eight neighbours. Each neighboring cell is either 0 or 1.
                    sum = board[up][left_idx]   + board[up][j]   + board[up][right_idx] +
                          board[i][left_idx]                        + board[i][right_idx] +
                          board[down][left_idx] + board[down][j] + board[down][right_idx];
                          
                    // Apply Conway's Game of Life rules.
                    if (sum == 3)
                        nextBoard[i][j] = 1;          // Becomes alive.
                    else if (sum == 2)
                        nextBoard[i][j] = board[i][j];  // Remains unchanged.
                    else
                        nextBoard[i][j] = 0;          // Dies.
                end
            end

            // Update board with the computed next generation.
            for (i = 0; i < 16; i = i + 1) begin
                board[i] <= nextBoard[i];
            end
        end
    end

    // Flatten the 2D board into the 256-bit output vector.
    // According to the specification, row 0 should be in q[15:0],
    // row 1 in q[31:16], ..., row15 in q[255:240].
    // Using concatenation syntax, the last element in the concatenation becomes the LSB.
    assign q = { board[15], board[14], board[13], board[12],
                 board[11], board[10], board[9],  board[8],
                 board[7],  board[6],  board[5],  board[4],
                 board[3],  board[2],  board[1],  board[0] };

endmodule