module alu(
    input  [31:0] a,
    input  [31:0] b,
    input  [5:0]  aluc,
    output [31:0] r,
    output        zero,
    output        carry,
    output        negative,
    output        overflow,
    output        flag
);

  reg [31:0] result;
  reg        carry_out;
  reg        overflow_out;
  reg        flag_out;
  
  // For addition/subtraction, use an extra bit for the carry out.
  reg [32:0] tmp;

  always @(*) begin
    // Default values for signals.
    result      = 32'b0;
    carry_out   = 1'b0;
    overflow_out= 1'b0;
    flag_out    = 1'b0;
  
    case (aluc)
      // ADD: signed addition
      6'b100000: begin
          tmp = {1'b0, a} + {1'b0, b};
          result = tmp[31:0];
          carry_out = tmp[32];
          // Check signed overflow: if a and b have the same sign but sign of result differs.
          if ((a[31] == b[31]) && (result[31] != a[31]))
            overflow_out = 1'b1;
          else
            overflow_out = 1'b0;
      end
      
      // ADDU: unsigned addition
      6'b100001: begin
          tmp = {1'b0, a} + {1'b0, b};
          result = tmp[31:0];
          carry_out = tmp[32];
          overflow_out = 1'b0;
      end
      
      // SUB: signed subtraction
      6'b100010: begin
          tmp = {1'b0, a} - {1'b0, b};
          result = tmp[31:0];
          carry_out = tmp[32]; // In subtraction, this can be interpreted as a borrow flag (carry out).
          // For signed subtraction, detect overflow when the sign of a and b differ and the result sign differs from a.
          if ((a[31] != b[31]) && (result[31] != a[31]))
            overflow_out = 1'b1;
          else
            overflow_out = 1'b0;
      end
      
      // SUBU: unsigned subtraction
      6'b100011: begin
          tmp = {1'b0, a} - {1'b0, b};
          result = tmp[31:0];
          carry_out = tmp[32];
          overflow_out = 1'b0;
      end
      
      // AND: bitwise AND
      6'b100100: begin
          result = a & b;
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // OR: bitwise OR
      6'b100101: begin
          result = a | b;
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // XOR: bitwise XOR
      6'b100110: begin
          result = a ^ b;
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // NOR: bitwise NOR
      6'b100111: begin
          result = ~(a | b);
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SLT: Set on Less Than (signed comparison)
      6'b101010: begin
          // The main result is not used; the flag is.
          result = 32'b0;
          flag_out = ($signed(a) < $signed(b)) ? 1'b1 : 1'b0;
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SLTU: Set on Less Than Unsigned
      6'b101011: begin
          result = 32'b0;
          flag_out = (a < b) ? 1'b1 : 1'b0;
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SLL: Shift Left Logical (shift amount from lower 5 bits of b)
      6'b000000: begin
          result = a << b[4:0];
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SRL: Shift Right Logical (shift amount from lower 5 bits of b)
      6'b000010: begin
          result = a >> b[4:0];
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SRA: Shift Right Arithmetic (shift amount from lower 5 bits of b)
      6'b000011: begin
          result = $signed(a) >>> b[4:0];
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SLLV: Shift Left Logical Variable (shift amount from lower 5 bits of b)
      6'b000100: begin
          result = a << b[4:0];
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SRLV: Shift Right Logical Variable (shift amount from lower 5 bits of b)
      6'b000110: begin
          result = a >> b[4:0];
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // SRAV: Shift Right Arithmetic Variable (shift amount from lower 5 bits of b)
      6'b000111: begin
          result = $signed(a) >>> b[4:0];
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // LUI: Load Upper Immediate
      6'b001111: begin
          // Shift the lower 16 bits of 'a' into the upper 16 bits of result.
          // In MIPS, LUI loads the immediate value into the high half.
          result = {a[15:0], 16'b0};
          carry_out = 1'b0;
          overflow_out = 1'b0;
      end
      
      // Default: unhandled operation, drive outputs to high impedance.
      default: begin
          result = 32'bz;
          carry_out = 1'bz;
          overflow_out = 1'bz;
          flag_out = 1'bz;
      end
    endcase
  end
  
  // Output assignments.
  assign r        = result;
  assign zero     = (result == 32'b0) ? 1'b1 : 1'b0;
  assign negative = result[31];
  assign carry    = carry_out;
  assign overflow = overflow_out;
  assign flag     = flag_out;

endmodule