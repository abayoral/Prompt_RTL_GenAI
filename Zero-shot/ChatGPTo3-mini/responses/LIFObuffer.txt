module LIFObuffer(
    input  [3:0] dataIn, // 4-bit data input for push operations
    input        RW,     // Read/Write control: 1 for pop (read), 0 for push (write)
    input        EN,     // Enable signal for buffer operations
    input        Rst,    // Active-high reset signal
    input        Clk,    // Clock signal
    output reg   EMPTY,  // Flag indicating the buffer is empty
    output reg   FULL,   // Flag indicating the buffer is full
    output reg [3:0] dataOut // 4-bit data output for pop operations
);

    // Internal stack memory: 4 entries of 4 bits each.
    reg [3:0] stack_mem [0:3];
    // Stack Pointer: ranges from 0 (full) to 4 (empty). When SP == 4, there is no valid data.
    reg [2:0] SP;

    // Synchronous operations with enable and reset.
    always @(posedge Clk) begin
        if (EN) begin
            if (Rst) begin
                // Synchronous reset: clear all memory and set SP to 4 (empty)
                stack_mem[0] <= 4'b0;
                stack_mem[1] <= 4'b0;
                stack_mem[2] <= 4'b0;
                stack_mem[3] <= 4'b0;
                SP         <= 3'd4;
                dataOut    <= 4'b0;
            end
            else begin
                // Check the operation based on the RW signal.
                if (RW) begin  // Pop operation
                    if (SP < 3'd4) begin  // Ensure the buffer is not empty
                        // Read the top element from the stack at position SP and then pop it
                        dataOut    <= stack_mem[SP];
                        stack_mem[SP] <= 4'b0; // Clear the memory at the popped location
                        SP         <= SP + 1; // Increment SP to remove the top element
                    end
                    else begin
                        // Buffer is empty, no operation; dataOut remains unchanged.
                        dataOut <= dataOut;
                    end
                end
                else begin  // Push operation
                    if (SP > 0) begin  // Ensure the buffer is not full
                        // Decrement SP and push the new data at the new top-of-stack location.
                        // Note: Using the old value of SP on the right-hand side due to non-blocking assignments.
                        stack_mem[SP - 1] <= dataIn;
                        SP <= SP - 1;
                    end
                    else begin
                        // Buffer is full, no operation.
                    end
                end
            end
        end
        
        // Update status flags according to the current value of SP.
        // When SP == 4, the buffer is empty.
        if (SP == 3'd4)
            EMPTY <= 1'b1;
        else
            EMPTY <= 1'b0;
        
        // When SP == 0, the buffer is full.
        if (SP == 3'd0)
            FULL <= 1'b1;
        else
            FULL <= 1'b0;
    end

endmodule