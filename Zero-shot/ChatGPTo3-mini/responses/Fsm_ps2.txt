module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output done
);

    // Define state encoding
    localparam WAIT  = 2'd0;
    localparam BYTE2 = 2'd1;
    localparam BYTE3 = 2'd2;
    localparam DONE  = 2'd3;

    reg [1:0] state, next_state;

    // Only care about bit[3] as per specification.
    wire start = in[3];

    // Next state logic
    always @(*) begin
        case (state)
            WAIT: begin
                if (start)
                    next_state = BYTE2;
                else
                    next_state = WAIT;
            end
            BYTE2: next_state = BYTE3;
            BYTE3: next_state = DONE;
            DONE:  next_state = WAIT;
            default: next_state = WAIT;
        endcase
    end

    // State flip-flops (synchronous reset)
    always @(posedge clk) begin
        if (reset)
            state <= WAIT;
        else
            state <= next_state;
    end

    // Output logic: done asserted for one cycle (when state == DONE)
    assign done = (state == DONE);

endmodule