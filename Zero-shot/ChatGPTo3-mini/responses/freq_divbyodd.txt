module freq_divbyodd #(
    parameter NUM_DIV = 5
)(
    input  clk,
    input  rst_n,
    output clk_div
);

    // Width calculation for the counter
    localparam CNT_WIDTH = $clog2(NUM_DIV);

    // Two counters for rising and falling edges
    reg [CNT_WIDTH-1:0] cnt1;
    reg [CNT_WIDTH-1:0] cnt2;

    // Two auxiliary clock signals handling respective clock edges
    reg clk_div1;
    reg clk_div2;

    // Generate divided clock signal on the positive edge of input clock
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1     <= 0;
            clk_div1 <= 0;
        end 
        else begin
            if (cnt1 == NUM_DIV - 1)
                cnt1 <= 0;
            else
                cnt1 <= cnt1 + 1;

            // Toggle clk_div1 when counter reaches half of NUM_DIV (integer division)
            if (cnt1 == (NUM_DIV >> 1))
                clk_div1 <= ~clk_div1;
        end
    end

    // Generate divided clock signal on the negative edge of input clock
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2     <= 0;
            clk_div2 <= 0;
        end 
        else begin
            if (cnt2 == NUM_DIV - 1)
                cnt2 <= 0;
            else
                cnt2 <= cnt2 + 1;

            // Toggle clk_div2 when counter reaches half of NUM_DIV (integer division)
            if (cnt2 == (NUM_DIV >> 1))
                clk_div2 <= ~clk_div2;
        end
    end

    // Combine the two auxiliary divided clocks
    assign clk_div = clk_div1 | clk_div2;

endmodule