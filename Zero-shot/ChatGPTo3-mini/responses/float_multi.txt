module float_multi(
    input         clk,
    input         rst,
    input  [31:0] a,
    input  [31:0] b,
    output reg [31:0] z
);

  // Internal cycle counter for pipelining
  reg [2:0] counter;

  // Component registers for operands and output
  reg [23:0] a_mantissa, b_mantissa;   // 24-bit (implicit bit included for normalized numbers)
  reg [9:0]  a_exponent, b_exponent;     // Actually only 8 bits needed, but extra bit for arithmetic
  reg        a_sign, b_sign;
  
  reg [23:0] z_mantissa;   // final mantissa before rounding (the hidden bit is not stored in the output)
  reg [9:0]  z_exponent;   // final exponent (will use lower 8 bits for output)
  reg        z_sign;      // final sign

  // Intermediate registers for multiplication of mantissas
  reg [49:0] product;    // 50-bit product (we really use the lower 48 bits from 24x24 multiplication)
  reg guard_bit, round_bit, sticky;

  // For exponent arithmetic
  reg [9:0] raw_exp;  // extended exponent result

  // For normalization intermediate storage
  reg [23:0] norm_mantissa;  // candidate mantissa after normalization and before rounding

  // Special-case flags and result registers
  reg a_is_nan, b_is_nan;
  reg a_is_inf, b_is_inf;
  reg a_is_zero, b_is_zero;
  
  reg special_flag;         // Indicates that a special-case has been detected
  reg [31:0] special_result; // Holds the final result when special-case

  // Main pipeline: operations are performed in phases dictated by counter.
  always @(posedge clk) begin
    if(rst) begin
      counter       <= 3'd0;
      z             <= 32'd0;
      // clear intermediate registers
      a_mantissa    <= 24'd0;
      b_mantissa    <= 24'd0;
      a_exponent    <= 10'd0;
      b_exponent    <= 10'd0;
      a_sign        <= 1'b0;
      b_sign        <= 1'b0;
      z_mantissa    <= 24'd0;
      z_exponent    <= 10'd0;
      z_sign        <= 1'b0;
      raw_exp       <= 10'd0;
      product       <= 50'd0;
      guard_bit     <= 1'b0;
      round_bit     <= 1'b0;
      sticky        <= 1'b0;
      norm_mantissa <= 24'd0;
      a_is_nan      <= 1'b0;
      b_is_nan      <= 1'b0;
      a_is_inf      <= 1'b0;
      b_is_inf      <= 1'b0;
      a_is_zero     <= 1'b0;
      b_is_zero     <= 1'b0;
      special_flag  <= 1'b0;
      special_result<= 32'd0;
    end else begin
      counter <= counter + 3'd1;
      case(counter)
        3'd0: begin
          // Idle or waiting phase; nothing to do
        end

        // Cycle 1: Extraction Phase: extract sign, exponent, and mantissa.
        3'd1: begin
          // Extract sign bits.
          a_sign <= a[31];
          b_sign <= b[31];
          // Extract exponents. IEEE single precision exponent is bits [30:23].
          a_exponent <= {2'b00, a[30:23]};
          b_exponent <= {2'b00, b[30:23]};
          // Determine if operand is zero.
          a_is_zero <= (a[30:0] == 31'd0);
          b_is_zero <= (b[30:0] == 31'd0);
          // Determine if operand is infinity or NaN.
          // In IEEE 754, exponent all ones (255) indicates Inf or NaN.
          a_is_inf <= (a[30:23] == 8'hFF) && (a[22:0] == 23'd0);
          b_is_inf <= (b[30:23] == 8'hFF) && (b[22:0] == 23'd0);
          a_is_nan <= (a[30:23] == 8'hFF) && (a[22:0] != 23'd0);
          b_is_nan <= (b[30:23] == 8'hFF) && (b[22:0] != 23'd0);

          // Extract mantissas.
          // For normalized numbers (exponent nonzero) the implicit bit is 1.
          if(a[30:23] != 8'd0)
            a_mantissa <= {1'b1, a[22:0]};
          else
            a_mantissa <= {1'b0, a[22:0]};  // subnormal

          if(b[30:23] != 8'd0)
            b_mantissa <= {1'b1, b[22:0]};
          else
            b_mantissa <= {1'b0, b[22:0]};  // subnormal
        end

        // Cycle 2: Special Case Handling & Exponent Calculation.
        3'd2: begin
          // Check special cases:
          // NaN has highest precedence.
          if(a_is_nan || b_is_nan) begin
            special_flag  <= 1'b1;
            // Return a canonical NaN: sign 0, exponent all ones, nonzero mantissa.
            special_result <= {1'b0, 8'hFF, 23'h400000};
          end else if((a_is_inf && b_is_zero) || (b_is_inf && a_is_zero)) begin
            // Infinity multiplied by zero is NaN
            special_flag  <= 1'b1;
            special_result <= {1'b0, 8'hFF, 23'h400000};
          end else if(a_is_inf || b_is_inf) begin
            special_flag  <= 1'b1;
            // Infinity result with correct sign.
            z_sign        <= a_sign ^ b_sign;
            special_result <= {a_sign ^ b_sign, 8'hFF, 23'd0};
          end else if(a_is_zero || b_is_zero) begin
            special_flag  <= 1'b1;
            // Zero result; IEEE 754 zero with sign = XOR of signs.
            z_sign        <= a_sign ^ b_sign;
            special_result <= {a_sign ^ b_sign, 8'd0, 23'd0};
          end else begin
            special_flag  <= 1'b0;
            // Normal case: compute initial exponent.
            // Subtract bias (127). Note: a_exponent and b_exponent contain the raw exponent field.
            raw_exp <= (a_exponent[7:0] + b_exponent[7:0]) - 8'd127;
            // Compute sign.
            z_sign <= a_sign ^ b_sign;
          end
        end

        // Cycle 3: Multiplication Phase: multiply the mantissas.
        3'd3: begin
          if(!special_flag)
            // 24-bit x 24-bit multiplication. The product is up to 48 bits.
            product <= a_mantissa * b_mantissa;
        end

        // Cycle 4: Normalization Phase.
        3'd4: begin
          if(!special_flag) begin
            // The product is 48 bits; we use bits [47:0] of the 50-bit product.
            // Check the MSB to determine if we need to shift.
            if(product[47] == 1'b1) begin
              // Product is in the form 1x.xxxx. Take bits [46:23] as the mantissa.
              norm_mantissa <= product[46:23];
              guard_bit     <= product[23];
              round_bit     <= product[22];
              // Sticky is the OR of remaining bits.
              sticky        <= |product[21:0];
            end else begin
              // Product did not produce a 1 in the MSB, thus normalize by shifting left 1.
              norm_mantissa <= product[45:22];
              guard_bit     <= product[22];
              round_bit     <= product[21];
              sticky        <= |product[20:0];
              // Adjust exponent due to left shift normalization.
              raw_exp <= raw_exp - 10'd1;
            end
          end
        end

        // Cycle 5: Rounding Phase.
        3'd5: begin
          if(!special_flag) begin
            // Round to nearest even. If guard bit is 1 and any of the round bit, sticky, or LSB is 1, then round up.
            if(guard_bit && (round_bit || sticky || norm_mantissa[0])) begin
              norm_mantissa <= norm_mantissa + 24'd1;
              // Check if rounding caused a carry-out (overflow in mantissa)
              if(norm_mantissa == 24'h7FFFFF) begin
                // When rounding the maximum mantissa, an overflow may occur; shift right and increment exponent.
                norm_mantissa <= (norm_mantissa + 24'd1) >> 1;
                raw_exp       <= raw_exp + 10'd1;
              end
            end
          end
        end

        // Cycle 6: Output Generation Phase.
        3'd6: begin
          if(special_flag) begin
            // If a special-case was detected earlier, output the computed special result.
            z <= special_result;
          end else begin
            // Handle exponent overflow/underflow
            if(raw_exp[9:0] >= 10'd255) begin
              // Overflow: return infinity.
              z_exponent <= {2'b00, 8'hFF};
              z_mantissa <= 24'd0;
            end else if(raw_exp[9:0] <= 10'd0) begin
              // Underflow: return zero.
              z_exponent <= 10'd0;
              z_mantissa <= 24'd0;
            end else begin
              // Normal result: remove the implicit MSB from mantissa (IEEE 754 format omits the hidden bit).
              z_exponent <= {2'b00, raw_exp[7:0]};
              z_mantissa <= norm_mantissa;  // norm_mantissa is 24 bits with the implicit bit.
            end
            // Compose the final result.
            // The IEEE 754 single precision format: [31] sign, [30:23] exponent, [22:0] fraction.
            // Remove the implicit 1 from z_mantissa by taking bits [22:0].
            z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
          end
        end

        default: begin
          // Do nothing in other cycles.
        end
      endcase
    end
  end

endmodule