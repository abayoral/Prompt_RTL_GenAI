module freq_divbyfrac(
  input  clk,
  input  rst_n,
  output clk_div
);

  // Parameters representing the 7-cycle count basis and the high‐time threshold.
  parameter DIV_COUNT   = 7;  // Total count period (MUL2_DIV_CLK constant)
  parameter HIGH_COUNT  = 4;  // Number of cycles the intermediate clock stays high
  
  // Registers for positive‐edge clock division
  reg [2:0] counter_pos;
  reg       clk_pos;
  
  // Registers for negative‐edge clock division (phase‐shifted version)
  reg [2:0] counter_neg;
  reg       clk_neg;
  
  // Positive-edge process: count and generate intermediate clock (non-shifted)
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      counter_pos <= 3'd0;
      clk_pos     <= 1'b0;
    end 
    else begin
      if (counter_pos == DIV_COUNT-1)
        counter_pos <= 3'd0;
      else 
        counter_pos <= counter_pos + 1'b1;
      
      // Generate high for HIGH_COUNT cycles, then low for the remainder
      if (counter_pos < HIGH_COUNT)
        clk_pos <= 1'b1;
      else
        clk_pos <= 1'b0;
    end
  end
  
  // Negative-edge process: count and generate phase-adjusted intermediate clock
  // This version is naturally offset by half a clock-cycle relative to the posedge branch.
  always @(negedge clk or negedge rst_n) begin
    if (!rst_n) begin
      counter_neg <= 3'd0;
      clk_neg     <= 1'b0;
    end 
    else begin
      if (counter_neg == DIV_COUNT-1)
        counter_neg <= 3'd0;
      else 
        counter_neg <= counter_neg + 1'b1;
      
      // Use the same division ratio: high for HIGH_COUNT cycles, low for the remaining cycles.
      if (counter_neg < HIGH_COUNT)
        clk_neg <= 1'b1;
      else
        clk_neg <= 1'b0;
    end
  end
  
  // Combine the two phase-adjusted divided clocks via a logical OR.
  // This helps to mitigate duty cycle imbalances and provides a uniformly periodic fractional clock.
  assign clk_div = clk_pos | clk_neg;

endmodule