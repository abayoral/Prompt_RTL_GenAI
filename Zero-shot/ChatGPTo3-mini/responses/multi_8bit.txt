module multi_8bit(
    input        clk,    // clock signal
    input        rst,    // synchronous reset (active high)
    input [7:0]  A,      // 8-bit multiplicand
    input [7:0]  B,      // 8-bit multiplier
    output reg [15:0] product  // 16-bit product output
);

  // Internal registers to hold intermediate values
  reg [15:0] prod;           // accumulator for the product
  reg [7:0]  multiplicand;   // working copy of A that is shifted left each cycle
  reg [7:0]  multiplier;     // working copy of B that is shifted right each cycle
  reg [3:0]  count;          // iteration counter (needs 4 bits to count from 0 to 8)

  // Sequential process using a clocked always block.
  // The multiplier is computed in 8 iterations using shift-and-add.
  // When rst is asserted, the operands are loaded and the internal registers cleared.
  // Then, on each clock cycle the LSB of multiplier is checked.
  // If it is 1, the current multiplicand is added into the product accumulator.
  // Afterwards, the multiplicand is shifted left and the multiplier shifted right.
  // After 8 cycles, the full 16-bit product is available on the "product" output.
  always @(posedge clk or posedge rst) begin
    if (rst) begin
      // On reset: latch the original operands and clear registers.
      prod         <= 16'b0;
      multiplicand <= A;
      multiplier   <= B;
      count        <= 4'b0;
      product      <= 16'b0;
    end else begin
      if (count < 8) begin
        // If the current LSB of multiplier is 1, add the current multiplicand to the product.
        if (multiplier[0])
          prod <= prod + {8'b0, multiplicand}; // Zero-extend the 8-bit multiplicand to 16 bits before addition
          
        // Shift multiplicand left by 1 and multiplier right by 1 for the next bit.
        multiplicand <= multiplicand << 1;
        multiplier   <= multiplier >> 1;
        count        <= count + 1;
      end
      // Drive the output product continuously from the accumulator.
      product <= prod;
    end
  end

endmodule