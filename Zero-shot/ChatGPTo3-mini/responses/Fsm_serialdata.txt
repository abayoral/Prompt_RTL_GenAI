module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // FSM state declarations
    localparam IDLE    = 2'b00;
    localparam RECEIVE = 2'b01;
    localparam STOP    = 2'b10;
    
    reg [1:0] state, next_state;
    reg [2:0] bit_count;  // Counts 0 to 7 for 8 data bits
    reg [7:0] shift_reg;  // Shift register to collect the data bits
    
    // Sequential logic: state, counter, shift register, done, and out_byte updates.
    always @(posedge clk) begin
        if (reset) begin
            state      <= IDLE;
            bit_count  <= 0;
            shift_reg  <= 0;
            out_byte   <= 0;
            done       <= 0;
        end else begin
            case (state)
                IDLE: begin
                    done <= 0; // done is only valid when a byte has been fully received.
                    if (in == 1'b0) begin  // Detect start bit (start bit should be 0)
                        state     <= RECEIVE;
                        bit_count <= 0;
                        shift_reg <= 0; // Clear shift register for new byte
                    end else begin
                        state <= IDLE;
                    end
                end
                
                RECEIVE: begin
                    done <= 0;
                    // Shift in one bit at a time.
                    // Because the serial protocol sends LSB first, sampling by shifting right
                    // will eventually have the first received bit at bit0, second at bit1, etc.
                    shift_reg <= {in, shift_reg[7:1]};
                    
                    if (bit_count == 3'd7) begin
                        // Received 8 data bits, now shift register holds the entire byte.
                        bit_count <= 0;  // reset counter for next byte
                        state <= STOP;
                    end else begin
                        bit_count <= bit_count + 1;
                        state <= RECEIVE;
                    end
                end
                
                STOP: begin
                    // In the protocol, the stop bit should be high (1).
                    // If a valid stop bit is detected, latch the data and indicate done.
                    if (in == 1'b1) begin
                        out_byte <= shift_reg;
                        done <= 1;
                        state <= IDLE;
                    end else begin
                        // If stop bit is not as expected, remain in STOP state (waiting for stop bit).
                        done <= 0;
                        state <= STOP;
                    end
                end
                
                default: begin
                    state <= IDLE;
                end
            endcase
        end
    end

endmodule