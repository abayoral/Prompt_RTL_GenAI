module mux16(
    input  [15:0] in0,
    input  [15:0] in1,
    input         sel,
    output [15:0] out
);
    assign out = sel ? in1 : in0;
endmodule

module top_module(
    input  [31:0] a,
    input  [31:0] b,
    output [31:0] sum
);
    wire lower_cout;
    wire [15:0] upper_sum0, upper_sum1;
    wire        cout0, cout1;

    // Lower 16-bit adder with carry-in = 0
    add16 lower_adder (
        .a   (a[15:0]),
        .b   (b[15:0]),
        .cin (1'b0),
        .sum (sum[15:0]),
        .cout(lower_cout)
    );

    // Upper 16-bit adders: one with carry-in 0, another with carry-in 1.
    add16 upper_adder0 (
        .a   (a[31:16]),
        .b   (b[31:16]),
        .cin (1'b0),
        .sum (upper_sum0),
        .cout(cout0)
    );

    add16 upper_adder1 (
        .a   (a[31:16]),
        .b   (b[31:16]),
        .cin (1'b1),
        .sum (upper_sum1),
        .cout(cout1)
    );

    // 16-bit 2-to-1 multiplexer selects the correct upper sum based on the lower adder's carry-out.
    mux16 mux_upper (
        .in0(upper_sum0),
        .in1(upper_sum1),
        .sel(lower_cout),
        .out(sum[31:16])
    );

endmodule