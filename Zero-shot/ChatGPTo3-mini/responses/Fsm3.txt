module top_module(
    input clk,
    input in,
    input areset,
    output out
);

    // Declare state encoding as 2-bit values.
    localparam A = 2'd0,
               B = 2'd1,
               C = 2'd2,
               D = 2'd3;
    
    // State register and next state variable.
    reg [1:0] state, next_state;
    
    // Combinational logic for next state based on current state and input.
    always @(*) begin
        case (state)
            A: begin
                if (in)
                    next_state = B;
                else
                    next_state = A;
            end
            B: begin
                if (in)
                    next_state = B;
                else
                    next_state = C;
            end
            C: begin
                if (in)
                    next_state = D;
                else
                    next_state = A;
            end
            D: begin
                if (in)
                    next_state = B;
                else
                    next_state = C;
            end
            default: next_state = A;
        endcase
    end
    
    // Sequential logic with asynchronous reset. FSM resets to state A.
    always @(posedge clk or posedge areset) begin
        if (areset)
            state <= A; 
        else
            state <= next_state;
    end
    
    // Output logic: Moore output depends solely on the current state.
    assign out = (state == D) ? 1'b1 : 1'b0;
    
endmodule