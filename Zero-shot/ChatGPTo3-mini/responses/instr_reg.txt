module instr_reg(
    input wire clk,
    input wire rst,         // active low reset
    input wire [1:0] fetch, // 2-bit fetch control signal
    input wire [7:0] data,  // 8-bit instruction/data input
    output wire [2:0] ins,  // High 3 bits from the register (opcode)
    output wire [4:0] ad1,  // Low 5 bits from the register (address)
    output wire [7:0] ad2   // Full 8-bit data from the secondary source
);

  // Internal 8-bit registers to hold instructions from different sources.
  reg [7:0] ins_p1;
  reg [7:0] ins_p2;

  // Sequential logic: update registers on the rising edge of clk
  always @(posedge clk or negedge rst) begin
    if (!rst) begin
      // Active low reset: initialize both registers to zero
      ins_p1 <= 8'b0;
      ins_p2 <= 8'b0;
    end 
    else begin
      case(fetch)
        2'b01: begin
          // Fetch from register: capture data into ins_p1
          ins_p1 <= data;
        end
        2'b10: begin
          // Fetch from RAM/ROM: capture data into ins_p2
          ins_p2 <= data;
        end
        default: begin
          // For any other fetch value, retain existing values
          ins_p1 <= ins_p1;
          ins_p2 <= ins_p2;
        end
      endcase
    end
  end

  // Continuous assignments to drive the outputs:
  // ins holds the high 3 bits and ad1 holds the low 5 bits from ins_p1
  assign ins = ins_p1[7:5];
  assign ad1 = ins_p1[4:0];
  // ad2 is the full 8-bit instruction from ins_p2
  assign ad2 = ins_p2;

endmodule