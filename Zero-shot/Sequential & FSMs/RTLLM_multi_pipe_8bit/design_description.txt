You are being tasked with creating a Verilog module named `multi_pipe_8bit`, designed to implement the functionality of an unsigned 8-bit multiplier using pipeline processing. This module should operate synchronously based on a clock signal (`clk`) and should include an active-low reset signal (`rst_n`). The module should also use an input enable signal (`mul_en_in`) to control the multiplication process, and it should generate an output enable signal (`mul_en_out`) and a 16-bit product output (`mul_out`).

To set up the context of the module: 

- **Inputs**: 
  - `clk`: This is the clock signal required for synchronous operations.
  - `rst_n`: An active-low reset signal that initializes or resets the module when it is pulled low (0). When not in reset (1), normal operations proceed.
  - `mul_en_in`: This signal enables the multiplication operation.
  - `mul_a` and `mul_b`: These are the 8-bit multiplicand and multiplier inputs, respectively.

- **Outputs**:
  - `mul_en_out`: A signal to indicate if the multiplication operation is currently active.
  - `mul_out`: A 16-bit output signal representing the product of the multiplication.

**Implementation Details**:
- **Pipelining**: You are required to design the multiplier using a pipelined architecture. This means that the operation is broken down into stages, where each part of the process (from input handling to final product calculation) can be processed in parallel at different stages of the clock cycle to optimize performance.
  
- **Input Control**: The design should include logic to capture and store the input enable signal (`mul_en_in`) in a register. On each clock cycle, this signal should be sampled and stored in `mul_en_out_reg`, which will determine the status of `mul_en_out`.

- **Input Registers**: You will utilize registers such as `mul_a_reg` and `mul_b_reg` to store the input multiplicand and multiplier. These registers should update only when `mul_en_in` is active.

- **Partial Product Generation**: The module must generate partial products by executing bitwise operations between the multiplicand and bits of the multiplier. Logical conditions or assignments should help select appropriate bits of the multiplicand. These partial products should be assigned to a set of wires labeled `temp`.

- **Partial Sum Calculation**: The partial products need to be systematically added to form intermediate sums. This should involve using another set of registers, `sum`, each updating with a new value on the clock's rising edge.

- **Final Product Calculation**: The aggregated value of all partial sums will give the final product, stored in `mul_out_reg`. 

- **Output Assignment**: Depending on the state of the `mul_en_out` signal, the module should output either the calculated product (`mul_out_reg`) or zero.

Your task is to develop the complete Verilog code implementing these functionalities, ensuring that the module operates correctly based on the described architecture and control flow. Within the code, consider state transitions, conditional statements, and potential edge cases, especially concerning reset behavior and data propagations through pipeline stages.