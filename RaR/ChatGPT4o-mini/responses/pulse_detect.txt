```verilog
module pulse_detect (
    input wire clk,
    input wire rst_n,
    input wire data_in,
    output reg data_out
);

    // State encoding
    reg [1:0] state; // 0=IDLE, 1=RISING, 2=FALLING

    // State definitions
    localparam IDLE = 2'b00;
    localparam RISING = 2'b01;
    localparam FALLING = 2'b10;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // Reset state
            state <= IDLE;
            data_out <= 1'b0;
        end else begin
            case (state)
                IDLE: begin
                    if (data_in) begin
                        // Detected rising edge
                        state <= RISING;
                    end
                    data_out <= 1'b0;
                end

                RISING: begin
                    if (!data_in) begin
                        // Detected falling edge
                        state <= FALLING;
                    end
                    data_out <= 1'b0;
                end

                FALLING: begin
                    // Pulse detected
                    data_out <= 1'b1; // Set output high for one cycle
                    state <= IDLE; // Return to IDLE state
                end

                default: begin
                    state <= IDLE; // Reset to IDLE for safety
                end
            endcase
        end
    end
endmodule
```