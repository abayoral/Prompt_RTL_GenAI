```verilog
module fsm_with_datapath (
    input wire clk,
    input wire reset,
    input wire serial_in,
    output reg [7:0] out_byte,
    output reg done
);

    // Define states
    typedef enum reg [1:0] {
        IDLE,   // Idle state
        START,  // Detecting start bit
        DATA,   // Receiving data bits
        STOP    // Waiting for stop bit
    } state_t;

    state_t current_state, next_state;
    reg [2:0] bit_count;     // Count the number of received bits
    reg [7:0] shift_reg;     // Shift register to hold received data 

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            bit_count <= 0;
            shift_reg <= 0;
            done <= 0;
        end else begin
            current_state <= next_state;
            if (current_state == DATA) begin
                if (bit_count < 8) begin
                    shift_reg <= {serial_in, shift_reg[7:1]};
                    bit_count <= bit_count + 1;
                end
            end else if (current_state == STOP) begin
                if (serial_in) begin // Stop bit detected
                    done <= 1;
                    out_byte <= shift_reg; // Valid output at the end of stop state
                end else begin
                    done <= 0; // Stop bit not detected, wait again
                end
            end
        end
    end

    // Next state logic
    always @(*) begin
        case (current_state)
            IDLE: begin
                if (serial_in == 0) begin // Start bit detected
                    next_state = START;
                    bit_count = 0;
                    shift_reg = 0;
                end else begin
                    next_state = IDLE;
                end
            end
            START: begin
                next_state = DATA; // Proceed to data receiving
            end
            DATA: begin
                if (bit_count == 7) begin // Received last data bit
                    next_state = STOP;
                end else begin
                    next_state = DATA;
                end
            end
            STOP: begin
                next_state = IDLE; // Return to idle after stop bit
            end
            default: next_state = IDLE;
        endcase
    end

endmodule
```