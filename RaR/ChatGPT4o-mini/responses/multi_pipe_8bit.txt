```
module multi_pipe_8bit (
    input wire clk,
    input wire rst_n,
    input wire mul_en_in,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    output reg mul_en_out,
    output reg [15:0] mul_out
);

    reg [7:0] mul_a_reg, mul_b_reg;
    reg mul_en_out_reg;
    reg [15:0] partial_product [7:0];
    reg [15:0] sum;
    reg [3:0] count;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_a_reg <= 8'b0;
            mul_b_reg <= 8'b0;
            mul_en_out_reg <= 1'b0;
            mul_out <= 16'b0;
            sum <= 16'b0;
            count <= 4'b0;
        end else begin
            mul_en_out_reg <= mul_en_in;
            mul_en_out <= mul_en_out_reg;

            if (mul_en_in) begin
                mul_a_reg <= mul_a;
                mul_b_reg <= mul_b;
                sum <= 16'b0;
                count <= 4'b0;
            end

            if (count < 8) begin
                partial_product[count] <= mul_a_reg & {8{mul_b_reg[count]}};
                sum <= sum + partial_product[count];
                count <= count + 1;
            end else begin
                mul_out <= sum;
            end
        end
    end

endmodule
```