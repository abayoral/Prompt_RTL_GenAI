```verilog
module add1 (
    input wire a,
    input wire b,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (cin & (a ^ b));
endmodule

module add16 (
    input wire [15:0] a,
    input wire [15:0] b,
    output wire [15:0] sum
);
    wire [15:0] carry;
    genvar i;
    generate
        for (i = 0; i < 16; i = i + 1) begin : full_adders
            if (i == 0) begin
                add1 fa (
                    .a(a[i]),
                    .b(b[i]),
                    .cin(1'b0),
                    .sum(sum[i]),
                    .cout(carry[i])
                );
            end else begin
                add1 fa (
                    .a(a[i]),
                    .b(b[i]),
                    .cin(carry[i-1]),
                    .sum(sum[i]),
                    .cout(carry[i])
                );
            end
        end
    endgenerate
endmodule

module top_module (
    input wire [31:0] a,
    input wire [31:0] b,
    output wire [31:0] sum
);
    wire [15:0] sum_lower;
    wire [15:0] sum_upper;

    add16 add_lower (
        .a(a[15:0]),
        .b(b[15:0]),
        .sum(sum_lower)
    );

    add16 add_upper (
        .a(a[31:16]),
        .b(b[31:16]),
        .sum(sum_upper)
    );

    assign sum = {sum_upper, sum_lower};
endmodule
```