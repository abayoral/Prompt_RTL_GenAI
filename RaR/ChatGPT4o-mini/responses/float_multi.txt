```
module float_multi(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

reg [2:0] counter;
reg [23:0] a_mantissa, b_mantissa, z_mantissa;
reg [8:0] a_exponent, b_exponent, z_exponent;
reg a_sign, b_sign, z_sign;
reg [49:0] product;
reg guard_bit, round_bit, sticky;

always @(posedge clk or posedge rst) begin
    if (rst) begin
        counter <= 3'b000;
        z <= 32'b0;
        z_sign <= 1'b0;
        z_exponent <= 9'b0;
        z_mantissa <= 24'b0;
    end
    else begin
        case (counter)
            3'b000: begin  // Initialization Phase
                a_sign <= a[31];
                b_sign <= b[31];
                a_exponent <= a[30:23];
                b_exponent <= b[30:23];
                a_mantissa <= {1'b1, a[22:0]}; // Implicit leading 1
                b_mantissa <= {1'b1, b[22:0]}; // Implicit leading 1
                counter <= counter + 1;
            end
            
            3'b001: begin  // Special Case Handling Phase
                if (a_exponent == 255 || b_exponent == 255) begin
                    // Handle NaN or infinity
                    z <= (a_exponent == 255 && a_mantissa != 0) || 
                         (b_exponent == 255 && b_mantissa != 0) ? 32'h7FFFFFFF : 32'hFFFFFFFF; // NaN
                end
                else begin
                    counter <= counter + 1;
                end
            end
            
            3'b010: begin  // Multiplication Phase
                product = a_mantissa * b_mantissa;
                z_sign <= a_sign ^ b_sign;  // Result sign
                z_exponent <= a_exponent + b_exponent - 127; // Adjusted exponent
                counter <= counter + 1;
            end
            
            3'b011: begin  // Rounding and Adjustment Phase
                // Normalize product if necessary
                if (product[49]) begin
                    z_mantissa <= product[48:25]; // Shift right
                    z_exponent <= z_exponent + 1;
                end
                else begin
                    z_mantissa <= product[47:24];
                end
                
                // Rounding logic
                guard_bit = product[24];
                round_bit = product[23];
                sticky = |product[22:0];

                if (guard_bit && (round_bit || sticky || z_mantissa[0])) begin
                    z_mantissa = z_mantissa + 1;
                end
                counter <= counter + 1;
            end
            
            3'b100: begin  // Output Generation Phase
                z <= {z_sign, z_exponent[7:0], z_mantissa[22:1]}; // Create output in IEEE 754 format
                counter <= 3'b000; // Reset counter to start over
            end
        endcase
    end
end

endmodule
```