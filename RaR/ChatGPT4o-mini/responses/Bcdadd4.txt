```verilog
module top_module (
    input [15:0] a,        // 4-digit BCD input A
    input [15:0] b,        // 4-digit BCD input B
    input cin,             // carry-in
    output [15:0] sum,     // 4-digit BCD sum output
    output cout            // carry-out
);

    wire [3:0] s0, s1, s2, s3; // Sum outputs from each bcd_fadd
    wire c1, c2, c3;           // Intermediate carry-outs

    // First BCD adder for least significant digit
    bcd_fadd bcd0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(c1),
        .sum(s0)
    );

    // Second BCD adder for second least significant digit
    bcd_fadd bcd1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(c1),
        .cout(c2),
        .sum(s1)
    );

    // Third BCD adder for third least significant digit
    bcd_fadd bcd2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(c2),
        .cout(c3),
        .sum(s2)
    );

    // Fourth BCD adder for most significant digit
    bcd_fadd bcd3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(c3),
        .cout(cout),
        .sum(s3)
    );

    // Combine the partial sums to form the final output
    assign sum = {s3, s2, s1, s0};

endmodule
```