```
module width_8to16 (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    reg [7:0] data_buffer;
    reg data_received;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'b0;
            valid_out <= 1'b0;
            data_received <= 1'b0;
        end else begin
            if (valid_in) begin
                if (!data_received) begin
                    data_buffer <= data_in;
                    data_received <= 1'b1; // First 8-bit input received
                end else begin
                    data_out <= {data_buffer, data_in}; // Concatenate buffer with new input
                    valid_out <= 1'b1; // Valid output is set
                    data_received <= 1'b0; // Reset for the next 8-bit input
                end
            end else begin
                valid_out <= 1'b0; // Clear valid output if input is not valid
            end
        end
    end

endmodule
```