```verilog
module traffic_light (
    input wire rst_n,
    input wire clk,
    input wire pass_request,
    output reg [7:0] clock,
    output reg red,
    output reg yellow,
    output reg green
);

    typedef enum logic [1:0] {
        idle = 2'b00,
        s1_red = 2'b01,
        s2_yellow = 2'b10,
        s3_green = 2'b11
    } state_t;

    state_t state, next_state;
    reg [7:0] cnt;
    reg [7:0] green_time = 60;
    reg [7:0] yellow_time = 5;
    reg [7:0] red_time = 10;

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= idle;
            cnt <= 0;
        end else begin
            state <= next_state;
            if (state != next_state) begin
                cnt <= (next_state == s3_green) ? green_time : (next_state == s2_yellow) ? yellow_time : (next_state == s1_red) ? red_time : 0;
            end else if (cnt > 0) begin
                cnt <= cnt - 1;
            end
        end
    end

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            red <= 1;
            yellow <= 0;
            green <= 0;
            clock <= 0;
        end else begin
            case (state)
                s1_red: begin
                    red <= 1;
                    yellow <= 0;
                    green <= 0;
                end
                s2_yellow: begin
                    red <= 0;
                    yellow <= 1;
                    green <= 0;
                end
                s3_green: begin
                    red <= 0;
                    yellow <= 0;
                    green <= 1;
                end
                default: begin
                    red <= 1;
                    yellow <= 0;
                    green <= 0;
                end
            endcase
            clock <= cnt;
        end
    end

    always_ff @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            next_state <= idle;
        end else begin
            case (state)
                idle: begin
                    next_state <= s1_red;
                end
                s1_red: begin
                    if (cnt == 0) begin
                        next_state <= s2_yellow;
                    end else if (pass_request && cnt > 10) begin
                        cnt <= 10; // truncate to 10 cycles
                    end else begin
                        next_state <= s1_red;
                    end
                end
                s2_yellow: begin
                    if (cnt == 0) begin
                        next_state <= s3_green;
                    end else begin
                        next_state <= s2_yellow;
                    end
                end
                s3_green: begin
                    if (cnt == 0) begin
                        next_state <= s1_red;
                    end else begin
                        next_state <= s3_green;
                    end
                end
                default: next_state <= idle;
            endcase
        end
    end
endmodule
```