```verilog
module shift_register (
    input wire clk,
    input wire areset,
    input wire load,
    input wire ena,
    input wire [3:0] data,
    output reg [3:0] q
);

    always @(posedge clk or posedge areset) begin
        if (areset) begin
            q <= 4'b0000; // Asynchronous reset to zero
        end else if (load) begin
            q <= data; // Synchronous load operation
        end else if (ena) begin
            q <= {1'b0, q[3:1]}; // Right shift operation
        end
    end

endmodule
```