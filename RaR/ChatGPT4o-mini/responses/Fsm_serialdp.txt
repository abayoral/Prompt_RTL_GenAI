```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    reg [3:0] state, next_state;
    reg [3:0] bit_count;
    reg [7:0] received_data;
    wire odd_parity;
    reg reset_parity;

    // Instantiate the parity module
    parity parity_inst (
        .clk(clk),
        .reset(reset_parity),
        .in(in),
        .odd(odd_parity)
    );

    parameter IDLE = 4'b0000;
    parameter START_BIT = 4'b0001;
    parameter RECEIVE = 4'b0010;
    parameter CHECK_PARITY = 4'b0011;
    parameter CHECK_STOP = 4'b0100;
    
    // FSM State transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            out_byte <= 0;
            done <= 0;
            reset_parity <= 1;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                done = 0;  // Not done in idle
                reset_parity = 1; // Reset parity calculation
                if (in == 0) begin // Start bit detected
                    next_state = START_BIT;
                end
            end

            START_BIT: begin
                // Wait for the start bit to stabilize
                if (bit_count == 1) begin
                    next_state = RECEIVE;
                    bit_count = 0; // Reset bit count
                    reset_parity = 0; // Start counting parity
                end else begin
                    bit_count = bit_count + 1;
                end
            end

            RECEIVE: begin
                if (bit_count < 8) begin
                    // Shift in the received bit
                    received_data[bit_count] = in;
                    bit_count = bit_count + 1;
                end else begin
                    next_state = CHECK_PARITY;
                end
            end

            CHECK_PARITY: begin
                bit_count = 0; // Reset for the next operation
                if (odd_parity) begin // Check for odd parity
                    next_state = CHECK_STOP;
                end else begin
                    next_state = IDLE; // Invalid parity, go back to idle
                end
            end
            
            CHECK_STOP: begin
                if (in == 1) begin // Check for stop bit (expected high)
                    out_byte <= received_data; // Output the received byte
                    done <= 1; // Indicate byte received successfully
                    next_state = IDLE; // Go back to idle after done
                end else begin
                    next_state = IDLE; // Stop bit invalid, go back to idle
                end
            end
        endcase
    end
endmodule
```