```
module shift_register (
    input wire       clk,
    input wire       load,
    input wire       ena,
    input wire [1:0] amount,
    input wire [63:0] data,
    output reg [63:0] q
);

    always @(posedge clk) begin
        if (load) begin
            q <= data; // Load data into the shift register
        end
        else if (ena) begin
            case (amount)
                2'b00: begin // Left shift by 1
                    q <= {q[62:0], 1'b0};
                end
                2'b01: begin // Left shift by 8
                    q <= {q[55:0], 8'b0};
                end
                2'b10: begin // Arithmetic right shift by 1
                    q <= {q[63], q[63:1]}; // Preserve sign bit
                end
                2'b11: begin // Arithmetic right shift by 8
                    q <= {q[63], q[63:8]}; // Preserve sign bit for arithmetic
                end
                default: begin
                    q <= q; // No operation
                end
            endcase
        end
    end
endmodule
```