```
module keyboard_scancode_decoder (
    input wire [7:0] scancode,
    output reg [3:0] key_id,
    output reg valid
);
    always @(*) begin
        // Initialize output
        key_id = 4'b0000;
        valid = 1'b0;

        case (scancode)
            8'h0: begin key_id = 4'b0000; valid = 1'b1; end // Scancode for '0'
            8'h1: begin key_id = 4'b0001; valid = 1'b1; end // Scancode for '1'
            8'h2: begin key_id = 4'b0010; valid = 1'b1; end // Scancode for '2'
            8'h3: begin key_id = 4'b0011; valid = 1'b1; end // Scancode for '3'
            8'h4: begin key_id = 4'b0100; valid = 1'b1; end // Scancode for '4'
            8'h5: begin key_id = 4'b0101; valid = 1'b1; end // Scancode for '5'
            8'h6: begin key_id = 4'b0110; valid = 1'b1; end // Scancode for '6'
            8'h7: begin key_id = 4'b0111; valid = 1'b1; end // Scancode for '7'
            8'h8: begin key_id = 4'b1000; valid = 1'b1; end // Scancode for '8'
            8'h9: begin key_id = 4'b1001; valid = 1'b1; end // Scancode for '9'
            default: begin key_id = 4'b0000; valid = 1'b0; end // Invalid scancode
        endcase
    end
endmodule
```