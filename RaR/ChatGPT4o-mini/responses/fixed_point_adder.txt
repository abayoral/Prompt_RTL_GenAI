```verilog
module fixed_point_adder #(parameter Q = 16, N = 32) (
    input  [N-1:0] a,
    input  [N-1:0] b,
    output [N-1:0] c
);
    reg [N-1:0] res;
    
    always @(*) begin
        if (a[N-1] == b[N-1]) begin
            // Same sign, perform addition
            res = a + b;
            // Check for overflow
            if (res[N-1] != a[N-1]) begin
                // Handle overflow (set to max or min based on sign)
                res = a[N-1] ? {1'b1, {N-1{1'b0}}} : {1'b0, {N-1{1'b1}}};
            end
        end else begin
            // Different sign, perform subtraction
            if (a[N-1] == 1'b0 && b[N-1] == 1'b1) begin
                // a is positive, b is negative (a - (-b) => a + abs(b))
                res = a + {~b[N-1:N-1], b[N-2:0]}; // Absolute value of b
            end else if (a[N-1] == 1'b1 && b[N-1] == 1'b0) begin
                // a is negative, b is positive (-(abs(a)) + b)
                res = {~a[N-1:N-1], a[N-2:0]} + b; // Absolute value of a
            end else begin
                // Both are negative or positive (add absolute values)
                res = (a[N-1] ? ~a + 1 : a) - (b[N-1] ? ~b + 1 : b);
            end
        end
    end
    
    assign c = res;

endmodule
```