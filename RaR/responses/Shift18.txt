```verilog
module shift_register_64bit (
    input wire clk,
    input wire load,
    input wire ena,
    input wire [1:0] amount,
    input wire [63:0] data,
    output reg [63:0] q
);
    always @(posedge clk) begin
        if (load) begin
            // Load new data into register
            q <= data;
        end
        else if (ena) begin
            case (amount)
                2'b00: begin
                    // Shift left by 1
                    q <= {q[62:0], 1'b0};
                end
                2'b01: begin
                    // Shift left by 8
                    q <= {q[55:0], 8'b0};
                end
                2'b10: begin
                    // Arithmetic shift right by 1
                    q <= {q[63], q[63:1]};
                end
                2'b11: begin
                    // Arithmetic shift right by 8
                    q <= { {8{q[63]}}, q[63:8] };
                end
                default: begin
                    // Default case: Do nothing
                end
            endcase
        end
    end
endmodule
```