```verilog
module top_module(
    input clk,
    input reset,  // Synchronous reset
    input rx,     // Serial data input
    output reg done, // Asserted if a byte is received correctly with odd parity
    output reg [7:0] data // Received byte data
);

    // States
    localparam IDLE = 0, START = 1, RECEIVE = 2, STOP = 3, DONE = 4;
    reg [2:0] state, next_state;
    reg [3:0] bit_count; // To count the number of bits received
    
    // Parity checker instance
    wire odd_parity;
    reg parity_reset;
    parity u_parity (
        .clk(clk), .reset(parity_reset), .in(rx), .odd(odd_parity)
    );

    // FSM
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            data <= 8'b0;
            done <= 0;
            parity_reset <= 1;
        end else begin
            state <= next_state;
            if (state == RECEIVE) bit_count <= bit_count + 1;
            else bit_count <= 0;
            if (state == RECEIVE && bit_count < 8)
                data[bit_count] <= rx;
            if (state == DONE) 
                done <= 1;
            else 
                done <= 0;

            if (state != RECEIVE) 
                parity_reset <= 1;
            else if (bit_count < 9)
                parity_reset <= 0;
        end
    end

    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                if (!rx) // Detect start bit (0)
                    next_state = START;
            end
            START: begin
                if (bit_count == 1) // Ensure stable start bit 
                    next_state = RECEIVE;
            end
            RECEIVE: begin
                if (bit_count == 9) // After 8 data bits + 1 parity bit
                    next_state = STOP;
            end
            STOP: begin
                if (rx) // Stop bit should be 1
                    next_state = (odd_parity ? DONE : IDLE);
            end
            DONE: begin
                next_state = IDLE;
            end
        endcase
    end
endmodule
```