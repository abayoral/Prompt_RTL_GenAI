```verilog
module freq_divbyodd #(parameter integer NUM_DIV = 5)(
    input wire clk,
    input wire rst_n,
    output reg clk_div
);
    // Check if NUM_DIV is a valid odd integer
    initial begin
        if (NUM_DIV < 3 || NUM_DIV % 2 == 0) begin
            $fatal("NUM_DIV must be an odd integer greater than or equal to 3.");
        end
    end

    // Counter registers
    reg [31:0] cnt1;
    reg [31:0] cnt2;
    // Clock division signals
    reg clk_div1;
    reg clk_div2;

    // Counter and clock division logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 0;
        end else begin
            if (cnt1 == (NUM_DIV - 1) / 2) begin
                cnt1 <= 0;
                clk_div1 <= ~clk_div1;
            end else begin
                cnt1 <= cnt1 + 1;
            end
        end
    end

    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 0;
        end else begin
            if (cnt2 == (NUM_DIV - 1) / 2) begin
                cnt2 <= 0;
                clk_div2 <= ~clk_div2;
            end else begin
                cnt2 <= cnt2 + 1;
            end
        end
    end

    // Output clock division
    always @* begin
        clk_div = clk_div1 | clk_div2;
    end

endmodule
```

This Verilog module implements the specified behavior, dividing an input clock frequency by an odd integer using two counters. The module resets under an active-low reset condition, initializes counters, balances the toggling of intermediary signals, and outputs the frequency divided clock. Additionally, the initial block ensures `NUM_DIV` is a valid odd integer, which is a crucial validation step.