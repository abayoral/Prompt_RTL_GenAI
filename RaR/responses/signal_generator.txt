```verilog
module signal_generator (
    input wire clk,         // Clock signal
    input wire rst_n,       // Active-low reset signal
    output reg [4:0] wave   // 5-bit output wave signal
);

    // State register: 0 for increasing, 1 for decreasing
    reg state;

    // Always block to handle synchronous logic with clock and reset
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // Reset all registers to initial state
            wave <= 5'b0; // Reset wave to 0
            state <= 1'b0; // Reset state to increasing (0)
        end
        else begin
            if (state == 1'b0) begin
                // Increment phase
                if (wave == 5'd31) begin
                    state <= 1'b1; // Switch to decrementing
                end
                else begin
                    wave <= wave + 1; // Increment wave
                end
            end
            else begin
                // Decrement phase
                if (wave == 5'd0) begin
                    state <= 1'b0; // Switch to incrementing
                end
                else begin
                    wave <= wave - 1; // Decrement wave
                end
            end
        end
    end

endmodule
```