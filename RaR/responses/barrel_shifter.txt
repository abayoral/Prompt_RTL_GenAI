```verilog
module barrel_shifter (
    input [7:0] in,
    input [2:0] ctrl,
    output [7:0] out
);
    wire [7:0] stage1, stage2;

    // Shift by 1 bit if ctrl[0] is high
    assign stage1[0] = ctrl[0] ? in[7] : in[0];
    assign stage1[1] = ctrl[0] ? in[0] : in[1];
    assign stage1[2] = ctrl[0] ? in[1] : in[2];
    assign stage1[3] = ctrl[0] ? in[2] : in[3];
    assign stage1[4] = ctrl[0] ? in[3] : in[4];
    assign stage1[5] = ctrl[0] ? in[4] : in[5];
    assign stage1[6] = ctrl[0] ? in[5] : in[6];
    assign stage1[7] = ctrl[0] ? in[6] : in[7];
    
    // Shift by 2 bits if ctrl[1] is high
    assign stage2[0] = ctrl[1] ? stage1[6] : stage1[0];
    assign stage2[1] = ctrl[1] ? stage1[7] : stage1[1];
    assign stage2[2] = ctrl[1] ? stage1[0] : stage1[2];
    assign stage2[3] = ctrl[1] ? stage1[1] : stage1[3];
    assign stage2[4] = ctrl[1] ? stage1[2] : stage1[4];
    assign stage2[5] = ctrl[1] ? stage1[3] : stage1[5];
    assign stage2[6] = ctrl[1] ? stage1[4] : stage1[6];
    assign stage2[7] = ctrl[1] ? stage1[5] : stage1[7];
    
    // Shift by 4 bits if ctrl[2] is high
    assign out[0] = ctrl[2] ? stage2[4] : stage2[0];
    assign out[1] = ctrl[2] ? stage2[5] : stage2[1];
    assign out[2] = ctrl[2] ? stage2[6] : stage2[2];
    assign out[3] = ctrl[2] ? stage2[7] : stage2[3];
    assign out[4] = ctrl[2] ? stage2[0] : stage2[4];
    assign out[5] = ctrl[2] ? stage2[1] : stage2[5];
    assign out[6] = ctrl[2] ? stage2[2] : stage2[6];
    assign out[7] = ctrl[2] ? stage2[3] : stage2[7];

endmodule
```