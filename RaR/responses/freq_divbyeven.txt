```verilog
module freq_diveven #(
    parameter NUM_DIV = 4  // Ensure NUM_DIV is an even number
)(
    input wire clk,       // Input clock signal
    input wire rst_n,     // Active-low reset signal
    output reg clk_div    // Output divided clock signal
);

    // Calculate the number of bits required for the counter based on NUM_DIV
    localparam COUNTER_WIDTH = 4;

    // Counter register to keep track of clock cycles
    reg [COUNTER_WIDTH-1:0] cnt;

    // Always block to handle clock and reset
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // Reset the counter and clk_div outputs when reset is active
            cnt <= 0;
            clk_div <= 0;
        end else begin
            if (cnt == (NUM_DIV / 2) - 1) begin
                // When the counter reaches half of NUM_DIV - 1, toggle clk_div and reset cnt
                clk_div <= ~clk_div;
                cnt <= 0;
            end else begin
                // Otherwise, increment the counter
                cnt <= cnt + 1;
            end
        end
    end

endmodule
```

This Verilog code implements a frequency divider module `freq_diveven` that reduces the frequency of the input clock `clk` by an even division factor specified by the `NUM_DIV` parameter. The module uses a 4-bit counter `cnt` to track the number of input clock cycles and toggle the `clk_div` output signal when half of `NUM_DIV` cycles are reached, effectively halving the input frequency. The `rst_n` signal resets the timer and output clock division signal to zero.