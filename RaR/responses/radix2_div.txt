```verilog
module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid, 
    output reg [15:0] result
);

    reg [15:0] shift_reg;
    reg [3:0] cnt;
    reg start_cnt;
    wire [8:0] subtraction;
    wire carry_out;

    // Compute two's complement NEG_DIVISOR if needed
    wire [8:0] NEG_DIVISOR = sign ? {-divisor[7], ~divisor + 1} : {1'b0, divisor};

    // Prepare dividend based on signed or unsigned operation
    wire [8:0] prepared_dividend = sign ? {-dividend[7], dividend} : {1'b0, dividend};

    // Compute subtraction
    assign subtraction = shift_reg[15:8] - NEG_DIVISOR;
    assign carry_out = ~subtraction[8]; // Check if subtraction was successful (no borrow)

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            result <= 0;
            cnt <= 0;
            start_cnt <= 0;
            shift_reg <= 0;
        end else begin
            if (opn_valid && !start_cnt) begin
                // Initialize operation
                start_cnt <= 1;
                cnt <= 0;
                shift_reg <= {prepared_dividend[7:0], 8'b0}; // Left-shifted by 8 bits
                res_valid <= 0;
            end else if (start_cnt) begin
                if (cnt == 8) begin
                    // End of division, store results
                    start_cnt <= 0;
                    res_valid <= 1;
                    // If signed, adjust quotient's sign
                    if (sign && (dividend[7] ^ divisor[7])) begin
                        // If only one is negative, negate the quotient
                        result[7:0] <= -shift_reg[7:0];
                    end else begin
                        result[7:0] <= shift_reg[7:0];
                    end
                    result[15:8] <= shift_reg[15:8]; // Remainder
                end else begin
                    // Perform the division iteration
                    cnt <= cnt + 1;
                    shift_reg <= {subtraction[7:0], shift_reg[7:0]} << 1;
                    shift_reg[0] <= carry_out;
                end
            end else begin
                res_valid <= 0;
            end
        end
    end

endmodule
```
