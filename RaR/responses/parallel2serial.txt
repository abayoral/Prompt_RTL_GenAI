```verilog
module parallel2serial (
    input wire clk,
    input wire rst_n,
    input wire [3:0] d,
    output reg valid_out,
    output reg dout
);

    reg [1:0] cnt; // 2-bit counter to keep track of the current bit being serialized

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // Reset condition
            cnt <= 2'b00;
            valid_out <= 1'b0;
            dout <= 1'b0;
        end else begin
            case (cnt)
                2'b00: begin
                    dout <= d[3]; // Most significant bit (MSB)
                    valid_out <= 1'b1;
                    cnt <= 2'b01;
                end
                2'b01: begin
                    dout <= d[2];
                    cnt <= 2'b10;
                end
                2'b10: begin
                    dout <= d[1];
                    cnt <= 2'b11;
                end
                2'b11: begin
                    dout <= d[0]; // Least significant bit (LSB)
                    cnt <= 2'b00; // Reset counter to start next sequence
                end
            endcase
        end
    end

endmodule
```
