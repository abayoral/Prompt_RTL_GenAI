```verilog
module clock_12hour(
    input wire clk,
    input wire ena,
    input wire reset,
    output reg pm,
    output reg [3:0] hh_tens,
    output reg [3:0] hh_units,
    output reg [3:0] mm_tens,
    output reg [3:0] mm_units,
    output reg [3:0] ss_tens,
    output reg [3:0] ss_units
);

// Initial conditions
initial begin
    hh_tens = 1;
    hh_units = 2;
    mm_tens = 0;
    mm_units = 0;
    ss_tens = 0;
    ss_units = 0;
    pm = 0; // AM
end

always @(posedge clk or posedge reset) begin
    if (reset) begin
        // Reset to 12:00:00 AM
        hh_tens <= 1;
        hh_units <= 2;
        mm_tens <= 0;
        mm_units <= 0;
        ss_tens <= 0;
        ss_units <= 0;
        pm <= 0; // AM
    end else if (ena) begin
        // Increment seconds
        if (ss_units == 9) begin
            ss_units <= 0;
            if (ss_tens == 5) begin
                ss_tens <= 0;
                // Increment minutes
                if (mm_units == 9) begin
                    mm_units <= 0;
                    if (mm_tens == 5) begin
                        mm_tens <= 0;
                        // Increment hours
                        if (hh_units == 9 || (hh_tens == 1 && hh_units == 2)) begin
                            hh_tens <= 0;
                            hh_units <= 1;
                            // Toggle PM/AM at transition from 11:59 to 12:00
                            pm <= ~pm;
                        end else if (hh_units == 8 && hh_tens == 0) begin
                            hh_units <= 9;
                        end else if (hh_units == 9 && hh_tens == 0) begin
                            hh_units <= 0;
                            hh_tens <= 1;
                        end else begin
                            hh_units <= hh_units + 1;
                        end
                    end else begin
                        mm_tens <= mm_tens + 1;
                    end
                end else begin
                    mm_units <= mm_units + 1;
                end
            end else begin
                ss_tens <= ss_tens + 1;
            end
        end else begin
            ss_units <= ss_units + 1;
        end
    end
end

endmodule
```