```verilog
module fixed_point_adder #(parameter Q = 8, parameter N = 16) (
    input signed [N-1:0] a,
    input signed [N-1:0] b,
    output reg [N-1:0] c
);

    reg [N-1:0] abs_a;
    reg [N-1:0] abs_b;
    reg [N:0] extended_res; // Use N+1 bits to detect overflow
    wire same_sign;
    
    assign same_sign = a[N-1] == b[N-1];

    always @(*) begin
        // Determine absolute values for a and b
        abs_a = a[N-1] ? -a : a;
        abs_b = b[N-1] ? -b : b;

        if (same_sign) begin
            // Both numbers have the same sign: perform addition
            extended_res = {1'b0, abs_a} + {1'b0, abs_b};
            if (extended_res[N] != extended_res[N-1]) begin
                // Overflow, clamp the result
                c = extended_res[N-1] ? {1'b1, {(N-1){1'b0}}} : {1'b0, {(N-1){1'b1}}};
            end else begin
                // Maintain sign from input operands
                c = a[N-1] ? -extended_res[N-1:0] : extended_res[N-1:0];
            end
        end else begin
            // Numbers have different signs: perform subtraction
            if (abs_a >= abs_b) begin
                extended_res = abs_a - abs_b;
                c = a[N-1] ? -extended_res[N-1:0] : extended_res[N-1:0];
            end else begin
                extended_res = abs_b - abs_a;
                c = b[N-1] ? -extended_res[N-1:0] : extended_res[N-1:0];
            end
        end
    end

endmodule
```

This module implements a fixed-point adder with support for the specified precision and overflow checks while distinguishing the operations based on the sign of the inputs. The `res` register captures intermediate results, and the computation handles absolute value operations to determine the appropriate arithmetic action based on operand signs.