```verilog
module pulse_detect (
    input wire clk,
    input wire rst_n,
    input wire data_in,
    output reg data_out
);

    // State encoding
    typedef enum reg [1:0] {
        IDLE = 2'b00,
        PULSE_START = 2'b01,
        PULSE_END = 2'b10
    } state_t;
    
    state_t state, next_state;

    // Sequential logic to manage state transitions
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= IDLE; // Reset state
            data_out <= 0;
        end else begin
            state <= next_state; // Move to next state
            data_out <= (state == PULSE_END); // Data out high when completing pulse
        end
    end

    // Combinational logic to determine the next state
    always @(*) begin
        next_state = state; // Default next state is the current state
        case (state)
            IDLE: begin
                if (data_in) // Look for rising edge
                    next_state = PULSE_START;
            end
            PULSE_START: begin
                if (!data_in) // Look for falling edge
                    next_state = PULSE_END;
            end
            PULSE_END: begin
                // Prepare to return to idle and set data_out high
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

endmodule
```

This module correctly implements the required functionality for pulse detection as specified. The state machine transitions through `IDLE`, `PULSE_START`, and `PULSE_END` states to detect a high-to-low pulse, ensuring `data_out` is asserted during the completion of the pulse detection.