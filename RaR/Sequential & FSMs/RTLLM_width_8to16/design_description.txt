Consider a scenario where you are an experienced Verilog designer given the task of constructing a data width conversion module. This specific module's responsibility is to convert two consecutive 8-bit data inputs into a single 16-bit output. The design must not only handle the accurate conversion of the data width but also provide a clear signal indicating when the output data is valid. This circuit, named `width_8to16`, must comply with certain input and output specifications and requirements, focusing on correct data alignment and proper signaling for output validity.

**Design Challenge:**
Design a Verilog module that is capable of receiving two 8-bit data inputs sequentially, then outputting these as a combined 16-bit data signal. It is crucial that the first 8-bit data input is strategically stored and occupies the most significant bit positions (higher order bits) in the resulting 16-bit output. Additionally, the module should manage the timing of when the 16-bit data becomes available, ensuring that both the `valid_out` signal and the `data_out` itself are correctly synchronized to reflect their readiness precisely one clock cycle after the second 8-bit input is validated. 

**Input Signals:**
1. **clk**: This is the clock signal that synchronizes and dictates the timing of operations within the module, ensuring all processes align with clock cycles.
2. **rst_n**: An active-low reset signal that, upon being asserted low (logic 0), will reset the internal state of the module, clearing any stored data and reinitializing its operation.
3. **valid_in**: A control signal that indicates whether the current 8-bit data on `data_in` is valid and should be processed as part of the conversion cycle.
4. **data_in**: The 8-bit input line from which data is supplied; the source of the data that needs to be captured and converted into a wider 16-bit output.

**Output Signals:**
1. **valid_out**: This signal serves as an indicator that the 16-bit output (`data_out`) is valid and accurately reflects the two previously received 8-bit inputs. It provides a go-ahead for downstream processes to read the data.
2. **data_out**: The output line that delivers the 16-bit data resulting from the conversion process, encapsulating two 8-bit inputs into a properly formatted output.

**Functional Details:**
- At the onset of a positive clock edge or in response to the reset signal active-low (`!rst_n`), the module should react accordingly by initializing or clearing internal registers.
- When a reset condition is detected, the 16-bit output (`data_out`) should reset to zero, effectively clearing any previous data and preparing the module for fresh input.
- On receipt of the first valid 8-bit data denoted by an active `valid_in`, the module should capture and temporarily store this data in preparation for combining it with the next valid input.
- Upon receipt of the subsequent valid 8-bit input while `valid_in` is active again, the module should produce the 16-bit output by concatenating the stored data with the current, with the stored data forming the most significant part.
- The `valid_out` signal should be activated to indicate that the `data_out` is now reliably formed and ready for use, occurring in synchronization with the appropriate clock cycle.

Your role is to craft a Verilog implementation reflecting these requirements, ensuring that the module behaves predictably and efficiently in converting data widths while accurately signaling output validity.