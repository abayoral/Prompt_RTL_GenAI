Can you, using your expertise as an experienced Verilog designer, draft the entire Verilog code for a module named `freq_diveven`? This module's primary purpose is to function as a frequency divider that scales down an input clock signal by dividing it by specific even numbers. The key mechanism of this module is to produce a clock output with a lower frequency by changing its state only after a predetermined count of input cycles, governed by a parameter labeled `NUM_DIV`. Below are detailed requirements and specifications for the design that need to be considered:

Input Ports:
- `clk`: This is the incoming clock signal which is to be divided by the module.
- `rst_n`: This is an active-low reset signal, tasked with initializing or resetting the module's internal states whenever needed.

Output Ports:
- `clk_div`: This is the resulting output clock signal with a lower frequency, obtained after the input clock is divided by the specified even number.

Implementation Details:
- The module should include a counter (`cnt`) which monitors and counts the cycles of the input clock.
- The parameter `NUM_DIV` dictates the division ratio, and it is specified to be an even number for the purposes of this module.
- When the reset signal (`rst_n`) is asserted low, it is expected that both the counter and `clk_div` signal should be reset to zero, clearing any previous state.
- For each rising edge of the input clock (`clk`), if the counter's value is below half of `NUM_DIV - 1`, the counter should increment, but this should occur without changing the state of the `clk_div` output.
- When the counter completes its defined cycle, as dictated by the `NUM_DIV` value, it should reset to zero, allowing the `clk_div` output to toggle state, thereby achieving the reduction in frequency as required by the even division.

Additional Consideration:
- The counter must be designed as a 4-bit register (`cnt`) that keeps track of the number of input clock cycles up to the specified threshold.

Given these functional requirements and conditions, could you please write a thorough and structured Verilog implementation for the `freq_diveven` module, ensuring compliance with the described design and operational criteria?