As a professional Verilog designer, you are tasked with developing a Verilog module focused on efficiently accumulating serial input data and producing an output when a predefined condition is achieved. The goal of this module is to manage the processing of input data in a systematic and synchronized manner while adhering to specific design requirements. Below are detailed specifications and expectations for your implementation of this module, which is denoted as "accu."

1. **Module Name**: The designated name for this Verilog module is "accu," reflecting its primary function of data accumulation within the project's larger context.

2. **Input Ports**:
   - **clk**: This input serves as the clock signal, essential for dictating the timing and synchronization of all operations within the module. Every clock cycle is a critical reference point for processing tasks.
   - **rst_n**: An active-low reset input signal, denoted with an underscore '_n' to emphasize its active-low nature. When this reset is de-asserted, it initializes and restores the module to a default state, ensuring all previous operations are cleared and ready for upcoming processes.
   - **data_in[7:0]**: An 8-bit wide data bus that serves as the input channel through which data is serially fed into the module for accumulation. Each 8-bit value is treated as an unsigned integer for calculation purposes.
   - **valid_in**: A control signal that, when asserted, confirms the current data present on the `data_in` bus is available and suitable for processing by the module. It enables the module to register the data on the rising edge of the clock signal.

3. **Output Ports**:
   - **valid_out**: An output signal that is asserted (logic high) when the module successfully accumulates four pieces of valid input data. This condition triggers the output process, marking the accumulated result as ready for use. The `valid_out` signal remains high for only one clock cycle, signaling the moment when the output is valid.
   - **data_out[9:0]**: A 10-bit wide output bus that delivers the accumulated sum derived from the four sequential 8-bit input data values. The width of this bus is chosen to handle the maximum potential accumulation outcome (four times the maximum 8-bit number).

4. **Implementation Requirements**:
   - **Synchronous Operation**: Ensure all internal operations, including data acquisition and output preparation, are synchronized with the `clk` signal, maintaining orderly processing and signal consistency within each clock cycle.
   - **Reset Behavior**: Design the module to respond to the activation of `rst_n` (active-low) by clearing internal registers and resetting any active outputs, thus preventing any previous operations from affecting future output validity.
   - **Data Accumulation**: Upon detecting an active `valid_in`, the module should add the current `data_in` value to an internal accumulation register. The accumulation process should continue until four valid inputs have been successfully accumulated, with each valid input triggering an additive cycle.
   - **Condition for Output**: Only when the module collects four consecutive valid inputs should the `data_out` reflect the accumulated sum, with `valid_out` toggling high for one clock cycle specifically to mark this state of readiness.
   - **Interim State Handling**: Ensure that the module suppresses any output until the condition of four valid data inputs is met, thus maintaining the integrity and reliability of data transmission post-accumulation.

With this expanded understanding of the requirements and behaviors, your task is to craft a comprehensive Verilog module that complies with these specifications, optimizing its operation and ensuring accurate functionality according to the described conditions.