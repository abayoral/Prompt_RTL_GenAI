As a Verilog designer specializing in creating hardware modules, you have been tasked with designing an asynchronous FIFO (First-In, First-Out) buffer that offers flexibility in terms of bit width and storage depth. The core functionality of this FIFO buffer includes managing data flow efficiently between two different clock domains without them being synchronizedâ€”a critical feature in various digital systems where different parts operate on separate clocks.

To achieve this, the FIFO will be composed of several integral components, all implemented in Verilog:

1. **Dual-Port RAM Module**: This is the primary storage element where data is held. It should be implemented as a submodule within the FIFO. The RAM module must feature separate interfaces for read and write operations, allowing independent access from the two clock domains involved. It requires various input signals, including:
   - Write clock (`wclk`): The clock signal governing the write operations.
   - Write enable (`wenc`): A control signal to enable data writing.
   - Write address (`waddr`): The address indicating where to store the incoming data.
   - Write data (`wdata`): The data to be stored in the RAM.
   - Read clock (`rclk`): The clock signal governing read operations.
   - Read enable (`renc`): A control signal to enable reading of data.
   - Read address (`raddr`): The address that determines from which location to fetch stored data.
   Furthermore, the RAM module should output the read data (`rdata`), which should be registered for stability and proper timing.

2. **Control Logic**: Your design will need two controllers:
   - **Data Write Controller**: Manages the logic for writing data into the FIFO, handling the necessary signals to the dual-port RAM for the writing process.
   - **Data Read Controller**: Similarly, it manages reading data out of the FIFO, coordinating access to the dual-port RAM on the read side.

3. **Pointer Synchronization**: This involves the creation of two pointer synchronizers:
   - A synchronizer for the read pointer, using the write clock domain.
   - A synchronizer for the write pointer, using the read clock domain.
   These synchronizers are crucial for ensuring that data is read and written correctly between asynchronous clock domains, effectively mitigating issues related to metastability.

4. **Empty and Full Logic using Gray Codes**: The implementation should utilize Gray code for pointer operations, which minimizes the chance of timing errors (race conditions) during clock transitions. For addressing a FIFO with a depth of 8, convert Gray-coded pointers to binary when accessing the RAM for reads and writes. Determine the FIFO's 'empty' status when read and write pointers are the same, and 'full' when they differ only in the most significant bit, with all other bits being identical.

For the primary `asyn_fifo` module, a set of input and output signals must be defined:
- Inputs:
  - Write clock signal (`wclk`)
  - Read clock signal (`rclk`)
  - Write reset signal (`wrstn`) and read reset signal (`rrstn`) for resetting the respective domains.
  - Write increment signal (`winc`) and read increment signal (`rinc`) for advancing the read and write pointers.
  - Data inputs (`wdata`) signifying what is being added to the FIFO.

- Outputs:
  - A write full flag (`wfull`) indicates when the FIFO cannot accept any more data.
  - A read empty flag (`rempty`) shows when there is no data to be read from the FIFO.
  - The read data (`rdata`), reflecting what is fetched from the FIFO.

Parameters like `WIDTH` (the bit width of data elements) and `DEPTH` (the number of entries in the FIFO) should be adjustable. By default, set these to 8 bits and 16 entries respectively, allowing for customization based on specific application needs.

Ensure that your solution incorporates effective clock domain crossing techniques, accurately updates pointers, utilizes Gray code to binary translations for addressing, and fully supports the configurable nature of the FIFO. This design must guarantee robust and reliable data handling between mismatched clock domains in various digital circuit applications.