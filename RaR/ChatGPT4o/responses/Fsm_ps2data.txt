```verilog
module ps2_packet_parser(
    input clk,
    input reset,
    input [7:0] in_byte,
    input byte_received,
    output reg [23:0] out_bytes,
    output reg done
);

    // State encoding
    typedef enum reg [1:0] {
        WAIT_FOR_START = 2'b00,
        BYTE_1_RECV = 2'b01,
        BYTE_2_RECV = 2'b10
    } state_t;
    
    reg state_t current_state, next_state;
    reg [23:0] shift_reg;  // To hold the 3-byte message
    
    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= WAIT_FOR_START;
            shift_reg <= 24'd0;
            done <= 1'b0;
        end else begin
            current_state <= next_state;
            if (byte_received) begin
                case (next_state)
                    WAIT_FOR_START: shift_reg <= {16'd0, in_byte};
                    BYTE_1_RECV: shift_reg <= {shift_reg[15:0], in_byte};
                    BYTE_2_RECV: shift_reg <= {shift_reg[15:0], in_byte};
                endcase
            end
            if (next_state == WAIT_FOR_START) begin
                done <= (current_state == BYTE_2_RECV) && byte_received;
            end else begin
                done <= 1'b0;
            end
        end
    end
    
    // Next state logic
    always @(*) begin
        case (current_state)
            WAIT_FOR_START: begin
                if (byte_received && in_byte[3] == 1) begin
                    next_state = BYTE_1_RECV;
                end else begin
                    next_state = WAIT_FOR_START;
                end
            end
            BYTE_1_RECV: begin
                if (byte_received) begin
                    next_state = BYTE_2_RECV;
                end else begin
                    next_state = BYTE_1_RECV;
                end
            end
            BYTE_2_RECV: begin
                if (byte_received) begin
                    next_state = WAIT_FOR_START;
                end else begin
                    next_state = BYTE_2_RECV;
                end
            end
            default: begin
                next_state = WAIT_FOR_START;
            end
        endcase
    end
    
    // Output logic
    always @(posedge clk) begin
        if (done) begin
            out_bytes <= shift_reg;
        end
    end

endmodule
```

This Verilog module defines a finite state machine that identifies the start of a 3-byte message by detecting when the most significant 3rd bit of the incoming data byte is high. The module contains a shift register to store the bytes and asserts the `done` signal when a complete 3-byte message is detected, thereby outputting the complete message via `out_bytes`. The synchronous reset allows the module to start in the `WAIT_FOR_START` state, ensuring that the FSM correctly identifies the beginning of a new message after a reset.