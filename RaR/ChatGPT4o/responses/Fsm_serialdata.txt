```verilog
module Fsm_serial (
    input wire clk,
    input wire reset,
    input wire in,           // Serial data input
    output reg [7:0] out_byte, // Parallel data output
    output reg done          // Done signal
);

    // State encoding
    typedef enum reg [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        WAIT_STOP = 3'b100
    } state_t;

    reg [2:0] current_state, next_state;
    reg [3:0] bit_count; // Counter for the number of data bits received
    reg [7:0] shift_reg; // Shift register to store incoming data bits

    // State transition
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic and datapath operations
    always @(*) begin
        // Default assignments
        next_state = current_state;
        done = 1'b0;

        case (current_state)
            IDLE: begin
                if (in == 1'b0) // Detected start bit
                    next_state = START;
            end
            START: begin
                if (in == 1'b0)
                    next_state = DATA;
                else
                    next_state = IDLE; // False start bit, return to IDLE
            end
            DATA: begin
                if (bit_count == 4'd8)
                    next_state = STOP;
            end
            STOP: begin
                if (in == 1'b1) begin
                    next_state = IDLE;
                    done = 1'b1;
                end else begin
                    next_state = WAIT_STOP; // Stop bit error, wait for correct stop
                end
            end
            WAIT_STOP: begin
                if (in == 1'b1)
                    next_state = IDLE; // Wait for a valid stop bit
            end
            default: next_state = IDLE;
        endcase
    end

    // Sequential logic for the datapath
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            bit_count <= 4'b0000;
            shift_reg <= 8'b00000000;
            out_byte <= 8'bxxxx_xxxx; // Don't care value
        end else begin
            case (current_state)
                START: begin
                    bit_count <= 4'b0000;
                end
                DATA: begin
                    shift_reg <= {in, shift_reg[7:1]}; // Shift right, LSB first
                    bit_count <= bit_count + 1;
                end
                STOP: begin
                    if (in == 1'b1) // Valid stop bit received
                        out_byte <= shift_reg;
                end
                default: begin
                    // Maintain current values in other states
                end
            endcase
        end
    end

endmodule
```