```verilog
module float_multi (
    input wire clk,
    input wire rst,
    input wire [31:0] a,
    input wire [31:0] b,
    output reg [31:0] z
);

    // Cycle Control
    reg [2:0] counter;

    // Component Extraction
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [9:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;

    // Intermediate Calculations
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;

    // Parameters
    parameter BIAS = 127;

    integer i;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            // Initialization Phase
            z <= 0;
            counter <= 0;
            a_mantissa <= 0;
            b_mantissa <= 0;
            a_exponent <= 0;
            b_exponent <= 0;
            a_sign <= 0;
            b_sign <= 0;
        end else begin
            case (counter)
                3'd0: begin
                    // Input Processing Phase
                    a_sign <= a[31];
                    b_sign <= b[31];
                    a_exponent <= {2'b0, a[30:23]};
                    b_exponent <= {2'b0, b[30:23]};
                    a_mantissa <= {1'b1, a[22:0]};
                    b_mantissa <= {1'b1, b[22:0]};
                    z_sign <= a_sign ^ b_sign;
                    counter <= 3'd1;
                end
                3'd1: begin
                    // Special Case Handling Phase
                    if ((a_exponent == 0) || (b_exponent == 0)) begin
                        z <= 32'b0; // Zero
                        counter <= 3'd7;
                    end else if (a_exponent == 255) begin
                        z <= a[22:0] == 0 ? {a_sign, 8'd255, 23'b0} : 32'h7FC00000; // Inf or NaN
                        counter <= 3'd7;
                    end else if (b_exponent == 255) begin
                        z <= b[22:0] == 0 ? {b_sign, 8'd255, 23'b0} : 32'h7FC00000; // Inf or NaN
                        counter <= 3'd7;
                    end else begin
                        z_exponent <= a_exponent + b_exponent - BIAS;
                        counter <= 3'd2;
                    end
                end
                3'd2: begin
                    // Multiplication Phase
                    product <= a_mantissa * b_mantissa;
                    // Normalization Phase
                    if (product[47] == 1) begin
                        z_mantissa <= product[47:24];
                        z_exponent <= z_exponent + 1;
                        guard_bit <= product[23];
                        round_bit <= product[22];
                        sticky <= |product[21:0];
                    end else begin
                        z_mantissa <= product[46:23];
                        guard_bit <= product[22];
                        round_bit <= product[21];
                        sticky <= |product[20:0];
                    end
                    counter <= 3'd3;
                end
                3'd3: begin
                    // Rounding and Adjustment Phase
                    if (guard_bit && (round_bit || sticky || z_mantissa[0])) begin
                        z_mantissa <= z_mantissa + 1;
                    end
                    if (z_mantissa[23] == 1) begin
                        z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                    end else begin
                        z <= {z_sign, z_exponent[7:0] - 1, z_mantissa[22:0]};
                    end
                    counter <= 3'd7;
                end
                3'd7: begin
                    // Reset phase
                    counter <= 3'd0;
                end
            endcase
        end
    end

endmodule
```
