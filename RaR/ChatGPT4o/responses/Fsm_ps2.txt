```verilog
module ps2_mouse_fsm (
    input wire clk,          // Clock input
    input wire reset,        // Synchronous reset input
    input wire [7:0] in,     // 8-bit input data from PS/2 mouse
    output reg done          // Signal asserted for one clock cycle when a full message is received
);
    // State Encoding
    typedef enum reg [1:0] {
        IDLE    = 2'b00,  // Wait for the start of a message
        BYTE1   = 2'b01,  // Process first byte 
        BYTE2   = 2'b10,  // Process second byte
        DONE    = 2'b11   // Signal complete message
    } state_t;

    state_t state, next_state;

    // Sequential logic for state transitions and output generation
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
            done <= 1'b0;
        end else begin
            state <= next_state;
            done <= (state == DONE);
        end
    end

    // Combinatorial logic for next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (in[3])    // Check if third bit is set in incoming byte
                    next_state = BYTE1;
                else
                    next_state = IDLE;
            end
            BYTE1: begin
                next_state = BYTE2;
            end
            BYTE2: begin
                next_state = DONE;
            end
            DONE: begin
                next_state = IDLE;  // Return to IDLE to detect a new message
            end
            default: begin
                next_state = IDLE;
            end
        endcase
    end
endmodule
```