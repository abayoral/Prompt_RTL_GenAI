```verilog
module dual_port_ram (
    input wire clk,
    input wire rst_n,
    input wire write_en,
    input wire [2:0] write_addr,
    input wire [5:0] write_data,
    input wire read_en,
    input wire [2:0] read_addr,
    output reg [5:0] read_data
);
    parameter WIDTH = 6;
    parameter DEPTH = 8;

    // Declare the memory array
    reg [WIDTH-1:0] mem [0:DEPTH-1];

    // Write operation
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // On reset, initialize all memory locations to 0
            integer i;
            for (i = 0; i < DEPTH; i = i + 1) begin
                mem[i] <= 6'b000000;
            end
        end else if (write_en) begin
            // Write data to specified address
            mem[write_addr] <= write_data;
        end
    end

    // Read operation
    always @(posedge clk) begin
        if (read_en) begin
            // Read data from specified address
            read_data <= mem[read_addr];
        end else begin
            read_data <= 6'b000000; // Output zero if read operation is not enabled
        end
    end
endmodule
```
