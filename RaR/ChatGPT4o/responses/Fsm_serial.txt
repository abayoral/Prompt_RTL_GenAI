```verilog
module top_module (
    input wire clk,
    input wire in,
    input wire reset,
    output reg done
);
    // State declaration
    typedef enum reg [2:0] {
        IDLE = 3'b000,
        START_BIT = 3'b001,
        DATA_BITS = 3'b010,
        STOP_BIT = 3'b011,
        ERROR = 3'b100
    } state_t;

    state_t state, next_state;
    reg [2:0] bit_counter; // Counter for the 8 data bits
    reg [7:0] data_byte;   // Storage for incoming data byte

    // State transition on clock edge
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic and data handling
    always @(*) begin
        next_state = state; // Default stay in current state
        done = 0;           // Default done signal
        case (state)
            IDLE: begin
                if (in == 0) // Detected start bit (logic 0)
                    next_state = START_BIT;
            end
            START_BIT: begin
                next_state = DATA_BITS;
                bit_counter = 0; // Reset the counter for data bits
            end
            DATA_BITS: begin
                if (bit_counter < 8) begin
                    data_byte = {in, data_byte[7:1]}; // Shift in the new bit
                    bit_counter = bit_counter + 1;
                end
                if (bit_counter == 7)
                    next_state = STOP_BIT;
            end
            STOP_BIT: begin
                if (in == 1) begin // Check for stop bit (logic 1)
                    done = 1;      // Successful byte reception
                    next_state = IDLE;
                end else begin
                    next_state = ERROR;
                end
            end
            ERROR: begin
                if (in == 1) // Wait for idle state (logic 1)
                    next_state = IDLE;
            end
            default: next_state = IDLE; // Default state if something goes wrong
        endcase
    end

    // Always block to reset bit counter and data byte when transitioning to IDLE
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            bit_counter <= 0;
            data_byte <= 8'b0;
        end else if (state == IDLE && next_state != IDLE) begin
            bit_counter <= 0;
            data_byte <= 8'b0;
        end
    end

endmodule
```