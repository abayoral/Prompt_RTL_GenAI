```verilog
module instr_reg (
    input wire clk,
    input wire rst,
    input wire [1:0] fetch,
    input wire [7:0] data,
    output reg [2:0] ins,
    output reg [4:0] ad1,
    output reg [7:0] ad2
);
    // Internal registers to hold instructions
    reg [7:0] ins_p1;
    reg [7:0] ins_p2;

    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            // Reset both internal instruction registers to 0
            ins_p1 <= 8'b0;
            ins_p2 <= 8'b0;
        end else begin
            // Fetch based on control signals
            case (fetch)
                2'b01: ins_p1 <= data;    // Load data into ins_p1
                2'b10: ins_p2 <= data;    // Load data into ins_p2
                default: begin
                    // Hold current state
                    ins_p1 <= ins_p1;
                    ins_p2 <= ins_p2;
                end
            endcase
        end
    end

    always @(*) begin
        // Output assignments
        ins = ins_p1[7:5];   // Most significant 3 bits for opcode
        ad1 = ins_p1[4:0];   // Least significant 5 bits for register address
        ad2 = ins_p2;        // Complete 8 bits from ins_p2
    end
endmodule
```