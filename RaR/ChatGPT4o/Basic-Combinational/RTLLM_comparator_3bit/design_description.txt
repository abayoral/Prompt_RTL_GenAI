Imagine you are a professional Verilog designer with the task of developing a specific hardware module using Verilog, a hardware description language. Your required assignment is to build a Verilog module, designated as `comparator_3bit`, which will serve as a 3-bit comparator. Your role is to ensure this module is capable of comparing two 3-bit binary inputs, accurately determining and reporting the relational status between themâ€”whether one is greater, less, or equal to the other.

In building this `comparator_3bit` module, you will need to consider the following details:

### Input Specifications:

1. **Operands**:
   - **Operand 'A'**: This is a 3-bit input vector, referenced as `A[2:0]`. It represents the first binary number to be compared.
   - **Operand 'B'**: Similarly, this is another 3-bit input vector, indicated as `B[2:0]`. This represents the second binary number in the comparison process.

These operands will be the base data that your module will analyze to ascertain their relationship.

### Output Requirements:

The module should produce three distinct 1-bit outputs, each representing a particular comparative result between the two inputs:

1. **`A_greater`**: This 1-bit output should be high (logic level 1) only when the binary number `A` is greater than the binary number `B`.
   
2. **`A_equal`**: This output is meant to be high only if `A` is exactly equal to `B`.
   
3. **`A_less`**: This output should become high when `A` is less than `B`.

It's crucial that in the resultant outputs, only one of the outputs can be high at any given time, meaning the outputs should be mutually exclusive as they represent distinct states of comparison.

### Functional Implementation:

To achieve the required functionality, you must employ combinational logic within your Verilog module. This logic must compute the comparison result of `A` against `B`, setting only one of the outputs (`A_greater`, `A_equal`, or `A_less`) to high based on the comparative outcome. The logic should be clean and optimized to run effectively without unnecessary complexity.

### Objective:

Your objective is to deliver a complete and correctly functioning Verilog code implementation of this module. The code should strictly adhere to standard coding practices in Verilog to ensure that it is free from syntax errors, easy to understand, and accurately encapsulates the core module design that fulfills the described comparator function. This involves careful definition and precise detailing of ports and operational logic to ensure clarity and correctness throughout your implementation.