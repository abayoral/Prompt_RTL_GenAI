As a professional Verilog designer, you have been assigned the challenge of developing a Verilog module called `radix2_div`. This module is intended to implement a basic radix-2 division algorithm that processes 8-bit signed or unsigned integers. The intent is to receive two 8-bit inputs: the dividend and the divisor, and then, through a sequence of methodical operations, produce a 16-bit output that combines both the quotient and the remainder from the division.

**Module Specifications and Requirements:**

**Module Identification:**
- The module should be referred to as `radix2_div`.

**Input Ports Detailed Description:**
- `clk`: This is a clock input, serving as a critical signal in the synchronous digital design to ensure that state changes occur only at discrete time intervals dictated by the rising or falling edge of this clock.
- `rst`: This reset input allows the module to be initialized or cleared. It is crucial for resetting the operation of the module to a known state, either at power-up or during operation as needed.
- `sign`: A 1-bit input that identifies the type of division operation. A logic high ('1') means the division should be treated as signed arithmetic, while a logic low ('0') indicates unsigned arithmetic.
- `dividend`: An 8-bit input representing the number to be divided.
- `divisor`: An 8-bit input signifying the number by which the dividend is divided.
- `opn_valid`: A signal indicating that the operation request is legitimate. When asserted (`opn_valid` = 1), the module recognizes that a valid division operation is required and should begin processing.

**Output Ports Detailed Description:**
- `res_valid`: A 1-bit output that flags when the division operation is complete and the results are correct and ready to be read.
- `result`: A 16-bit output which contains the division outcomes: the upper 8 bits store the remainder of the division, whereas the lower 8 bits hold the quotient obtained.

**Operational Steps and Considerations:**

- **Operation Initialization:** Initiate the operation by capturing input values for dividend and divisor only when `opn_valid` is high, and `res_valid` is low. Then, prepare a shift register with the absolute value of the dividend, left-shifted by one bit, and compute the negative absolute value of the divisor, referred to as `NEG_DIVISOR`. Initialize a counter (`cnt`) and a start flag (`start_cnt`) both to '1' to indicate the division process initiation.

- **Division Execution:** Under conditions where `start_cnt` is high:
  - If `cnt` equals '8', it implies that 8 iterative shifts were performed, indicating the end of the division sequence. Here, reset `cnt` and `start_cnt`, and update the shift register to store the final remainder and quotient.
  - For all other values of `cnt`, increment `cnt` by 1, and update the shift register by evaluating the result of the subtraction involving `NEG_DIVISOR`. Use a multiplexer to select the new value based on a carry-out signal that determines the outcome of the subtraction. Shift the register left, incorporating the carry-out as needed.

- **Managing Result Validity:** Handle the `res_valid` signal by evaluating the reset (`rst`), the counter status (`cnt`), and other relevant conditions to indicate when the result can be accessed by external components or systems.

The design demands a thorough implementation in Verilog, ensuring alignment with all specified behaviors, including handling both signed and unsigned operations, performing necessary shifts accurately, and managing state transitions based on clock cycles. The task requires orchestrating these elements in a synchronous logic environment, focusing on precise bit manipulations and prompt output readiness.