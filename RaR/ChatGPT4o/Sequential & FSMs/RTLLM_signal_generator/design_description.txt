Imagine you are fulfilling the role of an experienced Verilog designer, which involves the creation and execution of a digital module specifically named the "Triangle Wave Signal Generator." The primary objective for this module is to generate a waveform that exhibits a unique oscillating behavior in which its values alternately rise and fall over time in a repetitive cycle. The core signal within this module is labeled "wave," and it is stringently limited to being 5 bits wide. The essential behavior of this signal is to increase sequentially starting from 0 and reaching a peak value of 31, whereupon it reverses this pattern by decreasing back down to an initial value of 0.

### Detailed Specifications:

#### Module Name:
- The intended name for this module is `signal_generator`.

#### Input Interface:
- **clk**: This input captures the clock signal, which is critical for synchronizing every operation within the module. The synchronous behavior is linked specifically to the rising edges of this clock signal.
- **rst_n**: This is a reset signal that is active low. When in the low logical state (0), this indicates to the module that it should enter a reset state, which effectively clears any registered states or values back to an initial condition. When this signal is high (logic level 1), the module resumes normal operation, having exited the reset condition.

#### Output Interface:
- **wave**: The primary output signal, which is a 5-bit representation of the current amplitude of the triangle waveform being generated by the module.

#### Design and Implementation Approach:

- **Waveform Management and State Logic**:
  1. A dedicated register called `state` is necessary to manage whether the waveform is currently in the process of incrementing or decrementing.
  2. Simultaneously, another register called `wave` is utilized to track and hold the current value of the waveform, staying within the constraints of a 5-bit width.
  3. These registers (`state` and `wave`) need to be updated systematically within an always block that is sensitive to either the arrival of a clock signal's positive edge (`posedge clk`) or the negative edge of the reset (`negedge rst_n`).
  4. **Reset Functionality**: Upon the detection of a reset condition (i.e., when the reset signal `~rst_n` evaluates to true), both the `state` and `wave` registers should automatically reset to 0.

- **Sequential Transition Logic for Waveform Generation**:
  1. **Increment Phase**: When the `state` is determined to be 0, the `wave` register value should increment by a unit of 1 with each successive clock cycle.
  2. **Transition at Peak**: Upon reaching the maximum value of 31 (i.e., `wave == 31`), the `state` should necessarily move from 0 to 1 to switch into the decrementing phase.
  3. **Decrement Phase**: With `state` set to 1, the `wave` should decrement by 1 with every clock cycle.
  4. **Transition at Valley**: When `wave` returns down to 0 (i.e., `wave == 0`), the `state` should revert back to 0, reinstating the increment mode in preparation for the next cycle.

- **Sustained Cycling**: The module is designed to infinitely continue its cycle of gradually increasing and subsequently decreasing `wave` values within its defined limits from 0 to 31, guided by the state transitions outlined above.

Your undertaking for this task is to seamlessly translate these detailed requirements into a fully-functional coded Verilog module, encapsulating all the specified configurations and conditions for seamless operation.