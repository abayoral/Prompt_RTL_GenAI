As a proficient Verilog designer, you have been given the responsibility to develop a logic module called `pulse_detect`. This module's primary function is to identify specific patterns within a continuous stream of a one-bit signal, labeled `data_in`. The module will rely on a clock signal, named `clk`, to manage its timing and synchronization of operations. Below are the detailed requirements and criteria for designing this module:

1. **Module Objective**: The core function of this module is to detect a particular sequence in which the input signal `data_in` moves from a low (0) state to a high (1) state and subsequently returns to a low (0) state over three consecutive clock cycles. This pattern detection is referred to as identifying a "pulse."

2. **Signal Definitions**: 
   - **`clk`**: The driving clock signal for this module, ensuring that all internal processes are synchronized to the rising edge of this clock.
   - **`rst_n`**: An active-low reset signal, crucial for resetting the module. Whenever this signal is asserted (low), the module should reset both its internal state and the output signal.
   - **`data_in`**: A continuous one-bit input signal that the module observes closely in search of the defined pulse pattern.
   - **`data_out`**: The module outputs this signal to indicate the detection of a pulse. It should assert high (set to 1) precisely during the third cycle (completion of the pulse) and remain low (0) at all other times.

3. **Process of Detection**:
   - Develop an internal register named `state` that serves as the memory of the module, managing the progression of the detection process. This register facilitates accurate transition signals throughout the pulse detection states.
   - Use an always block that is sensitive to the positive edge of the `clk` or the negative edge of `rst_n`. This block should be responsible for implementing the logic that drives pulse detection.

4. **Reset Functionality**: In the event where `rst_n` is asserted (kept low):
   - Reinitialize the `state` register to represent the initial state, setting the stage for fresh detection once the reset condition is lifted.
   - Ensure `data_out` is coerced to low (0) because detecting pulses is not feasible when the reset is in effect.

5. **State Transitions**: As the clock ticks, the system should evaluate changes in `data_in` to facilitate transitions:
   - **Initial State**: Await the start of a pulse pattern by detecting a transition from 0 to 1.
   - **Intermediate State**: After capturing the initial transition to 1, watch for the subsequent transition back to 0, completing the pulse detection.
   - **Final State**: On completing the full sequence of transitions, determine that a pulse has been detected. Briefly set `data_out` to high (1) for only one cycle as an indicator of successful detection, then return to 0 awaiting another pulse sequence.

6. **Output Management**: Once a pulse is detected, the `data_out` signal should be momentarily high and then low again, ready to detect another occurrence of the pulse.

Your assignment involves composing the precise Verilog syntax that encapsulates this desired behavior within the `pulse_detect` module. Make sure to include mechanisms for accurately managing edge cases and ensure smooth transitions between the various states as described.