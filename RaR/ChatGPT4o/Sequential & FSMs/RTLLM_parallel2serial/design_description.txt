As a highly skilled designer proficient in Verilog, your task involves creating a module identified as `parallel2serial`, specifically designed to perform the function of converting parallel data, consisting of four input bits, into a corresponding serial output. The required transformation should begin with the transmission of the most significant bit (MSB) of the input and proceed sequentially to the least significant bit (LSB). The following are the outlined requirements and specific functionalities that the module should incorporate:

### 1. **Module Configuration Requirements:**

- **Input Ports:**
  - **Clock (`clk`)**: This is a critical signal that drives the synchronous operations within the module, ensuring that data conversion adheres to precise timing constraints.
  - **Active-low Reset (`rst_n`)**: This signal, when low (`0`), should reset the module to its initial state, effectively preparing it to begin a new conversion sequence. When high (`1`), the module operates normally outside of the reset state.
  - **Data Input (`d`)**: This 4-bit wide input represents the parallel data block that needs to be serialized.

- **Output Ports:**
  - **Valid Output Signal (`valid_out`)**: This signal serves to indicate when the serial output (`dout`) contains valid data that can be reliably read. It should assert high (`1`) for the duration of the data conversion sequence.
  - **Data Output (`dout`)**: As a single-bit output, this port will emit the serial conversion result, matching with the current bit according to its position in the sequence.

### 2. **Operational Details and Functionality:**

- **Serial Conversion Sequence:**
  - The conversion should initiate by assigning the MSB of the 4-bit input `d` to the output `dout`.
  - Sequentially advance through the subsequent bits, maintaining each bit at `dout` through three successive clock cycles, proceeding downwards from the second MSB to the LSB.
  - Employ a counter (`cnt`) to accurately manage the position within the input bit sequence, ensuring the corresponding bit is output for each clock cycle.

- **Mechanism for Valid Signal (`valid_out`):**
  - Ensure `valid_out` is set high when `dout` presents a valid serial bit. This involves activating on the clock cycle that corresponds to the MSB and sustaining for each bit until the entire 4-bit sequence concludes.
  - Reset the sequence and hence the counter to 0 after the LSB has been outputted, and maintain `valid_out` high during these cycles of valid data transmission.

### 3. **Counter and Reset Functional Behavior:**

- Under normal operation, when `rst_n` is high, the counter `cnt` should cycle through values 0 to 3, effectively indexing which bit of `d` should appear on `dout`.
- When `rst_n` is low, indicative of a reset condition, the module's internal state, including the counter, should revert to a predetermined initial state. This prepares the module to start the conversion anew upon exiting the reset state.

Reflect on these detailed specifications while formulating the structural and behavioral elements of the Verilog code, ensuring adherence to the design objectives set forth and a robust implementation of the described functionality.