You are seeking expertise from a professional specializing in Verilog design to develop a specific Verilog implementation for a traffic light controller. This system is intended to manage traffic signals in a detailed scenario, encompassing vehicular and pedestrian controls. The primary components and functionalities that need to be incorporated in your design include:

**Traffic Scenario Details:**

- **Traffic Signal Timing:** The controller needs to operate a traffic light for vehicles, cycling through a sequence of 60 clock cycles of green, followed by 5 clock cycles of yellow, and subsequently 10 clock cycles of red.
  
- **Pedestrian Influence:** A pedestrian button must be integrated within your design. The logic for this button should ensure that if it is pressed while the vehicular green light remains active and has more than 10 clock cycles left before it changes, the green light's duration must be truncated to leave only 10 clock cycles. If less than 10 cycles remain, the timing should remain unaffected.

**Controller Logic and Pairing:**

- **Pedestrian Lighting:** The vehicular and pedestrian signals need to be synchronized such that the pedestrian light remains red when the vehicular light is green or yellow. Conversely, when vehicular traffic sees a red light, the pedestrian light should change to green, indicating itâ€™s safe for crossing.

**Verilog Module Structure:**

- **Module Name and Port Definitions:** Name the module `traffic_light`. Define several inputs and outputs:
  - **Inputs:**
    - `rst_n`: Active-low reset signal.
    - `clk`: Clock input serving as the timing basis.
    - `pass_request`: A signal that influences vehicular passage decisions.

  - **Outputs:**
    - `clock[7:0]`: An 8-bit output representing the current count value for managing timing across the states.
    - `red`, `yellow`, `green`: Outputs signaling the current active light for vehicular traffic.

**State and Parameter Configuration:**

- **Parameters:** Enumerate states such as `idle`, `s1_red`, `s2_yellow`, `s3_green` to represent various phases of traffic light operations.

- **State Management:** Utilize registers and wires, specifically:
  - An 8-bit register `cnt` to serve as the counter.
  - A 2-bit register `state` to store the traffic light's current operational phase.
  - Registers like `p_red`, `p_yellow`, `p_green` to remember the prior states of the respective signals.

**Design Implementation Plan:**

1. **State Transition Logic:** Implement an always block to manage transitions between states based on input conditions and current state. For example:
   - Advancing from `idle` to `s1_red`.
   - Switching from `s1_red` to `s3_green` after reaching a count of 3.
   - Similar transitions from `s2_yellow` to `s1_red`.
   - Incorporate logic to handle pedestrian requests, ensuring the transition aligns with both pedestrian needs and regular state changes.

2. **Counter Management Logic:** Establish another always block dedicated to counter operations:
   - Set up the counter to adjust each clock cycle.
   - Include conditions for handling resets, pedestrian button interactions, and other triggers that necessitate alterations in the countdown or state transitions.

3. **Signal Update Logic:** Develop a final always block to update the signal outputs (`red`, `yellow`, `green`) grounded on the current and prior states, ensuring alignment with the counter logic and the smooth operation of signal transitions.

The goal is to construct a cohesive Verilog code that embodies this traffic light controller design, encompassing all specified functionalities and constraints described above to efficiently manage both vehicular and pedestrian traffic under the defined scenario.