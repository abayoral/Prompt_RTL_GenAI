As a seasoned Verilog designer, you are tasked with creating a detailed and fully functional implementation of a module called `float_multi`. This module is responsible for executing multiplication operations on 32-bit single-precision floating-point numbers that adhere to the IEEE 754 standard. The module you will design is pivotal for carrying out precise arithmetic operations essential across various computational disciplines. Your design will involve multiple functional units and internal processes to ensure accuracy and compliance with the IEEE 754 specifications. Below is a comprehensive breakdown of the required input and output ports, as well as the internal workings and phases of the `float_multi` module:

**Input Ports:**

1. `clk` (input): This clock signal is crucial for coordinating the module's operations. It ensures all processes occur in a synchronized manner, maintaining order throughout the computational cycle.
2. `rst` (input): An active-high reset signal that initializes or reinitializes the module, resetting it to a known state. This function is vital for system reliability and prevents inconsistencies by ensuring a fresh start.
3. `a` (input [31:0]): The first input operand represented as a 32-bit IEEE 754 single-precision floating-point number.
4. `b` (input [31:0]): The second input operand, also in the 32-bit IEEE 754 single-precision format.

**Output Ports:**

- `z` (output reg [31:0]): This output port will carry the multiplication result of the input operands `a` and `b`. The result is delivered in the IEEE 754 single-precision format, maintaining consistency with the input.

**Internal Signals and Components:**

- **Cycle Control:**
  - `counter` (reg [2:0]): Functions as a sequencing counter that manages the module's operational phases, ensuring each step is correctly timed and ordered.

- **Component Extraction:**
  - `a_mantissa`, `b_mantissa`, `z_mantissa` (reg [23:0]): Registers dedicated to storing the mantissas of input operands and the computed result, which are necessary for performing multiplication at the bit level.
  - `a_exponent`, `b_exponent`, `z_exponent` (reg [9:0]): Registers holding the exponent values that control number scaling and help adjust the overall product's magnitude.
  - `a_sign`, `b_sign`, `z_sign` (reg): Sign bits that determine the polarity of both the input operands and the resulting output.

- **Intermediate Calculations:**
  - `product` (reg [49:0]): An extended precision temporary register that contains the product of the mantissas before rounding and normalization are applied.
  - `guard_bit`, `round_bit`, `sticky` (reg): These special bits are central to the rounding process, ensuring the final result meets precision requirements.

**Operational Phases and Functional Sequence:**

- **Initialization Phase:**
  - On activation of the `rst` signal, the `counter` is set to zero, thus setting up a definitive starting point for subsequent operations.

- **Input Processing Phase:**
  - The module extracts the distinct parts of the input numbers `a` and `b` (i.e., mantissas, exponents, sign bits) and stores them into designated registers during the initial clock period.

- **Special Case Handling Phase:**
  - Your module should adeptly recognize and appropriately manage special cases such as NaN (Not a Number) and infinity, following the guidelines set by IEEE 754.

- **Normalization Phase:**
  - Mantissas may require adjustment to maintain a normalized form, which is essential for ensuring accurate arithmetic multiplication.

- **Multiplication Phase:**
  - The mantissas are multiplied, the signs are synchronized, and a collective exponent is calculated to obtain a raw product result, initiating the central arithmetic operation.

- **Rounding and Adjustment Phase:**
  - Implement the necessary rounding mechanisms to refine the product for precision while adjusting the exponent so that the numeric representation remains true.

- **Output Generation Phase:**
  - The final step involves formatting the result into IEEE 754 compliance, ensuring conditions like overflow and underflow are properly managed to maintain standard adherence.

Your responsibility is to methodically develop the Verilog code for this `float_multi` module, adhering strictly to these outlined specifications and operational directives to guarantee precision and conformity with the industry standards for floating-point arithmetic.