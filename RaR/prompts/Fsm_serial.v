In various traditional serial communication protocols, each byte of data is typically accompanied by a specific structure of bits, including a start bit and a stop bit. This structure assists the receiver in distinguishing each byte from the continuous stream of incoming bits. One widely used configuration involves sending one start bit, which is a logic 0, followed by eight data bits, and concluding with one stop bit, which is a logic 1. Additionally, when there is no data being transmitted, the communication line typically remains at a logical high level (logic 1), indicating an idle state.

The task is to create a finite state machine (FSM) that will effectively monitor a sequential bitstream and correctly identify when a complete byte has been received properly. The FSM should function by first detecting the start bit, then counting through the eight subsequent data bits, and finally checking for the correct presence of the stop bit. If the stop bit is absent or incorrect at the expected time, the FSM is required to ignore the incorrect sequence and continue searching for a valid start bit subsequently before attempting to process the next byte.

In the design of this FSM, consider how the signals and transitions between states will be managed, especially in scenarios where incorrect bytes are transmitted, ensuring the system can robustly handle errors and resume normal operation upon detecting the next correct sequence. The system will require a synchronous reset to initialize or return to a known state, and an output signal to indicate when a byte has been successfully captured. Implement this FSM logic within a top-level module using Verilog, which should include appropriate signals and logic to achieve the described functionality.