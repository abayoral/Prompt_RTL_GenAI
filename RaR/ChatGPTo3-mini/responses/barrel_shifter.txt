module barrel_shifter(
    input  [7:0] in,
    input  [2:0] ctrl,
    output [7:0] out
);

  // Stage wires for intermediate results of each shift layer.
  wire [7:0] stage1;
  wire [7:0] stage2;
  wire [7:0] stage3;
  
  // Stage 1: Shift (rotate) by 4 positions if ctrl[2] is high.
  // Each bit of stage1 is selected using a 2-to-1 multiplexer logic.
  assign stage1[0] = ctrl[2] ? in[4] : in[0];
  assign stage1[1] = ctrl[2] ? in[5] : in[1];
  assign stage1[2] = ctrl[2] ? in[6] : in[2];
  assign stage1[3] = ctrl[2] ? in[7] : in[3];
  assign stage1[4] = ctrl[2] ? in[0] : in[4];
  assign stage1[5] = ctrl[2] ? in[1] : in[5];
  assign stage1[6] = ctrl[2] ? in[2] : in[6];
  assign stage1[7] = ctrl[2] ? in[3] : in[7];
  
  // Stage 2: Shift (rotate) by 2 positions if ctrl[1] is high.
  // Here, the selection is based on the output of Stage 1.
  assign stage2[0] = ctrl[1] ? stage1[6] : stage1[0];
  assign stage2[1] = ctrl[1] ? stage1[7] : stage1[1];
  assign stage2[2] = ctrl[1] ? stage1[0] : stage1[2];
  assign stage2[3] = ctrl[1] ? stage1[1] : stage1[3];
  assign stage2[4] = ctrl[1] ? stage1[2] : stage1[4];
  assign stage2[5] = ctrl[1] ? stage1[3] : stage1[5];
  assign stage2[6] = ctrl[1] ? stage1[4] : stage1[6];
  assign stage2[7] = ctrl[1] ? stage1[5] : stage1[7];
  
  // Stage 3: Shift (rotate) by 1 position if ctrl[0] is high.
  // The final output is determined by the decisions made in this stage.
  assign stage3[0] = ctrl[0] ? stage2[7] : stage2[0];
  assign stage3[1] = ctrl[0] ? stage2[0] : stage2[1];
  assign stage3[2] = ctrl[0] ? stage2[1] : stage2[2];
  assign stage3[3] = ctrl[0] ? stage2[2] : stage2[3];
  assign stage3[4] = ctrl[0] ? stage2[3] : stage2[4];
  assign stage3[5] = ctrl[0] ? stage2[4] : stage2[5];
  assign stage3[6] = ctrl[0] ? stage2[5] : stage2[6];
  assign stage3[7] = ctrl[0] ? stage2[6] : stage2[7];
  
  // The final output of the barrel shifter.
  assign out = stage3;

endmodule