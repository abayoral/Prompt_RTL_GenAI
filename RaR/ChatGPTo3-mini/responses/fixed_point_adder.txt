module fixed_point_adder #(
    parameter Q = 8,               // number of fractional bits
    parameter N = 16               // total bit-width (integer+fractional)
)(
    input  [N-1:0] a,              // first fixed-point operand
    input  [N-1:0] b,              // second fixed-point operand
    output reg [N-1:0] c           // fixed-point output result
);

    // Internal registers
    reg [N-1:0] res;             // register to hold the final result
    reg [N-1:0] abs_a, abs_b;    // registers to hold the absolute values
    reg [N:0]   mag;             // one extra bit for magnitude calculation (to catch overflow)

    // Maximum positive magnitude for a fixed-point number with N bits in 2's complement:
    // For positive numbers, maximum is 2^(N-1)-1.
    localparam [N-1:0] MAX_POS = {1'b0, {(N-1){1'b1}}};
    // For negative numbers, the allowed magnitude is slightly larger (the minimum number is -2^(N-1)).
    // When adding absolute values for negative numbers, if the magnitude exceeds 2^(N-1) then we saturate.
    localparam [N-1:0] MAX_NEG_MAG = {1'b1, {(N-1){1'b0}}};  // represents 2^(N-1) (as magnitude)

    // Combinational logic for fixed-point addition/subtraction with saturation and fixed precision handling
    always @(*) begin
        // Compute absolute values for a and b. Using two's complement conversion.
        if (a[N-1] == 1'b1)
            abs_a = ~a + 1;
        else
            abs_a = a;

        if (b[N-1] == 1'b1)
            abs_b = ~b + 1;
        else
            abs_b = b;

        // Case 1: Same sign: perform absolute addition and reapply the sign.
        if (a[N-1] == b[N-1]) begin
            mag = abs_a + abs_b; // add the absolute values; using extra bit to detect overflow

            // Check for overflow based on sign.
            if (a[N-1] == 1'b0) begin
                // Both inputs positive. Maximum representable magnitude is MAX_POS.
                if (mag > {1'b0, MAX_POS})
                    mag = {1'b0, MAX_POS};  // saturate to maximum positive value
                // Reapply the positive sign (MSB = 0).
                res = mag[N-1:0];
            end
            else begin
                // Both inputs negative.
                // The most negative fixed point value is represented by -2^(N-1),
                // whose magnitude is 2^(N-1). If mag exceeds that value, saturate.
                if (mag > {1'b0, MAX_NEG_MAG})
                    mag = {1'b0, MAX_NEG_MAG};  // saturate magnitude to maximum allowed for negative
                // Reapply negative sign by converting the magnitude back to two's complement.
                res = ~mag[N-1:0] + 1;
            end
        end
        // Case 2: Different signs: perform subtraction of absolute values.
        else begin
            // Compare absolute values to determine which is larger.
            if (abs_a >= abs_b) begin
                mag = abs_a - abs_b;
                // The result takes the sign of a.
                if (a[N-1] == 1'b1)
                    res = ~mag[N-1:0] + 1;  // negative result: convert magnitude to two's complement
                else
                    res = mag[N-1:0];       // positive result
            end
            else begin
                mag = abs_b - abs_a;
                // The result takes the sign of b.
                if (b[N-1] == 1'b1)
                    res = ~mag[N-1:0] + 1;
                else
                    res = mag[N-1:0];
            end
        end

        // Assign the computed result to output c.
        c = res;
    end

endmodule