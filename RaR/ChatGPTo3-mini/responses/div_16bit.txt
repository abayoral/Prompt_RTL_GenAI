module div_16bit(
    input  [15:0] A,    // 16-bit dividend
    input  [7:0]  B,    // 8-bit divisor
    output reg [15:0] result, // Quotient
    output reg [15:0] odd     // Remainder
);

    // Internal registers for passing the inputs to the division algorithm.
    reg [15:0] a_reg;
    reg [7:0]  b_reg;

    // First always block: Simple combinational updating of internal dividend and divisor registers.
    always @(*) begin
        a_reg = A;
        b_reg = B;
    end

    // Second always block: Implements the iterative division procedure using combinational logic.
    always @(*) begin
        reg [15:0] quotient; // To build the quotient bit-by-bit.
        reg [15:0] rem;      // To hold the evolving remainder.
        integer i;
        
        // Initialize the remainder to zero.
        rem = 16'b0;
        quotient = 16'b0;
        
        // Iteratively process each bit of the dividend, starting from the MSB down to LSB.
        // For each iteration, shift the remainder left by one and bring in the next bit from a_reg.
        for(i = 15; i >= 0; i = i - 1) begin
            // Left-shift rem and place the i-th bit of a_reg into the LSB of rem.
            rem = {rem[14:0], a_reg[i]};
            
            // Compare the current remainder with the divisor.
            // Since b_reg is 8-bit, extend it to 16 bits (with zero-padding) for comparison.
            if (rem >= {8'b0, b_reg}) begin
                // If the remainder is greater than or equal to the divisor, subtract the divisor.
                rem = rem - {8'b0, b_reg};
                // Set the corresponding quotient bit.
                quotient[i] = 1'b1;
            end else begin
                // Otherwise, leave the quotient bit as 0.
                quotient[i] = 1'b0;
            end
        end
        
        // Assign the final quotient and remainder to the module outputs.
        result = quotient;
        odd = rem;
    end

endmodule