module full_adder( 
    input a,
    input b,
    input cin,
    output sum,
    output cout 
);
    // Full adder logic implementation
    assign sum  = a ^ b ^ cin;
    assign cout = (a & b) | (a & cin) | (b & cin);
endmodule

module top_module( 
    input  [99:0] a, b,
    input         cin,
    output [99:0] cout,
    output [99:0] sum 
);

    // Internal wire to connect the ripple carry between full adders.
    wire [99:0] carry;
    
    genvar i;
    generate
        for(i = 0; i < 100; i = i + 1) begin : FA_CHAIN
            if(i == 0) begin
                // For the least-significant bit, use the external cin.
                full_adder fa_inst (
                    .a(a[i]),
                    .b(b[i]),
                    .cin(cin),
                    .sum(sum[i]),
                    .cout(carry[i])
                );
            end 
            else begin
                // For all other bits, the carry in is the previous full adder's carry out.
                full_adder fa_inst (
                    .a(a[i]),
                    .b(b[i]),
                    .cin(carry[i-1]),
                    .sum(sum[i]),
                    .cout(carry[i])
                );
            end
        end
    endgenerate

    // The cout output exposes the carry generated by each full adder.
    assign cout = carry;

endmodule