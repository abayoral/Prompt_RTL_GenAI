module instr_reg(
    input        clk,
    input        rst,       // active low reset
    input  [1:0] fetch,     // fetch control signal: 2'b01 -> use first source, 2'b10 -> use second source
    input  [7:0] data,      // instruction data input
    output [2:0] ins,       // high 3 bits of ins_p1 (opcode)
    output [4:0] ad1,       // low 5 bits of ins_p1 (register address)
    output [7:0] ad2        // complete instruction from second source (ins_p2)
);

    // Internal 8-bit registers for holding instructions from two sources
    reg [7:0] ins_p1;
    reg [7:0] ins_p2;
    
    // Registers update on the rising edge of the clock
    always @(posedge clk) begin
        // Check active low reset: when rst is low, clear both registers
        if (!rst) begin
            ins_p1 <= 8'b0;
            ins_p2 <= 8'b0;
        end else begin
            // Instruction fetch logic based on fetch signal
            case(fetch)
                2'b01: begin
                    // Fetch instruction from the first source into ins_p1
                    ins_p1 <= data;
                end
                2'b10: begin
                    // Fetch instruction from the second source into ins_p2
                    ins_p2 <= data;
                end
                // If fetch is neither 2'b01 nor 2'b10, do not update registers
                default: begin
                    ins_p1 <= ins_p1;
                    ins_p2 <= ins_p2;
                end
            endcase
        end
    end
    
    // Output assignment:
    // ins: high 3 bits of the instruction in ins_p1 (typically the opcode)
    // ad1: low 5 bits of the instruction in ins_p1 (register address)
    // ad2: full 8-bit instruction from ins_p2 (instruction from alternative source)
    assign ins = ins_p1[7:5];
    assign ad1 = ins_p1[4:0];
    assign ad2 = ins_p2;

endmodule