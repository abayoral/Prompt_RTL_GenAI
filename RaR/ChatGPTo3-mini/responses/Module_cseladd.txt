module mux16_2(
    input [15:0] in0,
    input [15:0] in1,
    input sel,
    output [15:0] out
);
    assign out = sel ? in1 : in0;
endmodule

module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    // Lower 16-bit adder: adds the lower halves of a and b with an initial carry-in of 0.
    wire [15:0] lower_sum;
    wire        carry_lower;
    add16 lower_add (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(lower_sum),
        .cout(carry_lower)
    );
    
    // Two upper 16-bit adders: one assuming a carry-in of 0 and the other assuming a carry-in of 1.
    wire [15:0] upper_sum0, upper_sum1;
    wire        carry_upper0, carry_upper1;
    add16 upper_adder0 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b0),
        .sum(upper_sum0),
        .cout(carry_upper0)
    );
    add16 upper_adder1 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b1),
        .sum(upper_sum1),
        .cout(carry_upper1)
    );
    
    // 16-bit 2-to-1 multiplexer: selects between the two upper sum outputs based on the lower adder's cout.
    wire [15:0] selected_upper;
    mux16_2 mux_upper (
        .in0(upper_sum0),
        .in1(upper_sum1),
        .sel(carry_lower),
        .out(selected_upper)
    );
    
    // Combine the lower sum with the selected upper sum to form the final 32-bit output.
    assign sum = {selected_upper, lower_sum};
    
endmodule