module multi_16bit(
    input         clk,
    input         rst_n,
    input         start,
    input  [15:0] ain,
    input  [15:0] bin,
    output [31:0] yout,
    output        done
);

    // Shift count register requires 5 bits to cover values from 0 up to 17
    reg [4:0] i;
    // Completion flag register
    reg done_r;
    // Registers for the multiplicand, multiplier, and the accumulated product
    reg [15:0] areg;
    reg [15:0] breg;
    reg [31:0] yout_r;

    // 1. Data Bit Control: shift count register
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            i <= 5'd0;
        else if (start) begin
            // Increment count if it is less than 17, otherwise let it remain unchanged.
            if (i < 5'd17)
                i <= i + 5'd1;
            else
                i <= i;
        end
        else
            i <= 5'd0;
    end

    // 2. Multiplication Completion Flag Generation:
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            done_r <= 1'b0;
        else if (i == 5'd16)
            done_r <= 1'b1;
        else if (i == 5'd17)
            done_r <= 1'b0;
        else
            done_r <= done_r;
    end

    // 3. Shift and Accumulate Operation:
    // At the initial cycle (i == 0), load inputs into areg and breg and clear yout_r.
    // For subsequent cycles (i = 1 to 16), examine the (i-1)th bit of areg.
    // If the bit is high, add breg shifted left by (i-1) bits to yout_r.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            areg   <= 16'd0;
            breg   <= 16'd0;
            yout_r <= 32'd0;
        end
        else if (start) begin
            if (i == 5'd0) begin
                areg   <= ain;
                breg   <= bin;
                yout_r <= 32'd0;
            end
            else if (i >= 5'd1 && i <= 5'd16) begin
                if (areg[i-1])
                    yout_r <= yout_r + (breg << (i-1));
                else
                    yout_r <= yout_r;
            end
            // When i is 17 or greater, simply hold the registers unchanged.
            else begin
                areg   <= areg;
                breg   <= breg;
                yout_r <= yout_r;
            end
        end
        else begin
            // When start is inactive, maintain the current state until next start or reset.
            areg   <= areg;
            breg   <= breg;
            yout_r <= yout_r;
        end
    end

    // 4. Final Output Assignment:
    assign yout = yout_r;
    assign done = done_r;

endmodule