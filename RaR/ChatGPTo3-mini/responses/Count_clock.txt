module top_module(
    input clk,
    input reset,
    input ena,
    output reg pm,
    output reg [7:0] hh,
    output reg [7:0] mm,
    output reg [7:0] ss
);

    // Internal time registers.
    // sec and min range 0-59 so need 6 bits. hour is 1-12, so 4 bits are enough.
    reg [5:0] sec;
    reg [5:0] min;
    reg [3:0] hour;

    // Synchronous process: update time on each clock tick when enable is high.
    // When reset is high, immediately set clock to 12:00:00 AM (pm=0)
    always @(posedge clk) begin
        if (reset) begin
            sec   <= 6'd0;
            min   <= 6'd0;
            hour  <= 4'd12; // Represents "12"
            pm    <= 1'b0;  // AM is represented by 0.
        end
        else if (ena) begin
            // Increment seconds; when seconds equal 59, roll over.
            if (sec == 6'd59) begin
                sec <= 6'd0;
                // Now increment minutes.
                if (min == 6'd59) begin
                    min <= 6'd0;
                    // We must increment the hour.
                    // Clock is 12-hour format with special rollover conditions.
                    // Rules:
                    // - If current hour is 11 then next hour becomes 12 and pm toggles.
                    // - If current hour is 12 then next hour becomes 1 (and pm remains unchanged).
                    // - Otherwise, simply increment hour.
                    if (hour == 4'd11) begin
                        hour <= 4'd12;
                        pm   <= ~pm;
                    end
                    else if (hour == 4'd12) begin
                        hour <= 4'd1;
                    end
                    else begin
                        hour <= hour + 4'd1;
                    end
                end
                else begin
                    min <= min + 6'd1;
                end
            end
            else begin
                sec <= sec + 6'd1;
            end
        end
    end

    // Combinational logic to convert numerical time into BCD encoded outputs.
    // Here we break down sec, min, and hour into tens and ones digits.
    reg [3:0] sec_tens, sec_ones;
    reg [3:0] min_tens, min_ones;
    reg [3:0] hr_tens, hr_ones;

    always @(*) begin
        // Seconds conversion: sec is 0-59.
        if (sec >= 6'd50) begin
            sec_tens = 4'd5;
            sec_ones = sec - 6'd50;
        end
        else if (sec >= 6'd40) begin
            sec_tens = 4'd4;
            sec_ones = sec - 6'd40;
        end
        else if (sec >= 6'd30) begin
            sec_tens = 4'd3;
            sec_ones = sec - 6'd30;
        end
        else if (sec >= 6'd20) begin
            sec_tens = 4'd2;
            sec_ones = sec - 6'd20;
        end
        else if (sec >= 6'd10) begin
            sec_tens = 4'd1;
            sec_ones = sec - 6'd10;
        end
        else begin
            sec_tens = 4'd0;
            sec_ones = sec[3:0];
        end

        // Minutes conversion: min is 0-59.
        if (min >= 6'd50) begin
            min_tens = 4'd5;
            min_ones = min - 6'd50;
        end
        else if (min >= 6'd40) begin
            min_tens = 4'd4;
            min_ones = min - 6'd40;
        end
        else if (min >= 6'd30) begin
            min_tens = 4'd3;
            min_ones = min - 6'd30;
        end
        else if (min >= 6'd20) begin
            min_tens = 4'd2;
            min_ones = min - 6'd20;
        end
        else if (min >= 6'd10) begin
            min_tens = 4'd1;
            min_ones = min - 6'd10;
        end
        else begin
            min_tens = 4'd0;
            min_ones = min[3:0];
        end

        // Hours conversion: hour value is in the range 1 to 12.
        // Convert to two-digit BCD where hours 1-9 have a tens digit of 0.
        case (hour)
            4'd1:  begin hr_tens = 4'd0; hr_ones = 4'd1; end
            4'd2:  begin hr_tens = 4'd0; hr_ones = 4'd2; end
            4'd3:  begin hr_tens = 4'd0; hr_ones = 4'd3; end
            4'd4:  begin hr_tens = 4'd0; hr_ones = 4'd4; end
            4'd5:  begin hr_tens = 4'd0; hr_ones = 4'd5; end
            4'd6:  begin hr_tens = 4'd0; hr_ones = 4'd6; end
            4'd7:  begin hr_tens = 4'd0; hr_ones = 4'd7; end
            4'd8:  begin hr_tens = 4'd0; hr_ones = 4'd8; end
            4'd9:  begin hr_tens = 4'd0; hr_ones = 4'd9; end
            4'd10: begin hr_tens = 4'd1; hr_ones = 4'd0; end
            4'd11: begin hr_tens = 4'd1; hr_ones = 4'd1; end
            4'd12: begin hr_tens = 4'd1; hr_ones = 4'd2; end
            default: begin hr_tens = 4'd0; hr_ones = 4'd0; end
        endcase

        // Pack the BCD digits into the 8-bit outputs.
        // The upper nibble is the tens digit and the lower nibble is the ones digit.
        hh = {hr_tens, hr_ones};
        mm = {min_tens, min_ones};
        ss = {sec_tens, sec_ones};
    end

endmodule