module add1 (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    // 1-bit full adder implementation
    assign sum  = a ^ b ^ cin;
    assign cout = (a & b) | (a & cin) | (b & cin);
endmodule

module add16 (
    input  [15:0] a,
    input  [15:0] b,
    input         cin,
    output [15:0] sum,
    output        cout
);
    // Internal carry bus: 17 wires to hold carries through the 16 full adders
    wire [16:0] c;
    assign c[0] = cin;
    
    genvar i;
    generate
        for (i = 0; i < 16; i = i + 1) begin : full_adders
            add1 fa (
                .a(a[i]),
                .b(b[i]),
                .cin(c[i]),
                .sum(sum[i]),
                .cout(c[i+1])
            );
        end
    endgenerate
    assign cout = c[16];
endmodule

module top_module (
    input  [31:0] a,
    input  [31:0] b,
    output [31:0] sum
);
    // Instantiate lower 16-bit adder for bits [15:0]
    wire cout_lower;  // carry-out from lower adder, ignored per requirements
    add16 lower_adder (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(sum[15:0]),
        .cout(cout_lower)
    );

    // Instantiate upper 16-bit adder for bits [31:16]
    // Note: carry-in is set to 0 as required and carry-out is ignored.
    add16 upper_adder (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b0),
        .sum(sum[31:16]),
        .cout()
    );
endmodule