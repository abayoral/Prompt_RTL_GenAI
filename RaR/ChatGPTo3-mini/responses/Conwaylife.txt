module top_module(
    input clk,
    input load,
    input [255:0] data,
    output [255:0] q );

    // Internal representation of the grid (16x16)
    reg [255:0] grid;
    reg [255:0] next_state;

    // Map grid bits to cell (row, col) using index: index = row*16 + col.
    // Combinational logic to compute next state for each cell.
    integer i, j;
    integer di, dj;
    integer neighbor_count;
    always @(*) begin
        next_state = 256'b0;
        for(i = 0; i < 16; i = i + 1) begin
            for(j = 0; j < 16; j = j + 1) begin
                neighbor_count = 0;
                // Loop over the 3x3 neighborhood, excluding the cell itself.
                for(di = -1; di <= 1; di = di + 1) begin
                    for(dj = -1; dj <= 1; dj = dj + 1) begin
                        if(di == 0 && dj == 0)
                            continue;
                        // Compute wrapped row and column indices (toroidal boundary)
                        // Use modulo arithmetic with 16. Adding 16 ensures non-negative index.
                        // Calculation: (i + di + 16) % 16, (j + dj + 16) % 16.
                        if ( grid[ (((((i + di + 16) % 16)) * 16) + ((j + dj + 16) % 16)) ] )
                            neighbor_count = neighbor_count + 1;
                    end
                end

                // Get the current cell state
                if (grid[i*16+j]) begin
                    // Cell is alive
                    // Remains alive if exactly 2 or 3 neighbors are alive.
                    if(neighbor_count == 2 || neighbor_count == 3)
                        next_state[i*16+j] = 1'b1;
                    else
                        next_state[i*16+j] = 1'b0;
                end
                else begin
                    // Cell is dead
                    // It becomes alive if exactly 3 neighbors are alive.
                    if(neighbor_count == 3)
                        next_state[i*16+j] = 1'b1;
                    else
                        next_state[i*16+j] = 1'b0;
                end
            end
        end
    end

    // Sequential logic: load initial state or update to next state on every clock cycle.
    always @(posedge clk) begin
        if(load)
            grid <= data;
        else
            grid <= next_state;
    end

    // Assign current grid state to output.
    assign q = grid;

endmodule