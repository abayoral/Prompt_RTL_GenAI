module top_module(
    input wire clk,
    input wire load,
    input wire [511:0] data
);

    reg [511:0] q;
    reg [511:0] next_q;
    integer i;

    // Combinational logic: compute next state for each cell using Rule 90
    always @(*) begin
        for (i = 0; i < 512; i = i + 1) begin
            if (i == 0)
                // For the first cell, left neighbor is assumed to be 0.
                next_q[i] = 0 ^ q[i+1];
            else if (i == 511)
                // For the last cell, the right neighbor is assumed to be 0.
                next_q[i] = q[i-1] ^ 0;
            else
                // For all interior cells, perform XOR on left and right neighbors.
                next_q[i] = q[i-1] ^ q[i+1];
        end
    end

    // Sequential logic: load new data or update the state according to Rule 90
    always @(posedge clk) begin
        if (load)
            q <= data;
        else
            q <= next_q;
    end

endmodule