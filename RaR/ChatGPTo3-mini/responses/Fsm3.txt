module top_module(
    input clk,
    input in,
    input areset,
    output reg out
);

    // Define state encoding using 2 bits for four states
    localparam A = 2'd0,
               B = 2'd1,
               C = 2'd2,
               D = 2'd3;

    reg [1:0] state, next_state;

    // Combinational logic for state transitions
    always @(*) begin
        case (state)
            A: begin
                if (in)
                    next_state = B;
                else
                    next_state = A;
            end
            B: begin
                if (in)
                    next_state = B;
                else
                    next_state = C;
            end
            C: begin
                if (in)
                    next_state = D;
                else
                    next_state = A;
            end
            D: begin
                if (in)
                    next_state = B;
                else
                    next_state = C;
            end
            default: next_state = A; // Default to state A
        endcase
    end

    // State flip-flops with asynchronous reset
    always @(posedge clk or posedge areset) begin
        if (areset)
            state <= A;
        else
            state <= next_state;
    end

    // Output logic based solely on the current state (Moore machine)
    always @(*) begin
        case (state)
            D: out = 1;
            default: out = 0;
        endcase
    end

endmodule