module parallel2serial(
    input        clk,
    input        rst_n,
    input  [3:0] d,
    output reg   valid_out,
    output reg   dout
);

  reg [1:0] cnt;
  reg [3:0] data_reg;

  // Synchronous process for conversion and state updates
  always @(posedge clk or negedge rst_n)
  begin
    if (!rst_n) begin
      cnt        <= 2'd0;
      data_reg   <= 4'd0;
      dout       <= 1'b0;
      valid_out  <= 1'b0;
    end else begin
      // When counter resets to 0, load new parallel data from "d" into data_reg.
      if (cnt == 2'd0) begin
        data_reg  <= d;
      end

      // Output the corresponding bit based on the counter value.
      case (cnt)
        2'd0: dout <= data_reg[3]; // MSB first
        2'd1: dout <= data_reg[2];
        2'd2: dout <= data_reg[1];
        2'd3: dout <= data_reg[0]; // LSB last
      endcase

      // Assert valid_out during the entire conversion cycle.
      valid_out <= 1'b1;

      // Update counter: when final bit has been output, reset counter to 0.
      if (cnt == 2'd3)
        cnt <= 2'd0;
      else
        cnt <= cnt + 2'd1;
    end
  end

endmodule