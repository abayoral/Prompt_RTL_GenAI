module top_module(
    input a,
    input b,
    input c,
    input d,
    output out
);
  // The original Karnaugh‐map (with columns for a'b', a'b, ab, ab' and rows for c'd', c'd, cd, cd')
  // had 1’s in the following cells:
  //   • (c'd', a'b')     a=0, b=0, c=0, d=0
  //   • (c'd', ab')      a=1, b=0, c=0, d=0
  //   • (c'd, a'b')      a=0, b=0, c=0, d=1
  //   • (c'd, a'b)       a=0, b=1, c=0, d=1
  //   • (cd, ab)         a=1, b=1, c=1, d=1
  //   • (cd', a'b)       a=0, b=1, c=1, d=0
  //   • (cd', ab)        a=1, b=1, c=1, d=0
  // Plus one don’t-care (marked “d”) in cell (cd, ab').
  //
  // A careful grouping (using the don’t‐care as a 1 when it leads to larger groups)
  // produces the following sum‐of‐products simplified expression:
  //
  //    out = b' c' d' + a' c' d + b c d' + a c d
  //
  // Note: (b' means NOT b, i.e. ~b in Verilog.)
  //
  // For reference, one possible (though not unique) minimal product‐of‐sums form is:
  //
  //    out = (b' + c + d) · (a' + c + d') · (a + b + c') · (a + b' + c' + d') · (a' + b + c' + d)
  //
  // Here we implement the sum‐of‐products expression.
  
  assign out = ((~b) & (~c) & (~d)) | ((~a) & (~c) & d) | (b & c & (~d)) | (a & c & d);

endmodule