module freq_divbyodd #(parameter NUM_DIV = 5)(
    input clk,
    input rst_n,
    output clk_div
);

  // Calculate half of the divider. For an odd divisor, integer division will floor the half value.
  localparam HALF_COUNT = NUM_DIV / 2;
  // Determine the number of bits required to count up to NUM_DIV-1.
  localparam WIDTH = $clog2(NUM_DIV);

  // Two internal counters for rising and falling edge processes.
  reg [WIDTH-1:0] cnt1, cnt2;
  // Two auxiliary clock signals for the two edges.
  reg clk_div1, clk_div2;

  // Process triggered on the rising edge of clk.
  // This process increments cnt1, and toggles clk_div1 when the counter reaches HALF_COUNT.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      cnt1      <= 0;
      clk_div1  <= 0;
    end
    else begin
      if (cnt1 == NUM_DIV - 1)
        cnt1 <= 0;
      else
        cnt1 <= cnt1 + 1;

      if (cnt1 == HALF_COUNT)
        clk_div1 <= ~clk_div1;
    end
  end

  // Process triggered on the falling edge of clk.
  // This process increments cnt2, and toggles clk_div2 when the counter reaches HALF_COUNT.
  always @(negedge clk or negedge rst_n) begin
    if (!rst_n) begin
      cnt2      <= 0;
      clk_div2  <= 0;
    end
    else begin
      if (cnt2 == NUM_DIV - 1)
        cnt2 <= 0;
      else
        cnt2 <= cnt2 + 1;

      if (cnt2 == HALF_COUNT)
        clk_div2 <= ~clk_div2;
    end
  end

  // The final divided clock is produced by logically OR-ing the two auxiliary clocks.
  assign clk_div = clk_div1 | clk_div2;

endmodule