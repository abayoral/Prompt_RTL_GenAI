You are tasked with designing a detailed Verilog module named "float_multi" that performs multiplication of 32-bit single-precision floating-point numbers, complying with the IEEE 754 standard. This module is intended for use in high-precision arithmetic operations across various computational systems, ensuring that the output adheres to the standardized format.

The module must include a variety of input and output ports, as well as several internal signals to manage and control the multiplication process. Below is an elaborate description of the components and the sequence of operations that need to be implemented:

Input Ports:
• clk: A synchronization clock signal that coordinates the sequential operations within the module.
• rst: An active-high reset signal that sets the module into a known initial state, guaranteeing system reliability by clearing previous states or errors.
• a (32-bit input): This represents the first operand provided in the IEEE 754 single-precision floating-point format.
• b (32-bit input): This represents the second operand, also formatted as a 32-bit IEEE 754 floating-point number.

Output Port:
• z (32-bit registered output): This output delivers the result of multiplying operands "a" and "b". The result must conform to the IEEE 754 single-precision floating-point standard.

Internal Signals:
• Cycle Control:
  - counter (3-bit register): Serves as a cycle counter to sequence the operations accurately, ensuring proper timing and synchronization for each phase of the multiplication process.
  
• Component Extraction:
  - a_mantissa, b_mantissa, z_mantissa (each 24-bit register): These registers hold the mantissa (fractional parts) extracted from the operands and the resultant product.
  - a_exponent, b_exponent, z_exponent (each 10-bit register): These registers store the exponents associated with the floating-point representations of the operands and the output.
  - a_sign, b_sign, z_sign (each a 1-bit register): These bits indicate the sign (positive or negative) of the respective operands and result.
  
• Intermediate Calculations:
  - product (50-bit register): Holds the intermediate product of the input mantissas before any rounding or normalization is applied.
  - guard_bit, round_bit, sticky (each 1-bit register): These control bits are crucial for implementing the rounding logic to ensure that the final result meets precision requirements.

Operational Phases:
1. Initialization Phase:
   - On assertion of the reset signal (rst), the cycle counter is reset to zero to initialize the module. This phase sets up a clean starting point for the ensuing processes.

2. Input Processing Phase:
   - In the first clock cycle following reset, break down the input numbers "a" and "b" into their constituent parts (mantissa, exponent, and sign) and store these in the corresponding internal registers.

3. Special Case Handling Phase:
   - Probe the input operands for special cases such as NaN (Not a Number) or infinity. The module must be capable of identifying these instances and processing them accordingly as per IEEE 754 standards.

4. Normalization Phase:
   - Adjust the mantissas to ensure they are in a normalized form. Normalization is critical for maintaining the accuracy of the subsequent multiplication operation.

5. Multiplication Phase:
   - Perform the multiplication of the mantissas. In this stage, it is essential to synchronize the sign bits and compute the combined exponent correctly, thereby obtaining a raw multiplication result.

6. Rounding and Adjustment Phase:
   - Apply a rounding mechanism that takes into account the guard, round, and sticky bits to refine the raw product. This phase also involves adjusting the exponent if necessary to ensure that the final number is represented accurately.

7. Output Generation Phase:
   - Once the product has been rounded and normalized, format the result to meet the IEEE 754 single-precision standard. This includes checking for and handling overflows or underflows and then outputting the final result through port "z".

Your task is to create the complete Verilog implementation for the "float_multi" module that incorporates all the above details, ensuring that the module operates accurately and in accordance with the IEEE 754 specifications. Please note that only the design and implementation of the module are required—do not include any solutions, answers, or simulation results.