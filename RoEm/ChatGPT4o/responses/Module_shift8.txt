```verilog
module my_dff8(
    input clk,
    input [7:0] d,
    output reg [7:0] q
);
    always @(posedge clk) begin
        q <= d;
    end
endmodule

module top_module (
    input clk,
    input [7:0] d,
    input [1:0] sel,
    output [7:0] q
);
    wire [7:0] q0, q1, q2;
    
    // Instantiate three my_dff8 modules
    my_dff8 dff0 (
        .clk(clk),
        .d(d),
        .q(q0)
    );
    
    my_dff8 dff1 (
        .clk(clk),
        .d(q0),
        .q(q1)
    );
    
    my_dff8 dff2 (
        .clk(clk),
        .d(q1),
        .q(q2)
    );
    
    // 4-to-1 multiplexer to select the output
    always @(*) begin
        case(sel)
            2'b00: q = d;   // No delay, output input directly
            2'b01: q = q0;  // Delayed by one flip-flop
            2'b10: q = q1;  // Delayed by two flip-flops
            2'b11: q = q2;  // Delayed by three flip-flops
            default: q = 8'b0; // Default case (shouldn't occur)
        endcase
    end
endmodule
```