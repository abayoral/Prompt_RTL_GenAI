```verilog
module ALU (
    input [31:0] a,
    input [31:0] b,
    input [5:0] aluc,
    output reg [31:0] r,
    output reg zero,
    output reg carry,
    output reg negative,
    output reg overflow,
    output reg flag
);

    // Define operation codes
    localparam ADD  = 6'b000000;
    localparam SUB  = 6'b000001;
    localparam AND  = 6'b000010;
    localparam OR   = 6'b000011;
    localparam XOR  = 6'b000100;
    localparam NOR  = 6'b000101;
    localparam SLL  = 6'b000110;
    localparam SRL  = 6'b000111;
    localparam SRA  = 6'b001000;
    localparam SLT  = 6'b001001;
    localparam SLTU = 6'b001010;
    localparam LUI  = 6'b001011;

    always @(*) begin
        // Initialize flags
        zero = 0;
        carry = 0;
        negative = 0;
        overflow = 0;
        flag = 0;

        case (aluc)
            ADD: begin
                {carry, r} = a + b;
                overflow = (a[31] == b[31]) && (r[31] != a[31]);
            end
            SUB: begin
                {carry, r} = a - b;
                overflow = (a[31] != b[31]) && (r[31] != a[31]);
            end
            AND: r = a & b;
            OR:  r = a | b;
            XOR: r = a ^ b;
            NOR: r = ~(a | b);
            SLL: r = b << a[4:0];
            SRL: r = b >> a[4:0];
            SRA: r = b >>> a[4:0];
            SLT: begin
                r = ($signed(a) < $signed(b)) ? 32'b1 : 32'b0;
                flag = r[0];
            end
            SLTU: begin
                r = (a < b) ? 32'b1 : 32'b0;
                flag = r[0];
            end
            LUI: r = {b[15:0], 16'b0};
            default: r = 32'bz;
        endcase

        // Set negative flag if the result is negative
        negative = r[31];
        
        // Set zero flag if the result is zero
        zero = (r == 32'b0);
    end
endmodule
```