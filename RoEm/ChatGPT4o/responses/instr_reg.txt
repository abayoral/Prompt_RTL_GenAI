```verilog
module instr_reg (
    input wire clk,
    input wire rst,
    input wire [1:0] fetch,
    input wire [7:0] data,
    output reg [2:0] ins,
    output reg [4:0] ad1,
    output reg [7:0] ad2
);

    reg [7:0] ins_p1;
    reg [7:0] ins_p2;

    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            // Asserts upon reset
            ins_p1 <= 8'b0;
            ins_p2 <= 8'b0;
        end else begin
            if (fetch == 2'b01) begin
                // Fetch from register source
                ins_p1 <= data;
            end else if (fetch == 2'b10) begin
                // Fetch from memory source
                ins_p2 <= data;
            end
            // If fetch does not match, retain existing values
        end
    end

    always @(*) begin
        // Outputs based on fetch signals
        case (fetch)
            2'b01: begin
                ins = ins_p1[7:5]; // High 3 bits
                ad1 = ins_p1[4:0]; // Low 5 bits
                ad2 = 8'b0;        // Not used in this fetch mode
            end
            2'b10: begin
                ins = 3'b0;        // Not used in this fetch mode
                ad1 = 5'b0;        // Not used in this fetch mode
                ad2 = ins_p2;      // Full 8 bits
            end
            default: begin
                ins = 3'b0;        // Default state
                ad1 = 5'b0;        // Default state
                ad2 = 8'b0;        // Default state
            end
        endcase
    end

endmodule
```
