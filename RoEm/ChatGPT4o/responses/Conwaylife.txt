```verilog
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q); 
    
    // Function to get the state of the cell with wrapped-around indices
    function get;
        input [3:0] x, y;
        begin
            get = q[((x + 16) % 16) * 16 + ((y + 16) % 16)];
        end
    endfunction
    
    integer i, j;
    reg [3:0] x, y;
    reg [255:0] next_q;
    
    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else begin
            for (x = 0; x < 16; x = x + 1) begin
                for (y = 0; y < 16; y = y + 1) begin
                    // Count the living neighbors
                    integer neighbors;
                    neighbors = get(x-1, y-1) + get(x-1, y) + get(x-1, y+1) +
                                get(x, y-1)             + get(x, y+1) +
                                get(x+1, y-1) + get(x+1, y) + get(x+1, y+1);
                                
                    // Determine next state of the cell
                    if (neighbors == 3 || (neighbors == 2 && get(x, y))) begin
                        next_q[x*16 + y] = 1'b1;
                    end else begin
                        next_q[x*16 + y] = 1'b0;
                    end
                end
            end
            q <= next_q;
        end
    end

endmodule
```
