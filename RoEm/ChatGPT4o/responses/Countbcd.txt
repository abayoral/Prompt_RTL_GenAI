```verilog
module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output [15:0] q);
    
    // Internal wires for carries between counters
    wire carry0, carry1, carry2;
    
    // One-digit BCD counters
    bcd_counter ones_digit (
        .clk(clk),
        .reset(reset),
        .carry_out(carry0),
        .q(q[3:0])
    );
    
    bcd_counter tens_digit (
        .clk(clk),
        .reset(reset),
        .carry_in(carry0),
        .carry_out(carry1),
        .ena(ena[1]),
        .q(q[7:4])
    );
    
    bcd_counter hundreds_digit (
        .clk(clk),
        .reset(reset),
        .carry_in(carry1),
        .carry_out(carry2),
        .ena(ena[2]),
        .q(q[11:8])
    );
    
    bcd_counter thousands_digit (
        .clk(clk),
        .reset(reset),
        .carry_in(carry2),
        .ena(ena[3]),
        .q(q[15:12])
    );
    
    assign ena[1] = carry0;
    assign ena[2] = carry1;
    assign ena[3] = carry2;

endmodule

module bcd_counter (
    input clk,
    input reset,
    input carry_in,
    output carry_out,
    output reg ena,
    output reg [3:0] q);

    always @(posedge clk) begin
        if (reset) begin
            q <= 4'b0000;
            ena <= 0;
        end
        else if (carry_in || ena) begin
            if (q == 4'b1001) begin
                q <= 4'b0000;
                ena <= 1;
            end
            else begin
                q <= q + 1;
                ena <= 0;
            end
        end
    end

    assign carry_out = (q == 4'b1001);

endmodule
```