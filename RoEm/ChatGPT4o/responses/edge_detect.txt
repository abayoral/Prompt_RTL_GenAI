```verilog
module edge_detect (
    input wire clk,
    input wire rst_n,
    input wire a,
    output reg rise,
    output reg down
);

    reg a_delayed;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // Reset all outputs and internal signals to 0
            rise <= 1'b0;
            down <= 1'b0;
            a_delayed <= 1'b0;
        end else begin
            // Detect rising edge: previous 'a' was 0, current 'a' is 1
            if (!a_delayed && a) begin
                rise <= 1'b1;
            end else begin
                rise <= 1'b0;
            end

            // Detect falling edge: previous 'a' was 1, current 'a' is 0
            if (a_delayed && !a) begin
                down <= 1'b1;
            end else begin
                down <= 1'b0;
            end

            // Update delayed version of 'a' for edge detection in the next cycle
            a_delayed <= a;
        end
    end

endmodule
```