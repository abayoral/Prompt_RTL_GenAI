```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    reg [3:0] state;
    reg [7:0] data;
    reg [3:0] bit_count;
    reg sample;
    reg stop_bit_detected;
    wire odd_parity;

    // Define FSM states
    localparam IDLE = 4'b0000;
    localparam START = 4'b0001;
    localparam DATA = 4'b0010;
    localparam PARITY = 4'b0011;
    localparam STOP = 4'b0100;
    localparam ERROR = 4'b0101;

    // Instantiate the parity module
    parity parity_checker(
        .clk(clk),
        .reset(reset | (state == START && bit_count == 0)), // Reset when state is START and new byte begins
        .in(in),
        .odd(odd_parity)
    );

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 0;
            data <= 0;
            done <= 0;
            sample <= 0;
            stop_bit_detected <= 0;
        end else begin
            case (state)
                IDLE: begin
                    done <= 0;
                    if (!in) begin // Start bit detected (expected to be 0)
                        state <= START;
                        bit_count <= 0;
                        sample <= 1;
                    end
                end

                START: begin
                    if (sample) begin
                        state <= DATA;
                        sample <= 0;
                    end
                end

                DATA: begin
                    if (bit_count < 8) begin
                        data[bit_count] <= in;
                        bit_count <= bit_count + 1;
                    end else begin
                        state <= PARITY;
                    end
                end

                PARITY: begin
                    // Validate parity
                    if (odd_parity) begin
                        state <= STOP;
                    end else begin
                        state <= ERROR;
                    end
                end

                STOP: begin
                    if (in) begin // Stop bit detected (expected to be 1)
                        out_byte <= data;
                        done <= 1;
                        state <= IDLE;
                        stop_bit_detected <= 1;
                    end else begin
                        state <= ERROR;
                    end
                end

                ERROR: begin
                    done <= 0;
                    if (in) begin // Wait until stop bit detected to reset
                        state <= IDLE;
                    end
                end

            endcase
        end
    end

endmodule
```