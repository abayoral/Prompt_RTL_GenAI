```verilog
module top_module(
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q 
);

    always @(posedge clk) begin
        if (load) begin
            q <= data; // Load initial data into q
        end else begin
            // Calculate next state using Rule 90
            q[0] <= q[1]; // q[-1] is 0, so q[0] becomes q[1] because 0 XOR q[1] = q[1]
            q[511] <= q[510]; // q[512] is 0, so q[511] becomes q[510] because q[510] XOR 0 = q[510]
            // For other positions, apply Rule 90: q[i] = q[i-1] XOR q[i+1]
            for (integer i = 1; i < 511; i = i + 1) begin
                q[i] <= q[i-1] ^ q[i+1];
            end
        end
    end

endmodule
```