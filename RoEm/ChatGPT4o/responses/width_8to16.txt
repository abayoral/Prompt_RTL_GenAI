```verilog
module width_8to16 (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    reg [7:0] data_reg;
    reg state;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            valid_out <= 0;
            data_out <= 16'b0;
            data_reg <= 8'b0;
            state <= 0;
        end else begin
            if (valid_in) begin
                if (state == 0) begin
                    data_reg <= data_in;
                    state <= 1;
                    valid_out <= 0;
                end else if (state == 1) begin
                    data_out <= {data_reg, data_in};
                    valid_out <= 1;
                    state <= 0;
                end
            end else begin
                valid_out <= 0;
            end
        end
    end

endmodule
```
