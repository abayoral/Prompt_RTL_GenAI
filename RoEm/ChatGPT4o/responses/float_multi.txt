```verilog
module float_multi(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

    // Internal Registers
    reg [23:0] a_mantissa, b_mantissa;
    reg [7:0] a_exponent, b_exponent;
    reg a_sign, b_sign;
    reg [47:0] product;
    reg [23:0] z_mantissa;
    reg [7:0] z_exponent;
    reg z_sign;
    
    // Rounding and Others
    reg guard_bit, round_bit, sticky;
    reg [2:0] counter;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            z <= 32'b0;
            counter <= 3'b0;
        end
        else begin
            case (counter)
                3'b000: begin
                    // Extract sign, exponent, and mantissa
                    a_sign <= a[31];
                    b_sign <= b[31];
                    a_exponent <= a[30:23];
                    b_exponent <= b[30:23];
                    a_mantissa <= {1'b1, a[22:0]};
                    b_mantissa <= {1'b1, b[22:0]};
                    
                    // Special case checks
                    if (a_exponent == 8'hFF || b_exponent == 8'hFF) begin
                        if (a[30:0] != 0 || b[30:0] != 0) begin
                            z <= {1'b0, 8'hFF, 23'h400000}; // NaN
                        end else if (a_exponent == 8'hFF && b_exponent == 8'hFF) begin
                            z <= {a_sign ^ b_sign, 8'hFF, 23'b0}; // infinity x infinity
                        end else begin
                            z <= 32'b0; // infinity x 0
                        end
                    end else if (a_exponent == 0 || b_exponent == 0) begin
                        z <= 32'b0; // zero result if one of the inputs is zero
                    end else begin
                        counter <= counter + 1'b1;
                    end
                end
                
                3'b001: begin
                    // Multiplier stage: multiply mantissas
                    product <= a_mantissa * b_mantissa;
                    
                    // Add exponents and adjust for bias
                    z_exponent <= a_exponent + b_exponent - 8'h7F;
                    z_sign <= a_sign ^ b_sign;
                    
                    counter <= counter + 1'b1;
                end
                
                3'b010: begin
                    // Normalize the product
                    if (product[47]) begin
                        z_mantissa <= product[47:24];
                        guard_bit <= product[23];
                        round_bit <= product[22];
                        sticky <= |product[21:0];
                        z_exponent <= z_exponent + 1;
                    end else begin
                        z_mantissa <= product[46:23];
                        guard_bit <= product[22];
                        round_bit <= product[21];
                        sticky <= |product[20:0];
                    end
                    
                    counter <= counter + 1'b1;
                end
                
                3'b011: begin
                    // Rounding
                    if (guard_bit && (round_bit || sticky || z_mantissa[0])) begin
                        z_mantissa <= z_mantissa + 1'b1;
                        
                        if (z_mantissa == 24'hFFFFFF) begin
                            z_exponent <= z_exponent + 1;
                        end
                    end
                
                    // Handle overflow to infinity
                    if (z_exponent >= 8'hFF) begin
                        z <= {z_sign, 8'hFF, 23'b0}; // Infinity
                    end else begin
                        z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                    end
                    
                    counter <= 3'b000;
                end
            endcase
        end
    end
endmodule
```
This module, `float_multi`, efficiently multiplies two 32-bit floating-point numbers following the IEEE 754 standard. It handles initialization, monitors special cases, performs normalization and rounding, and generates the result in a manner consistent with precision and compliance expectations.