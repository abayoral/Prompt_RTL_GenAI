```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);
    
    // State encoding
    typedef enum reg [2:0] {
        IDLE    = 3'b000,
        START   = 3'b001,
        DATA    = 3'b010,
        STOP    = 3'b011,
        DONE    = 3'b100
    } state_t;
    
    state_t current_state, next_state;
    reg [7:0] data_shift_reg; // Data shift register
    reg [2:0] bit_counter;    // Bit counter to track the number of received bits

    // State transition logic
    always @(posedge clk) begin
        if (reset) begin
            current_state <= IDLE;
            bit_counter <= 3'b000;
            done <= 1'b0;
        end else begin
            current_state <= next_state;
        end
    end
    
    // Next state logic and datapath operations
    always @(*) begin
        // Default assignments
        next_state = current_state;
        done = 1'b0;

        case (current_state)
            IDLE: begin
                if (in == 1'b0) begin // Start bit detected
                    next_state = START;
                end
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                data_shift_reg = {in, data_shift_reg[7:1]};
                if (bit_counter == 7) begin // Finish receiving 8 bits
                    next_state = STOP;
                end else begin
                    next_state = DATA;
                end
            end
            STOP: begin
                if (in == 1'b1) begin // Stop bit detected
                    next_state = DONE;
                end else begin
                    next_state = IDLE; // Wait for a valid stop bit
                end
            end
            DONE: begin
                done = 1'b1;
                next_state = IDLE;
            end
            default: next_state = IDLE;
        endcase
    end

    // Synchronous logic to handle bit_counter and output data
    always @(posedge clk) begin
        if (reset) begin
            bit_counter <= 3'b000;
            out_byte <= 8'b00000000;
            data_shift_reg <= 8'b00000000;
        end else if (current_state == DATA) begin
            bit_counter <= bit_counter + 1;
        end else if (current_state == DONE) begin
            out_byte <= data_shift_reg;
        end
    end

endmodule
```