```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
);

    // State encoding
    typedef enum reg [1:0] {
        WAIT_FOR_START = 2'b00,  // Waiting for a start byte (bit[3]=1)
        BYTE_1_RECEIVED = 2'b01, // First byte received
        BYTE_2_RECEIVED = 2'b10, // Second byte received
        MESSAGE_DONE = 2'b11     // Third byte received, message completed
    } state_t;

    state_t state, next_state;

    // State transition logic
    always @(*) begin
        case (state)
            WAIT_FOR_START: begin
                if (in[3])
                    next_state = BYTE_1_RECEIVED;
                else
                    next_state = WAIT_FOR_START;
            end
            BYTE_1_RECEIVED: begin
                next_state = BYTE_2_RECEIVED;
            end
            BYTE_2_RECEIVED: begin
                next_state = MESSAGE_DONE;
            end
            MESSAGE_DONE: begin
                next_state = WAIT_FOR_START;
            end
            default: begin
                next_state = WAIT_FOR_START;
            end
        endcase
    end

    // State flip-flops (sequential)
    always @(posedge clk) begin
        if (reset) begin
            state <= WAIT_FOR_START;
        end
        else begin
            state <= next_state;
        end
    end

    // Output logic
    always @(posedge clk) begin
        if (reset) begin
            done <= 0;
        end
        else begin
            done <= (state == MESSAGE_DONE);
        end
    end

endmodule
```