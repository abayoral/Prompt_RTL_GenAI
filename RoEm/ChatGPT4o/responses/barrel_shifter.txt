```verilog
module barrel_shifter (
    input  [7:0] data_in,
    input  [2:0] ctrl,
    output [7:0] data_out
);

    wire [7:0] stage1, stage2;

    // Stage 1: shift by 4 positions if ctrl[2] is set
    assign stage1[7] = ctrl[2] ? data_in[3] : data_in[7];
    assign stage1[6] = ctrl[2] ? data_in[2] : data_in[6];
    assign stage1[5] = ctrl[2] ? data_in[1] : data_in[5];
    assign stage1[4] = ctrl[2] ? data_in[0] : data_in[4];
    assign stage1[3] = ctrl[2] ? data_in[7] : data_in[3];
    assign stage1[2] = ctrl[2] ? data_in[6] : data_in[2];
    assign stage1[1] = ctrl[2] ? data_in[5] : data_in[1];
    assign stage1[0] = ctrl[2] ? data_in[4] : data_in[0];

    // Stage 2: shift by 2 positions if ctrl[1] is set
    assign stage2[7] = ctrl[1] ? stage1[5] : stage1[7];
    assign stage2[6] = ctrl[1] ? stage1[4] : stage1[6];
    assign stage2[5] = ctrl[1] ? stage1[3] : stage1[5];
    assign stage2[4] = ctrl[1] ? stage1[2] : stage1[4];
    assign stage2[3] = ctrl[1] ? stage1[1] : stage1[3];
    assign stage2[2] = ctrl[1] ? stage1[0] : stage1[2];
    assign stage2[1] = ctrl[1] ? stage1[7] : stage1[1];
    assign stage2[0] = ctrl[1] ? stage1[6] : stage1[0];

    // Stage 3: shift by 1 position if ctrl[0] is set
    assign data_out[7] = ctrl[0] ? stage2[6] : stage2[7];
    assign data_out[6] = ctrl[0] ? stage2[5] : stage2[6];
    assign data_out[5] = ctrl[0] ? stage2[4] : stage2[5];
    assign data_out[4] = ctrl[0] ? stage2[3] : stage2[4];
    assign data_out[3] = ctrl[0] ? stage2[2] : stage2[3];
    assign data_out[2] = ctrl[0] ? stage2[1] : stage2[2];
    assign data_out[1] = ctrl[0] ? stage2[0] : stage2[1];
    assign data_out[0] = ctrl[0] ? stage2[7] : stage2[0];

endmodule
```