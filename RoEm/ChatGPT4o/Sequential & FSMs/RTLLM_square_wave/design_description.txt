I would like you to assume the role of a professional Verilog designer tasked with creating a Verilog module for a straightforward, yet functional square wave generator. The key specifications for this module are as follows:

Module Name:  
- **square_wave**

Purpose:
- This module is designed to generate square wave signals whose frequency can be modified according to a specified input. It operates by accepting an input clock signal and a frequency control parameter, outputting a square wave signal that toggles at the frequency defined by the input.

Input Ports:
- **clk**: This is the clock signal that drives the module's internal operations. 
- **[7:0]freq**: An 8-bit input for frequency control, determining the toggle rate of the square wave signal. This value specifies the cycle count for switching the state of the output wave.

Output Ports:
- **wave_out**: This is the resulting square wave signal, which toggles between low and high states at intervals dictated by the frequency input.

Internal Registers and Counter Logic:
- **count (reg [7:0])**: An 8-bit internal register functioning as a counter. This counter plays a critical role in managing the square wave's toggling intervals. 
  - Initiated on the rising edge of the clock signal, the counter increments with each cycle. 
  - Once the count reaches (freq - 1), it resets back to 0, and at this instance, the wave_out signal is toggled, meaning its state changes from low to high or from high to low.
  - If the count has not yet met the freq value, it continues to increment with each consecutive clock cycle until it reaches the predefined threshold.

Square Wave Generation Logic:
- This module generates a square wave by utilizing the freq parameter to control the toggling rate of the wave_out signal.
- Notably, the toggle speed of wave_out is inversely related to the freq value specified; a higher freq value results in a slower toggling rate (lower frequency), while a lower freq leads to a faster toggle (higher frequency).

Please provide the complete Verilog code for this module, adhering to the functional and structural requirements outlined above.