I'm seeking assistance from a professional Verilog designer to implement a simplified radix-2 division algorithm tailored for 8-bit operations, which should effectively handle both signed and unsigned integer division. This project involves designing a Verilog module named `radix2_div` and encapsulating the division logic, which must operate on both signed (when the `sign` input is 1) and unsigned (when the `sign` input is 0) 8-bit integers. Below are the specifics of the module and its requirements:

Module: `radix2_div`

Input Ports:
- `clk`: A clock signal for driving synchronous processes within the module.
- `rst`: A reset signal to reinitialize or reset the division process and any internal states.
- `sign`: A 1-bit signal that determines whether the division operation should be treated as signed (1) or unsigned (0).
- `dividend`: An 8-bit signal representing the number to be divided.
- `divisor`: An 8-bit signal representing the number by which the dividend should be divided.
- `opn_valid`: A 1-bit control signal indicating that a valid division request is active and the inputs are ready to be processed.

Output Ports:
- `res_valid`: A 1-bit signal that signifies the validity and readiness of the division result.
- `result`: A 16-bit output composed of the division result, where the upper 8 bits represent the remainder of the division, and the lower 8 bits hold the quotient.

Implementation Details:

1. **Operation Initiation**:
   - The process should start when `opn_valid` is high and `res_valid` is low. At this point, the current values of the `dividend` and `divisor` are captured for processing.
   - A shift register (`SR`) is initialized with the absolute value of the `dividend` shifted left by one bit position.
   - The negated absolute value of the `divisor` is stored as `NEG_DIVISOR`.
   - A counter (`cnt`) is initialized to 1, indicating the beginning of the division process. Concurrently, a start signal (`start_cnt`) is also set to 1 to flag the continuation of the operation until completion.

2. **Division Process**:
   - While `start_cnt` is high, the module undertakes the division through iterative steps. The procedure involves checking if the counter (`cnt`) has achieved a count of 8, which implies that the division operation is complete:
     - Once complete, both `cnt` and `start_cnt` are reset.
     - The shift register (`SR`) is updated to reflect the final values of the remainder and quotient.
   - If the division is yet to be completed, the counter (`cnt`) is incremented by 1. The shift register (`SR`) undergoes an update by simulating a subtraction involving `NEG_DIVISOR` and utilizing a multiplexer to choose between results based on a carry-out signal.
   - This process includes shifting the shift register left and inserting the new carry-out result into the least significant bit.

3. **Result Validity**:
   - The signal `res_valid` is controlled according to the reset condition, the state of the counter, and whether the output result has been fetched or utilized.

The project compels a detailed understanding of digital logic design, specifically in implementing shift-and-subtract division techniques. The implementation will involve careful consideration of handling both signed and unsigned arithmetic and ensuring the results are represented accurately in the designated 16-bit format. I require a comprehensive Verilog code that integrates all these aspects into a cohesive and functional module.

Please provide a complete and precise Verilog code solution that accomplishes these requirements while adhering to digital design best practices.