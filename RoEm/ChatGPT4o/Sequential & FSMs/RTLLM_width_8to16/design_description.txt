As an experienced Verilog designer, your task is to construct a Verilog module named `width_8to16` that efficiently handles data width conversion, transforming an 8-bit input into a 16-bit output. This module is designed to hold two specific 8-bit data inputs, concatenate them, and provide a valid 16-bit output on the subsequent clock cycle. Here’s an elaborate outline of the module requirements and expectations:

- **Module Purpose**: 
  - The primary function of this module is to take pairs of incoming 8-bit data streams and combine them into a single 16-bit output. 
  - It ensures that the first 8-bit data byte received is mapped to the higher-order bits of the 16-bit output, and the subsequent 8-bit data byte fills the lower-order bits.

- **System Operations**: 
  - The module operates under synchronous control guided by a clock signal (`clk`), ensuring all transitions and operations align with clock edges.
  - It incorporates an active-low reset signal (`rst_n`), triggering the module to return to an initial state under certain conditions.

- **Inputs and Outputs**:
  - **Inputs**:
    - `clk`: Synchronizes operations.
    - `rst_n`: Resets the module's state when active (0).
    - `valid_in`: Signals when incoming 8-bit data is available and valid.
    - `data_in`: Represents the 8-bit data to be processed and converted.
  - **Outputs**:
    - `valid_out`: A signal indicating the validity and readiness of `data_out`.
    - `data_out`: The 16-bit output resulting from the concatenation of two consecutive 8-bit inputs.

- **Behavioral Expectations**:
  - On receiving and validating the initial 8-bit data, it is stored temporarily.
  - Logic and control mechanisms must ensure that upon validation of a second 8-bit input, the module concatenates the first stored byte with the incoming byte.
  - The resulting 16-bit data is then outputted, with `valid_out` indicating the output's validity.

- **Edge Cases and Specific Scenarios**:
  - If the module is reset (`!rst_n`), all registers including any temporary storage for incoming data need to reset to an initial, known state—typically zeros.
  - In scenarios where only a single 8-bit data input is received without an immediate subsequent input, the system must maintain a waiting state without outputting `valid_out` until the second piece of input data completes the necessary pair.

In summarizing these requirements, detailed thinking around synchronization, data flow, state management, and the handling of valid/invalid data signals is crucial. These aspects are vital as they form the backbone of a robust design capable of operating seamlessly within broader digital systems.