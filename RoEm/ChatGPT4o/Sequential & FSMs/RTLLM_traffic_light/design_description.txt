Could you please assist by acting as a professional Verilog designer and help with implementing a traffic light system? This system should include three indicators for motor vehicles, namely red, yellow, and green lights, as well as an interactive pedestrian button. Under normal circumstances, the motor vehicle lane should follow a sequence where the green light remains on for 60 clock cycles, the yellow light for 5 clock cycles, and the red light for 10 clock cycles. However, when the pedestrian button is pressed, if the remaining green light duration is longer than 10 clock cycles, it should be reduced to 10 clock cycles, or if it is already 10 or fewer, it remains constant.

The traffic light and the pedestrian light should synchronize such that when the motor vehicle lane shows green or yellow, the pedestrian light remains red. Conversely, when the motor vehicle lane is red, the pedestrian light switches to green, but the simple focus here would be on the motor vehicle light.

For module naming:
Module Name:  
   traffic_light

Inputs should include:
   rst_n: A reset signal that is active low.
   clk: A clock signal that triggers events.
   pass_request: A signal indicating a request for vehicles to pass, triggered potentially by the pedestrian button.

Outputs to monitor include:
   clock[7:0]: An 8-bit output reflecting the internal counting mechanism.
   red, yellow, green: Indicator outputs signifying the current state of the traffic lights.

There are certain parameters and states to define:
   idle, s1_red, s2_yellow, s3_green: These should be enumeration values representing distinct states within the traffic light controller.

The system will use various registers and wires:
   cnt: An 8-bit register functioning as an internal counter to track timing.
   state: A 2-bit register that denotes the current state within the traffic light cycle.
   p_red, p_yellow, p_green: 1-bit registers meant to store the subsequent states of the red, yellow, and green traffic lights.

Suggestion for System Design:
The recommended design path involves using an always block to manage state transitions. Within this block, a case statement should be implemented to handle different states with specific behaviors:
- idle: This initial state configures all signals to zero and transitions immediately to the s1_red state.
- s1_red: Engages the red light, remaining for a few clock cycles before transitioning to the green state, unless conditions dictate staying longer.
- s2_yellow: Activates the yellow light for a few cycles before moving back to the red state unless circumstances require remaining active.
- s3_green: Turns on the green light for the determined cycles, before transitioning to yellow unless conditions favor an extension or early shift.

A second always block should be introduced to handle the counting process using the internal counter (cnt), adapting its values according to specific conditions:
- When (!rst_n), cnt should reset to a default value, like 10.
- If the pass_request is active and the green light is on, set cnt to a specific predefined duration.
- Conditions should be established for transitions among yellow and red states, modifying cnt as needed, transitioning based on whether a particular signal has ended or a new state begins.
- Normally, cnt should decrement with each clock cycle unless conditions dictate otherwise.

Finally, an assign statement is crucial to map the internal counter's current value to the clock output, and another always block should maintain consistency in output signals, ensuring they always reflect previous state's transitions at appropriate clock edges.

Could you provide the complete Verilog code for this traffic light controller, encompassing the above structure and stipulations?