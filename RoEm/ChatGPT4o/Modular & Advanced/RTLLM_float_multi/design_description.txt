Imagine you are a skilled Verilog designer, tasked with creating a module named `float_multi`. This module is integral to performing high-precision multiplication of 32-bit single-precision floating-point numbers in line with the IEEE 754 standard, a widely recognized format that includes a sign bit, an 8-bit exponent, and a 23-bit mantissa (plus an implicit leading 1). Your objective is to design an efficient and accurate multiplier for computational tasks that demand precision.

Here are the specific requirements and features your Verilog module should incorporate:

- **Module Name:** Your module should be named `float_multi`, signifying its role as a floating-point multiplier.

- **Input Ports:**
  - `clk (input)`: A clock signal is necessary for synchronizing operations in sequential circuits.
  - `rst (input)`: A reset signal, active high, is used to reinitialize the module into a known state.
  - `a (input [31:0])`: The first operand represented in the IEEE 754 format, comprising sign, exponent, and mantissa.
  - `b (input [31:0])`: The second operand, also in IEEE 754 standard format.

- **Output Ports:**
  - `z (output reg [31:0])`: The 32-bit result of the multiplication, delivered in IEEE 754 single-precision format.

- **Internal Signals:**
  - You will use a `counter` (reg [2:0]) for sequencing through different operational stages.
  - Mantissas of the inputs and output are stored in `a_mantissa`, `b_mantissa`, and `z_mantissa` respectively, with a width of 24 bits to accommodate the implicit bit.
  - Exponents from the operands and result are managed with `a_exponent`, `b_exponent`, and `z_exponent`, offering a wide range of exponents.
  - `a_sign`, `b_sign`, and `z_sign` handle the sign bit determination.
  - A 50-bit `product` signal will store the product of the mantissas, ensuring no loss of precision.
  - Perform rounding with the help of `guard_bit`, `round_bit`, and `sticky`.

- **Implementation Stages:**
  - **Initialization:** Start by resetting the counter using the `rst` signal to ensure operations begin correctly.
  - **Input Processing:** Extract mantissas, exponents, and sign bits during the first clock cycle.
  - **Special Cases Handling:** Include logic to identify and handle special cases like NaN or infinity, which have unique representations.
  - **Normalization:** Normalize mantissas where needed to maintain IEEE 754 compliance.
  - **Multiplication:** Multiply mantissas, account for sign bit multiplication, and adjust exponents appropriately using addition or subtraction logic.
  - **Rounding and Adjustment:** Implement rounding mechanisms that ensure precision; adjust exponents after rounding if necessary to maintain accuracy.
  - **Output Generation:** Formulate the final output in IEEE 754 format with careful attention to overflow and underflow, which might include special representations or handling.

Tasked with developing this module, consider the intricate details of IEEE 754, emphasizing accuracy and compliance throughout your design.