As an experienced Verilog designer, your task involves implementing an asynchronous FIFO (First-In-First-Out) buffer with configurable parameters for bit width and depth. The FIFO is intended to manage a stream of data in a manner where the write and read operations are clocked by different asynchronous clock signals. Here's what you need to consider during this implementation:

1. **Parameter Configuration**: 
    - Two main parameters should control the FIFO's capacity:
        - `DEPTH`: This parameter defines the number of storage slots available in the FIFO, with a default value of 16.
        - `WIDTH`: This parameter specifies the bit-width of each data entry, defaulting to 8 bits.

2. **Asynchronous Dual-Port RAM Setup**:
    - Develop a dual-port RAM module, which will act as the main storage structure for the FIFO.
    - Ensure that this RAM can handle concurrent write (wclk, wdata) and read (rclk) operations with separate input ports for each function.
    - Address lines should specifically be structured using `$clog2(DEPTH)-1:0` to ensure they match the address width needed for indexing into the RAM array.

3. **Data Write Controller**:
    - This section of the module will handle the increment of the write pointer (waddr) whenever a write enable signal (wenc) is received.
    - The write pointer should reset whenever the write reset signal (wrstn) is inactive.

4. **Data Read Controller**:
    - Similar to the write controller, this logic will increment a read pointer (raddr) conditionally upon the read enable signal (renc) and manage the read resets (rrstn).
  
5. **Pointer Synchronization**:
    - Implement synchronization between read and write pointers using Gray code to minimize synchronization glitches.
    - The read pointer should be collected using a two-flip-flop mechanism clocked by the write clock (wclk), and vice versa for the write pointer with the read clock (rclk).

6. **Gray Code Implementation**:
    - Use Gray code to prevent potential errors caused by rapid changes in pointer values. Convert the binary write and read pointers to Gray code for stability.
    - Utilize the Gray code to manage the addressing within the RAM due to its robustness against misalignment.

7. **Full and Empty Condition Delineation**:
    - Employ logic to ascertain when the FIFO is full or empty:
        - The FIFO is considered full when the write pointer is one cycle ahead of the read pointer (as per Gray code pointers), and their most significant bits differ while other bits match.
        - The FIFO is considered empty when the read pointer matches the write pointer in Gray code.

8. **Signal Port Definitions**:
    - Define the following input ports:
        - `wclk`, `rclk`: Separate clock inputs for writing and reading operations, respectively.
        - `wrstn`, `rrstn`: Reset controls, assumed inactive at logics '1'.
        - `winc`, `rinc`: Control signals to increment write and read operations.
        - `wdata`: Data input for writes, spanning [WIDTH-1:0].
    - Define these output ports:
        - `wfull`: Outputs high when the FIFO cannot accept more data (i.e., full condition).
        - `rempty`: Outputs high when the FIFO lacks data ready to be read (i.e., empty condition).
        - `rdata`: Provides the data read from the FIFO, spanning [WIDTH-1:0].

When drafting your Verilog module named `asyn_fifo`, ensure that these components are cohesively structured to fulfill the asynchronous FIFO's role, emphasizing the nuances of multitier synchronization, pointer management, and state recognition. This sophisticated design should be thoroughly validated with a testbench to ensure proper timing and functionality across different use cases.