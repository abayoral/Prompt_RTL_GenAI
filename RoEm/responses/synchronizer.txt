```verilog
module synchronizer(
    input wire clk_a,
    input wire clk_b,
    input wire arstn,  // Active-low reset for clk_a domain
    input wire brstn,  // Active-low reset for clk_b domain
    input wire [3:0] data_in,
    input wire data_en,
    output reg [3:0] dataout
);

    // Registers in clk_a domain
    reg [3:0] data_reg;
    reg en_data_reg;

    // Registers in clk_b domain
    reg en_clap_one;
    reg en_clap_two;

    // Data synchronizer logic in clk_a domain
    always @(posedge clk_a or negedge arstn) begin
        if (!arstn) begin
            data_reg <= 4'b0;
            en_data_reg <= 1'b0;
        end else begin
            if (data_en) begin
                data_reg <= data_in;
                en_data_reg <= 1'b1;
            end else begin
                en_data_reg <= 1'b0;
            end
        end
    end

    // Enable signal double-flop synchronizer in clk_b domain
    always @(posedge clk_b or negedge brstn) begin
        if (!brstn) begin
            en_clap_one <= 1'b0;
            en_clap_two <= 1'b0;
        end else begin
            en_clap_one <= en_data_reg;
            en_clap_two <= en_clap_one;
        end
    end

    // Final data output logic in clk_b domain
    always @(posedge clk_b or negedge brstn) begin
        if (!brstn) begin
            dataout <= 4'b0;
        end else if (en_clap_two) begin
            dataout <= data_reg;
        end
    end

endmodule
```
