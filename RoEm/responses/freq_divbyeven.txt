```verilog
module freq_diveven #(parameter NUM_DIV = 4) (
    input wire clk,         // Input clock signal
    input wire rst_n,       // Active-low reset signal
    output reg clk_div      // Output clock signal, frequency divided
);

    // Ensure NUM_DIV is even
    initial begin
        if (NUM_DIV % 2 !== 0) begin
            $display("Error: NUM_DIV must be even.");
            $stop;
        end
        if (NUM_DIV < 2) begin
            $display("Error: NUM_DIV must be greater than or equal to 2.");
            $stop;
        end
    end

    reg [3:0] cnt; // 4-bit counter for the NUM_DIV

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 4'b0; 
            clk_div <= 1'b0; 
        end else begin
            if (cnt < (NUM_DIV / 2) - 1) begin
                cnt <= cnt + 1;
            end else begin
                cnt <= 4'b0;
                clk_div <= ~clk_div;
            end
        end
    end
endmodule
```
