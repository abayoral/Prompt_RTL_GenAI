```verilog
module LIFObuffer(
    input [3:0] dataIn,
    input RW,          // Read/Write control signal
    input EN,          // Enable signal
    input Rst,         // Reset signal
    input Clk,         // Clock signal
    output reg EMPTY,  // Empty flag
    output reg FULL,   // Full flag
    output reg [3:0] dataOut  // Output data bus
);
    reg [3:0] stack_mem [0:3];  // Memory array holding the stack entries
    reg [2:0] SP;               // Stack Pointer for the current position in stack

    // Synchronous operations based on clock
    always @(posedge Clk) begin
        if (EN) begin
            if (Rst) begin
                // Reset the entire stack memory and set SP to 4
                SP <= 3; // SP points to the last empty slot + 1 (empty when SP = 4)
                stack_mem[0] <= 4'b0;
                stack_mem[1] <= 4'b0;
                stack_mem[2] <= 4'b0;
                stack_mem[3] <= 4'b0;
                EMPTY <= 1'b1;
                FULL <= 1'b0;
            end else begin
                if (!RW && !FULL) begin
                    // Push operation
                    stack_mem[SP] <= dataIn;
                    if (SP > 0) begin
                        SP <= SP - 1;
                    end
                end else if (RW && !EMPTY) begin
                    // Pop operation
                    SP <= SP + 1;
                end

                // Update dataOut only on a pop operation
                if (RW && !EMPTY) begin
                    dataOut <= stack_mem[SP + 1];
                end else begin
                    dataOut <= 4'b0; // Reset output if not popping
                end
                
                // Update EMPTY and FULL flags
                EMPTY <= (SP == 3);
                FULL <= (SP == 0);
            end
        end
    end
endmodule
```
