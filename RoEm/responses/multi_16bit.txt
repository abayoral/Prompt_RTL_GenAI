```verilog
module multi_16bit(
    input wire clk,
    input wire rst_n,
    input wire start,
    input wire [15:0] ain,
    input wire [15:0] bin,
    output reg [31:0] yout,
    output reg done
);

    reg [15:0] areg;
    reg [31:0] breg, yout_r;
    reg [4:0] count;
    reg done_r;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            count <= 5'b0;
            areg <= 16'b0;
            breg <= 32'b0;
            yout_r <= 32'b0;
            done_r <= 1'b0;
        end
        else begin
            if (start) begin
                if (count == 0) begin
                    areg <= ain;
                    breg <= {16'b0, bin};
                    yout_r <= 32'b0;
                    done_r <= 1'b0;
                end

                if (count < 16) begin
                    if (areg[count])
                        yout_r <= yout_r + breg;
                    breg <= breg << 1;
                    count <= count + 1;
                end
                else if (count == 16) begin
                    done_r <= 1'b1;
                    count <= count + 1;
                end
                else if (count == 17) begin
                    done_r <= 1'b0;
                    count <= 5'b0;
                end
            end
            else begin
                count <= 5'b0;
                done_r <= 1'b0;
            end
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            yout <= 32'b0;
            done <= 1'b0;
        end
        else begin
            yout <= yout_r;
            done <= done_r;
        end
    end

endmodule
```