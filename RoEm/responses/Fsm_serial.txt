```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);

    // State encoding
    typedef enum logic [2:0] {
        IDLE = 3'b000,
        START = 3'b001,
        DATA = 3'b010,
        STOP = 3'b011,
        ERROR = 3'b100
    } state_t;

    state_t current_state, next_state;
    reg [2:0] bit_count; // Counter for the 8 data bits

    // State transition
    always @(posedge clk) begin
        if (reset) 
            current_state <= IDLE;
        else 
            current_state <= next_state;
    end

    // Next state logic and bit counting
    always @(*) begin
        next_state = current_state;
        done = 0; // Default value

        case(current_state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end

            START: begin
                next_state = DATA;
                bit_count = 0;
            end

            DATA: begin
                if (bit_count == 7) 
                    next_state = STOP;
                bit_count = bit_count + 1;
            end

            STOP: begin
                if (in == 1) 
                    done = 1; // Correct stop bit detected
                next_state = (in == 1) ? IDLE : ERROR;
            end

            ERROR: begin
                if (in == 1) // Wait for a stop bit to return to idle
                    next_state = IDLE;
            end
        endcase
    end

    // Data bit count reset each time we enter START
    always @(posedge clk) begin
        if (reset || current_state == START) 
            bit_count <= 0;
    end

endmodule
```