```
module parallel2serial (
    input clk,
    input rst_n,
    input [3:0] d,
    output reg valid_out,
    output reg dout
);

reg [1:0] cnt; // 2-bit counter for 4 bits
reg [3:0] data; // Register to hold the parallel data

always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        cnt <= 2'b00;
        valid_out <= 1'b0;
        dout <= 1'b0;
    end else begin
        if (cnt == 2'b00) begin
            data <= d; // Load the new data on the first cycle
            cnt <= cnt + 1;
            valid_out <= 1'b1; // Mark valid output since we just loaded data
        end else if (cnt < 2'b11) begin
            dout <= data[3 - cnt]; // Shift out the MSB first
            cnt <= cnt + 1;
            valid_out <= 1'b0; // Not valid until the last bit
        end else begin
            dout <= data[0]; // Last bit
            valid_out <= 1'b1; // Mark valid output
            cnt <= 2'b00; // Reset the counter to start over
        end
    end
end

endmodule
```