```
module traffic_light (
    input rst_n,
    input clk,
    input pass_request,
    output reg [7:0] clock,
    output reg red,
    output reg yellow,
    output reg green
);

    // State parameters
    typedef enum reg [1:0] {
        idle = 2'b00,
        s1_red = 2'b01,
        s2_yellow = 2'b10,
        s3_green = 2'b11
    } state_t;

    // Internal registers
    reg [7:0] cnt;
    reg [1:0] state;
    reg p_red, p_yellow, p_green;

    // State transition logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= idle;
        end else begin
            case (state)
                idle: begin
                    // All signals off initially
                    p_red <= 0;
                    p_yellow <= 0;
                    p_green <= 0;
                    state <= s1_red;
                end
                s1_red: begin
                    p_red <= 1;
                    p_yellow <= 0;
                    p_green <= 0;
                    if (cnt == 0) begin
                        state <= s3_green;
                    end
                end
                s2_yellow: begin
                    p_red <= 0;
                    p_yellow <= 1;
                    p_green <= 0;
                    if (cnt == 0) begin
                        state <= s1_red;
                    end
                end
                s3_green: begin
                    p_red <= 0;
                    p_yellow <= 0;
                    p_green <= 1;
                    if (cnt == 0) begin
                        state <= s2_yellow;
                    end
                end
            endcase
        end
    end

    // Internal counter logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 10;
        end else if (pass_request && p_green) begin
            cnt <= 10; // Reduce green light duration on request
        end else begin
            case (state)
                s1_red: cnt <= 10;  // Red light duration
                s2_yellow: cnt <= 5; // Yellow light duration
                s3_green: cnt <= (cnt > 10) ? 60 : cnt; // 60, unless under 10
                default: begin
                    if (cnt > 0)
                        cnt <= cnt - 1; // Decrementing the counter
                end
            endcase
        end
    end

    // Output signal assignment
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            red <= 0;
            yellow <= 0;
            green <= 0;
        end else begin
            red <= p_red;
            yellow <= p_yellow;
            green <= p_green;
        end
    end
    
    // Assigning the current count to the output clock
    assign clock = cnt;

endmodule
```