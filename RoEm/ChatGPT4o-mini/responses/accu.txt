```verilog
module accu(
    input wire clk,
    input wire rst_n,
    input wire [7:0] data_in,
    input wire valid_in,
    output reg valid_out,
    output reg [9:0] data_out
);
    reg [3:0] count;
    reg [9:0] sum;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            count <= 0;
            sum <= 0;
            valid_out <= 0;
            data_out <= 0;
        end else begin
            if (valid_in && count < 4) begin
                sum <= sum + data_in; // Accumulate the data
                count <= count + 1;    // Increment the count of inputs
            end

            if (count == 4) begin
                data_out <= sum;       // Set the output data
                valid_out <= 1;        // Signal that the output is valid
                count <= 0;            // Reset count for the next batch
                sum <= 0;              // Reset sum for the next batch
            end else begin
                valid_out <= 0;        // Ensure valid_out is reset low if not ready
            end
        end
    end
endmodule
```