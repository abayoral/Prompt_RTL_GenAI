```verilog
module freq_divbyfrac (
    input wire clk,
    input wire rst_n,
    output reg clk_div
);
    
    parameter MUL2_DIV_CLK = 7; // Total clock cycles for fraction division
    parameter DIV_CLK_PART1 = 4; // First part: 4 clock cycles
    parameter DIV_CLK_PART2 = 3; // Second part: 3 clock cycles
    
    reg [2:0] counter;
    reg clk_part1;
    reg clk_part2;
    
    // Main counter to track cycles
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            counter <= 3'b000;
            clk_div <= 1'b0;
            clk_part1 <= 1'b0;
            clk_part2 <= 1'b0;
        end else begin
            // On each clock cycle, increment the counter
            if (counter < MUL2_DIV_CLK - 1) begin
                counter <= counter + 1;
            end else begin
                counter <= 3'b000; // Reset counter after 7 cycles
            end
            
            // Generate clk_part1 and clk_part2
            clk_part1 <= (counter < DIV_CLK_PART1); // Active for 4 cycles
            clk_part2 <= (counter >= DIV_CLK_PART1); // Active for 3 cycles
        end
    end
    
    // Create the clk_div output by OR'ing clk_part1 and clk_part2
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            clk_div <= 1'b0;
        end else begin
            clk_div <= clk_part1 | clk_part2; // Combine the signals
        end
    end
    
endmodule
```