```
module alu (
    input  [31:0] a, 
    input  [31:0] b, 
    input  [5:0] aluc, 
    output reg [31:0] r, 
    output reg zero, 
    output reg carry, 
    output reg negative, 
    output reg overflow, 
    output reg flag
);

    // ALU operation codes
    parameter ADD = 6'b000000;
    parameter SUB = 6'b000001;
    parameter AND = 6'b000010;
    parameter OR  = 6'b000011;
    parameter XOR = 6'b000100;
    parameter SLL = 6'b000101;
    parameter SRL = 6'b000110;
    parameter SRA = 6'b000111;
    parameter SLT = 6'b001000;
    parameter SLTU = 6'b001001;
    
    always @(*) begin
        // Default outputs
        r = 32'bz; 
        zero = 0; 
        carry = 0; 
        negative = 0; 
        overflow = 0; 
        flag = 0;

        case (aluc)
            ADD: begin
                {carry, r} = a + b; // To detect carry
                overflow = (a[31] == b[31]) && (r[31] != a[31]); // Check for overflow
            end
            
            SUB: begin
                {carry, r} = a - b; // To detect borrow as carry
                overflow = (a[31] != b[31]) && (r[31] != a[31]); // Check for overflow
            end
            
            AND: r = a & b;
            OR:  r = a | b;
            XOR: r = a ^ b;
            
            SLL: r = b << a[4:0]; // Shift left logical
            SRL: r = b >> a[4:0]; // Shift right logical
            SRA: r = $signed(b) >> a[4:0]; // Shift right arithmetic
            
            SLT: begin
                r = (a < b) ? 32'b1 : 32'b0; // Set less than
                flag = (a < b);
            end
            
            SLTU: begin
                r = (a < b) ? 32'b1 : 32'b0; // Set less than unsigned
                flag = (a < b);
            end
            
            default: r = 32'bz; // High impedance for undefined opcodes
        endcase

        // Update the flags
        zero = (r == 32'b0);
        negative = r[31];
    end
endmodule
```