```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // State encoding
    typedef enum reg [2:0] {
        IDLE,
        START_BIT,
        RECEIVE_DATA,
        STOP_BIT,
        VALIDATE
    } state_t;

    state_t current_state, next_state;
    reg [3:0] bit_count; // To count received bits
    reg [7:0] shift_reg; // Shift register to store incoming data
    reg valid_byte;

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            bit_count <= 0;
            shift_reg <= 8'b0;
            done <= 0;
            out_byte <= 8'b0;
        end else begin
            current_state <= next_state;
        end
    end

    // Next state logic and output generation
    always @(*) begin
        case (current_state)
            IDLE: begin
                done = 0;
                if (in == 0) // Start bit detected
                    next_state = START_BIT;
                else
                    next_state = IDLE;
            end
            START_BIT: begin
                if (bit_count < 8) begin
                    next_state = RECEIVE_DATA;
                end else begin
                    next_state = STOP_BIT;
                end
                bit_count = 0;
            end
            RECEIVE_DATA: begin
                shift_reg = {in, shift_reg[7:1]};
                bit_count = bit_count + 1;
                if (bit_count == 7)
                    next_state = STOP_BIT; // On the next clock check for stop bit
                else
                    next_state = RECEIVE_DATA;
            end
            STOP_BIT: begin
                if (in == 1) begin // Stop bit correct
                    out_byte = shift_reg; // Latch the byte
                    done = 1; // Mark as done
                    next_state = IDLE; // Go back to IDLE
                end else begin
                    next_state = STOP_BIT; // Wait until we detect the stop bit
                end
            end
            default: begin
                next_state = IDLE; // Fallback state
            end
        endcase
    end
endmodule
```