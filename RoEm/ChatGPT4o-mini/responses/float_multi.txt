```verilog
module float_multi(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);
    reg [2:0] counter;
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [7:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 0;
            z <= 32'b0;
        end else begin
            case (counter)
                3'b000: begin // Reset State
                    a_mantissa <= {1'b1, a[22:0]};
                    b_mantissa <= {1'b1, b[22:0]};
                    a_exponent <= a[30:23] - 127; // Bias adjustment
                    b_exponent <= b[30:23] - 127; // Bias adjustment
                    a_sign <= a[31];
                    b_sign <= b[31];
                    counter <= counter + 1;
                end
                3'b001: begin // Handle Special Cases
                    if ((a_exponent == 8'hFF && a_mantissa != 24'b0) || (b_exponent == 8'hFF && b_mantissa != 24'b0)) begin
                        // NaN Handling
                        z <= 32'h7FC00000; // Result is NaN
                        counter <= 3'b111; // Go to end state
                    end else if (a_exponent == 8'hFF || b_exponent == 8'hFF) begin
                        // Infinity Handling
                        z <= {a_sign ^ b_sign, 8'hFF, 23'b0}; // Result is infinity
                        counter <= 3'b111; // Go to end state
                    end else begin
                        counter <= counter + 1;
                    end
                end
                3'b010: begin // Normalization
                    z_exponent <= a_exponent + b_exponent + 127; // Adjust back with bias
                    product <= a_mantissa * b_mantissa; // Mantissa multiplication
                    z_sign <= a_sign ^ b_sign; // Sign determination
                    counter <= counter + 1;
                end
                3'b011: begin // Rounding
                    guard_bit <= product[24];
                    round_bit <= product[23];
                    sticky <= |product[22:0]; // Determine if there's anything in the lower bits
                    product[49] <= 1'b0; // Default for normalization
                    if (guard_bit && (round_bit || sticky || (product[24:23] == 2'b01))) begin
                        product <= product + 1;
                    end
                    counter <= counter + 1;
                end
                3'b100: begin // Possible normalization adjustment
                    if (product[49] == 1) begin
                        z_mantissa <= product[48:25]; // Exclude the hidden bit
                        z_exponent <= z_exponent + 1;
                    end else begin
                        z_mantissa <= product[47:24]; // Exclude the hidden bit
                    end
                    z <= {z_sign, z_exponent, z_mantissa[22:0]};
                    counter <= 3'b111; // Go to end state
                end
                3'b111: begin // Final State
                    // Final output will be held in z
                end
            endcase
        end
    end
endmodule
```