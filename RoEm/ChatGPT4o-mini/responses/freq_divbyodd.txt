```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5  // Default division factor
)(
    input wire clk,
    input wire rst_n,
    output reg clk_div
);

reg [31:0] cnt; // Counter for clock cycles
reg clk_div1, clk_div2; // Intermediate divided clock signals

// Always block for clock division logic
always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
        cnt <= 0;
        clk_div <= 0;
        clk_div1 <= 0;
        clk_div2 <= 0;
    end else begin
        if (cnt < (NUM_DIV - 1)) begin
            cnt <= cnt + 1;
        end else begin
            cnt <= 0;
            clk_div1 <= ~clk_div1; // Toggle clk_div1 every NUM_DIV clock cycles
        end
        
        if (cnt == 0) begin
            clk_div2 <= ~clk_div2; // Toggle clk_div2 on the next clock cycle after cnt reset
        end
        
        clk_div <= clk_div1 | clk_div2; // Final divided clock output
    end
end

endmodule
```