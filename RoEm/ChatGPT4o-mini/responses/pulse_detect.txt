```verilog
module pulse_detect (
    input wire clk,
    input wire rst_n,
    input wire data_in,
    output reg data_out
);

    // State encoding
    localparam IDLE     = 2'b00;
    localparam HIGH     = 2'b01;
    localparam LOW      = 2'b10;

    reg [1:0] state;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= IDLE;
            data_out <= 0;
        end else begin
            case (state)
                IDLE: begin
                    data_out <= 0; // Reset output
                    if (data_in) begin
                        state <= HIGH; // Transition to HIGH state
                    end
                end
                
                HIGH: begin
                    if (!data_in) begin
                        state <= LOW; // If data_in goes low, move to LOW state
                    end
                end
                
                LOW: begin
                    if (data_in) begin
                        state <= HIGH; // Stay in LOW if data_in is high
                    end else begin
                        data_out <= 1; // Pulse detected, assert data_out
                        state <= IDLE; // Return to IDLE state
                    end
                end
                
                default: begin
                    state <= IDLE; // Fallback to IDLE
                end
            endcase
        end
    end
endmodule
```