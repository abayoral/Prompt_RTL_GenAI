Assume the role of a seasoned Verilog HDL designer and detail the construction of a Verilog module tasked with the implementation of a 32-bit floating-point multiplication, adhering strictly to the IEEE-754 single-precision standard. This task involves designing and coding the `float_multi` module, which is responsible for carrying out precise multiplication operations on 32-bit single-precision floating-point numbers. This process is crucial for a wide range of computational applications where accurate arithmetic operations are paramount.

Your objective is to develop a comprehensive Verilog module named `float_multi`, designed to handle the multiplication of two 32-bit IEEE 754 formatted numbers. Consider the following specifications for the system:

**Module Details:**

- **Module Name:** `float_multi`
  
**Input Ports:**
  - `clk` (input): A clock input that serves as the synchronization signal driving the timing of operations within the module.
  - `rst` (input): A high-active reset line used to initialize the module's state, resetting internal counters and outputs as necessary.
  - `a` (input [31:0]): The first 32-bit input operand adhering to the IEEE 754 floating-point standard.
  - `b` (input [31:0]): The second 32-bit input operand, also formatted according to the IEEE 754 floating-point standard.

**Output Ports:**
  - `z` (output reg [31:0]): This output represents the result of the floating-point multiplication, formatted as a 32-bit IEEE 754 floating-point number.

**Internal Signals:**

- `counter` (reg [2:0]): A 3-bit counter used for sequencing operations across clock cycles.
- `a_mantissa`, `b_mantissa`, `z_mantissa` (reg [23:0]): Mantissas for both input numbers and the computed output, necessary for performing the actual multiplication and normalization.
- `a_exponent`, `b_exponent`, `z_exponent` (reg [9:0]): Exponents extracted from both input numbers and the resultant number, crucial for handling the arithmetic scaling in floating-point operations.
- `a_sign`, `b_sign`, `z_sign` (reg): Individual sign bits from inputs and the resulting output, used to determine the final sign of the product.
- `product` (reg [49:0]): This intermediate product holds the outcome from the multiplication of the mantissas, captured at a higher bit-width to accommodate overflow during multiplication.
- `guard_bit`, `round_bit`, `sticky` (reg): Bits used in the rounding process to adhere to the IEEE-754 rounding rules, ensuring the output value maintains the highest precision possible.

**Implementation Process:**

- **Initialization**: On an active high `rst` signal, reset the counter and prepare the module for operation.

- **Input Processing**: Extract the mantissas, exponents, and sign bits from both input floating-point numbers during the initial clock cycle following reset.

- **Special Cases Handling**: Identify and deal with special floating-point scenarios such as NaN (Not a Number) or infinity, as defined by the IEEE standard.

- **Normalization**: If necessary, normalize the mantissas to a form where only one non-zero digit appears before the binary point.

- **Multiplication**: Execute the multiplication of the normalized mantissas, while combining the signs and adjusting the exponents appropriately.

- **Rounding and Adjustment**: Employ the guard, round, and sticky bits to round the product properly, adjusting the exponent if needed, to maintain precision.

- **Output Generation**: Format the final output according to IEEE 754 specifications, including handling conditions potentially leading to overflow or underflow, ensuring the result is both accurate and correctly represented as per the standard.

Request the full code for a complete understanding of the operational intricacies, including handling of nuances specific to floating-point arithmetic in hardware design.