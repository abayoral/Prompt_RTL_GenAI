I would like you to take on the role of a skilled Verilog HDL (Hardware Description Language) designer tasked with creating a module that functions as a Multiplying Accumulator for 32-bit integers. The project requires you to develop a synthesizable hardware description that will inherently perform multiplication and accumulation in the specified manner.

The core of this design lies within the module named "pe." This module shall include several specific input and output interfaces along with internal logic, all adhering to synchronous digital design principles. The inputs consist of a clock signal, "clk," which governs the timing and operational synchronization of the module; a reset signal, "rst," which, when asserted to a high logic level, resets the internal state of the module; and two 32-bit wide integer inputs, "a" and "b," which are the operands in the multiplication operation.

The output, labeled "c," is a 32-bit wide register that reflects the accumulated product of inputs "a" and "b." This register should dynamically update its value in each clock cycle by adding the product of "a" and "b" to its existing value, thereby realizing the accumulating function. The behavior of this module follows certain conditions: upon the detection of a high-level reset signal, the output register "c" should immediately be set to zero, effectively clearing any previous accumulated data. Conversely, when the reset signal is low, normal operation resumes, allowing "c" to hold the cumulative sum.

To achieve this, you are expected to utilize an "always" block with appropriate sensitivity lists that respond to changes in the clock and reset signals. This block will contain logic for both the multiplication of inputs and the updating of the accumulation register. It's crucial to ensure that the description complies with timing and operational constraints typical in synchronous circuits, such as ensuring proper trigger on clock edges and managing reset conditions accurately.

Please provide the detailed structure, connections, and logic in Verilog code that encapsulates the described functionality, ensuring all hardware design best practices are considered in your implementation.