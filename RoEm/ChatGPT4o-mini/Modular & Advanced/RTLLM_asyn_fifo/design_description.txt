As a highly proficient Verilog designer, you have been tasked with developing a robust implementation of an asynchronous FIFO using Verilog HDL. The key requirements of this design include configurability in both depth and bit width, with the default parameters set as `DEPTH = 16` and `WIDTH = 8`. This FIFO will incorporate a dual-port RAM for data storage, utilizing Verilog submodules to manage different functional components seamlessly.

The architecture of the FIFO is organized into several integral parts. The first segment involves constructing a dual-port RAM capable of handling independent read and write operations via separate clock domains, `wclk` for writing and `rclk` for reading. In doing so, you need to define inputs and outputs that include write clock (`wclk`), read clock (`rclk`), write enable (`wenc`), write address (`waddr`), write data (`wdata`), read enable (`renc`), read address (`raddr`), and a register output for the read data (`rdata`). Importantly, ensure that your RAM array is sized appropriately based on the `DEPTH` and `WIDTH` parameters.

The implementation expands into a data write controller for managing write operations, and a data read controller for handling read processes. Critical to the design are the read and write pointer synchronizers, responsible for ensuring data consistency between different clock domains. The read pointer, captured by the two-stage trigger on the write clock, will facilitate communication with the write controller. Likewise, a write pointer derived using a two-stage trigger on the read clock is necessary for accurate operations in the read controller.

A distinguishing feature of your FIFO's design is the empty and full condition detection, achieved via comparison of 4-bit Gray-coded versions of the read and write pointers. Convert these pointers to binary for RAM address accessibility, specifically utilizing the lower three bits of the binary equivalent for addressing. Your FIFO is empty when read and write pointers are equal, and considered full when the write pointer surpasses the read pointer by configured constraints, where specific bits of the pointers must demonstrate oppositional values while others match.

Define the `asyn_fifo` module, providing a set of input ports, including write clock signal (`wclk`), read clock signal (`rclk`), reset signals for write (`wrstn`) and read (`rrstn`) operations, and signals for increment (`winc` and `rinc`), as well as write data input (`wdata`). Your module outputs should include indicators for FIFO full (`wfull`) and empty (`rempty`) conditions, along with read data output (`rdata`).

Finalize your Verilog design by integrating each component effectively, ensuring precise alignment of control signals with corresponding actions in the RAM module. Your proficiency in managing dual-clock domains in an asynchronous environment will be crucial for delivering a functional and efficient FIFO solution. Provide a comprehensive Verilog code structure that incorporates all these elements, configured to adapt based on the defined parameters and logical conditions.