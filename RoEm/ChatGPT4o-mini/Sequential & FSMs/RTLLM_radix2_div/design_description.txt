As a professional Verilog designer, you are tasked with implementing a digital hardware module in Verilog for performing a simplified radix-2 division operation on 8-bit signed or unsigned integers. The module, named `radix2_div`, is designed to handle two 8-bit input operands: a dividend and a divisor. The inputs are controlled by a clock signal (`clk`) for synchronous operation, and a reset signal (`rst`) is included to initialize or reset the operation. Additionally, a `sign` input signal determines whether the division operation is signed or unsigned.

The division process involves an initialization step followed by iterative operations that proceed as long as certain conditions are met. Specifically, when the operation request is valid (indicated by `opn_valid` being high) and the result is not yet ready (`res_valid` is low), the module captures the input values and prepares its internal state for the division process. This preparation includes setting up a shift register, referred to as `SR`, with the shifted absolute value of the dividend, and determining the negated absolute value of the divisor, called `NEG_DIVISOR`.

Throughout the division process, the module iteratively updates its internal state, including a counter (`cnt`) and a start control signal (`start_cnt`), to manage the division sequence. The heart of the operation relies on performing subtraction to make decisions for the shift register update, using a multiplexer to select the appropriate operation based on the outcome of the subtraction. The division concludes when the counter reaches a pre-defined limit, in this case, eight iterations for an 8-bit operation, at which point results are finalized into the `SR` register. This register stores both the quotient and the remainder as part of a 16-bit result, with the remainder occupying the more significant bits.

Finally, the output port `res_valid` indicates when the operation result is ready for consumption. It is crucial that this signal is managed correctly, accounting for the reset state, the processing status, and the readiness of the division result. Your implementation will require careful attention to these control signals to ensure correct and efficient operation of the module.

Please provide the complete Verilog code for the `radix2_div` module considering these specifications and operational requirements.