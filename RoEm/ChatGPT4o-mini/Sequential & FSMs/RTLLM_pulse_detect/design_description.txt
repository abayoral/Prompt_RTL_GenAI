As a highly skilled Verilog designer, your task is to design and implement a Verilog module named `pulse_detect` to identify and indicate the presence of a specific type of pulse within a one-bit digital input signal. The system is to be synchronized with a clock signal (`clk`) and controlled using an active-low reset signal (`rst_n`). Your design should be capable of asserting an output signal (`data_out`) to a high logic level precisely when the input signal (`data_in`) transitions in a specific predefined sequence, indicating the detection of a pulse.

The pulse detection criteria to be implemented are as follows: the input signal `data_in` should transition from a low state (0) to a high state (1) and return to a low state (0) over three consecutive clock cycles. More explicitly, the sequence of `data_in` over three cycles as `0 -> 1 -> 0` constitutes the detection of a pulse. Your `data_out` signal should assert to 1 at the precise cycle where `data_in` completes this sequence and detectively remain at 0 otherwise, effectively resuming its low state for any subsequent detection cycles.

The module design will require clear definition and handling of both input and output ports. Moreover, declare a state register to maintain which phase of the pulse detection process is currently active. This state register should hold distinct states for each phase of the 3-cycle sequence, and possibly additional states for initialization or other logical transitions.

In constructing the `always` block, which should be sensitive to the rising edge of `clk` and the falling edge of `rst_n`, implement reset logic to initialize state and output conditions, returning the module to its starting condition when the reset is triggered. Define state transitions based on `data_in` values driving the state machine logic, checking alignments with the predefined pulse pattern. Ensure the correct updating of the `data_out` signal on completing the pulse sequence and resetting it thereafter to prepare for the next potential pulse detection.

It is imperative that the configuration is concise, adheres to digital logic principles, and is thoroughly verified for robustness in various scenarios to accommodate the known data input patterns anticipated by the system.