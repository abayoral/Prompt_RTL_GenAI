Assume the role of a seasoned Verilog designer for this task. You are tasked with developing a digital circuit using Verilog hardware description language that achieves conversion of data width from 8 bits to 16 bits. The aim is to design a module named `width_8to16`, and understand the stipulated requirements: 

The module must accept an 8-bit data input and produce a 16-bit data output. The module incorporates two specific output signals: 

1. `valid_out`: This is a signal that signifies when the output data is valid and can be relied upon. It is explicitly required to go high when two consecutive valid 8-bit inputs have been successfully received and processed into a 16-bit output.
   
2. `data_out`: This is the 16-bit data output, resulting from converting the pair of 8-bit inputs. The notable specification is that the first received 8-bit data, upon validation, should reside in the higher 8-bit portion of the 16-bit output data, while the next 8-bit input takes the lower segment.

Important conditions under which this circuit operates include:

- **Clock Signal (`clk`)**: This serves as the primary timing reference. Register and logic updates are synchronized with the positive edge of this signal.
  
- **Reset Signal (`rst_n`)**: This is an active-low reset mechanism. When this signal is low (0), the system should reset its internal registers (i.e., set the outputs to a known state, typically zero).
  
- **Input Data Validity (`valid_in`) and Sequence Storage**: The input `valid_in` denotes that the input data `data_in` is valid. If this signal is asserted, the circuit needs to determine whether to store an incoming 8-bit input temporarily (if it is the first of the two), or concatenate it with previously stored data to form a complete 16-bit output when the second valid input arrives. 

- **Data Output on Clock Cycle Following Input Event**: The completion of the concatenation process, where two valid 8-bit inputs are merged into one 16-bit output, should coincide with the subsequent clock cycle. This ensures the timing integrity and predictable behavior of the system â€“ the transition from two 8-bit packets to a single 16-bit output must be smooth and reliable.

The task requires a comprehensive understanding of signal control and data flow within synchronous digital circuits. The resulting Verilog code should reflect adherence to synchronous design principles and should effectively manage, or act, based on the active-high valid signals to ensure accurate data processing and output indications without premature alerting of data validity or erroneous state transitions. Concentrate on implementing these conditions, along with ensuring robust design for clock and reset signal sensitivity.