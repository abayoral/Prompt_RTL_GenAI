You have been tasked with designing a Verilog module named `parallel2serial`, which functions as a parallel-to-serial converter, specifically structured to handle a conversion process for every four-bit input. The overarching goal here is to transform the incoming four-bit parallel data into a sequential, one-bit serial output.

In designing this module, you should consider the following requirements and operating conditions:

**Module Description:**

- **Purpose:** This module takes a 4-bit parallel data input (`d`) and converts it into a single-bit serial output (`dout`), starting with the most significant bit (MSB) and ending with the least significant bit (LSB).
- **Operation:** Upon receiving the 4-bit input, the MSB is immediately assigned to the output, and the remaining bits are output sequentially over the next three clock cycles.
- **Output Validity:** The `valid_out` signal indicates when the serial conversion output is valid. This signal becomes high whenever there's a valid serial output available.

**Input Ports:**

1. **clk:** A clock signal that synchronizes all operations within the module.
2. **rst_n:** An active-low reset signal. When asserted low (`0`), it resets the module. When high (`1`), normal operation resumes.
3. **d:** A 4-bit parallel input signal whose bits are to be serialized.

**Output Ports:**

1. **valid_out:** A signal that goes high to signify that the serial output (`dout`) is currently valid.
2. **dout:** The 1-bit serial output resulting from the conversion of the 4-bit input `d`.

**Implementation Details:**

- **Data Handling:** The MSB is the first to be output, with subsequent bits following in the order of significance.
- **Cycle Management:** If the current cycle corresponds to the last bit of the input data (i.e., cycle 3 for a 4-bit input), a few operations take place: 
  1. The internal register (can be named `data`) is updated with the new 4-bit input from `d`.
  2. The cycle counter (`cnt`) is reset to 0.
  3. The `valid_out` signal is set, marking the availability of valid serial data.

- **Interim Cycles:** For cycles other than the last, the following actions are performed:
  - The counter (`cnt`) is incremented to track progression through the input bits.
  - The `valid_out` signal is set low, as the serial output isn't yet to be considered finalized. Shifting operations within the data register ensure subsequent bits are properly positioned for serialization.
  - This shift involves moving the data in the register such that the next bit in sequence moves to the serial output position.

- **Counter Register Logic:** As part of synchronous logic design:
  - With the reset signal (`rst_n`) set high, the operation within depends on incrementing the counter, allowing it to loop through each bit of the 4-bit input.

Your aim is to encapsulate this functionality in fully functioning Verilog code, adhering to the specifications and ensuring robustness against possible edge conditions, such as reset operations or edge-triggered events based on the clock signal.