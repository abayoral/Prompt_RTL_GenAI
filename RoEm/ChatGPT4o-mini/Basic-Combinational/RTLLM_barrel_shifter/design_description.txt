Could you please assist by leveraging your expertise as a Verilog designer to develop a module named `barrel_shifter` that fulfills the following specifications?

The primary function of this module is to utilize a barrel shifter mechanism for rotating bits in an 8-bit word efficiently. The inputs to this module should include an 8-bit signal `in`, which represents the data to be shifted or rotated, and a 3-bit control signal `ctrl` that dictates the number of positions the data is to be shifted. 

Specifically, the 3-bit control signal, `ctrl`, determines the extent of the shift: each bit within this signal corresponds to a specific shift magnitude (1, 2, or 4 positions). The shifting operation is controlled in a sequential manner, meaning:

- If `ctrl[2]` is set high, the module should shift the input data by 4 positions.
- If `ctrl[1]` is set high, it should shift the previously shifted result (or the original input if no prior shifts) by an additional 2 positions.
- Similarly, if `ctrl[0]` is high, a further shift by 1 position should be applied to the result obtained from the preceding condition(s).

The expected output, designated as `out`, is an 8-bit representation of the data after it has undergone the specified shifts. 

In terms of implementation, incorporate a series of 2-to-1 multiplexers, identified as `mux2X1`, to perform the shifts. Such multiplexers should facilitate the selection between the original input and the appropriately shifted versions of the input. 

Each stage of the multiplexers is responsible for executing a specific portion of the shift operation, with the resulting outputs from one stage feeding into the next stage based on the control signal's requirements. The selection operation within each multiplexer is directed via a `sel` signal, effectively determining the bit composition within the output at respective stages.

Please provide a comprehensive code structure that accomplishes the above tasks efficiently.