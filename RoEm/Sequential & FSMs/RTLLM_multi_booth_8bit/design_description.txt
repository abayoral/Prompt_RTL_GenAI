Could you assist me by acting as a professional Verilog designer and provide guidance on how to implement a specific digital design in Verilog? The task involves designing an 8-bit Radix-4 Booth multiplier using the Booth multiplication algorithm, which is commonly used for efficient binary multiplication. 

This design will take two 8-bit binary numbers as inputs: 'a' and 'b'. These inputs represent the multiplicand and the multiplier, respectively. The module is to be named `multi_booth_8bit`.

The multiplier should operate synchronously with a clock signal (denoted as `clk`) and should also incorporate a reset functionality through a signal (`reset`). The reset should initialize the multiplier to a known state, readying it for new operations when the signal is active. 

The output of the module will be twofold: 
1. A 16-bit value `p` which will display the product of the input multiplication.
2. A ready signal `rdy` which will be set to a logical high to indicate when the multiplication process is completed.

For the implementation specifics:
- On the rising edge of the clock or whenever the reset signal is asserted, the multiplication process should commence.
- During the reset, initialize several registers:
  - A `multiplier` register, which is a 16-bit signed extension of the input `a`.
  - A `multiplicand` register, similarly sign-extended from `b`.
- During normal operation (when `reset` is low), the system should implement the steps of the Booth multiplication process.
- This includes shifting the `multiplicand` and checking the current bit of the `multiplier` register for Booth encoding.
- If the bit is indicative of positive Booth encoding, the product register is updated by adding the value of the `multiplicand`.
- A counter (`ctr`), suggested to be 5 bits long, tracks the number of operations and iterates up to 16 shifts needed.
- Once `ctr` reaches the necessary iterations, the ready signal `rdy` should be set high to indicate completion.

Could you develop the necessary Verilog code reflecting this specification, adhering to synchronous digital design principles, and efficiently implementing the described Booth multiplication process?