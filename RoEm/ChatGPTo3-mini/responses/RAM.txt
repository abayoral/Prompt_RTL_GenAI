module RAM (
    input              clk,
    input              rst_n,
    input              write_en,
    input      [2:0]   write_addr,  // 3 bits to address 8 locations
    input      [5:0]   write_data,
    input              read_en,
    input      [2:0]   read_addr,   // 3 bits to address 8 locations
    output reg [5:0]   read_data
);

  // Parameter definitions
  parameter WIDTH = 6;
  parameter DEPTH = 8;

  // Memory array declaration
  reg [WIDTH-1:0] mem [0:DEPTH-1];

  integer i;

  // Write operation
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      // Reset: clear all memory locations
      for (i = 0; i < DEPTH; i = i + 1) begin
        mem[i] <= {WIDTH{1'b0}};
      end
    end else begin
      // Write operation
      if (write_en) begin
        mem[write_addr] <= write_data;
      end
    end
  end

  // Read operation
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      // Reset read_data to 0
      read_data <= {WIDTH{1'b0}};
    end else begin
      // Read operation: output data when read_en is active
      if (read_en) begin
        read_data <= mem[read_addr];
      end else begin
        read_data <= {WIDTH{1'b0}};
      end
    end
  end

endmodule