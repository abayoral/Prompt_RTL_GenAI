module freq_diveven #(
    parameter NUM_DIV = 8  // NUM_DIV must be an even number
)(
    input clk,
    input rst_n,
    output reg clk_div
);

    // 4-bit counter for tracking half cycles
    reg [3:0] cnt;
    
    // Ensure NUM_DIV is even at compile time (synthesis support may vary)
    initial begin
        if (NUM_DIV % 2 != 0) begin
            $display("Error: NUM_DIV must be an even number.");
            $finish;
        end
    end

    // Clock division process: toggle clk_div every (NUM_DIV/2) input clock cycles.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt     <= 4'd0;
            clk_div <= 1'b0;
        end else begin
            if (cnt < ((NUM_DIV >> 1) - 1)) begin
                cnt <= cnt + 4'd1;
            end else begin
                cnt     <= 4'd0;
                clk_div <= ~clk_div;
            end
        end
    end

endmodule