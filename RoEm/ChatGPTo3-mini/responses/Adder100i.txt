module full_adder(
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    // Full adder logic: sum is XOR of inputs and cin;
    // cout is generated when at least two of the inputs are high.
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (a & cin) | (b & cin);
endmodule

module top_module( 
    input  [99:0] a, b,
    input         cin,
    output [99:0] cout,
    output [99:0] sum );

    // Internal carry chain: carry[0] is the input carry; 
    // each full adder produces carry[i+1] which is stored here.
    wire [100:0] carry;
    assign carry[0] = cin;

    genvar i;
    generate
        for(i = 0; i < 100; i = i + 1) begin : FA_CHAIN
            full_adder fa (
                .a(a[i]),
                .b(b[i]),
                .cin(carry[i]),
                .sum(sum[i]),
                .cout(carry[i+1])
            );
            // Output each full adder's carry-out.
            assign cout[i] = carry[i+1];
        end
    endgenerate

endmodule