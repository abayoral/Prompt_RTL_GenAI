module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);

    // State encoding
    localparam IDLE      = 2'd0;
    localparam DATA      = 2'd1;
    localparam STOP      = 2'd2;
    localparam WAIT_STOP = 2'd3;

    reg [1:0] state, next_state;
    reg [2:0] bit_count;  // To count 8 data bits (0-7)

    // Sequential logic for state and bit_count updates
    always @(posedge clk) begin
        if (reset) begin
            state     <= IDLE;
            bit_count <= 0;
            done      <= 0;
        end else begin
            state <= next_state;
            // Update bit counter in DATA state only.
            if (state == DATA)
                bit_count <= bit_count + 1;
            else
                bit_count <= 0;
            
            // 'done' is asserted in the cycle where we have verified a valid stop bit.
            if (state == STOP && in == 1)
                done <= 1;
            else
                done <= 0;
        end
    end

    // Combinational next state logic
    always @(*) begin
        next_state = state;  // default stay in state
        case (state)
            IDLE: begin
                // Line idle is high; start bit is expected to be 0.
                if (in == 0)
                    next_state = DATA;
                else
                    next_state = IDLE;
            end

            DATA: begin
                // Wait for 8 data bits.
                if (bit_count == 3'd7)  // collected 8 bits (0 to 7)
                    next_state = STOP;
                else
                    next_state = DATA;
            end

            STOP: begin
                // Check for valid stop bit.
                if (in == 1)
                    next_state = IDLE;  // valid, so a done will be indicated.
                else
                    next_state = WAIT_STOP;  // invalid stop, wait until a stop bit is seen.
            end

            WAIT_STOP: begin
                // Do not restart until we see a stop bit, i.e. in == 1.
                if (in == 1)
                    next_state = IDLE;
                else
                    next_state = WAIT_STOP;
            end

            default: next_state = IDLE;
        endcase
    end

endmodule