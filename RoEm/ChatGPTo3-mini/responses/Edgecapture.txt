module top_module (
    input clk,
    input reset,
    input [31:0] in,
    output reg [31:0] out
);

    // prev stores the input value from the previous cycle.
    // set_pending is used to delay the setting event by one clock cycle.
    reg [31:0] prev, set_pending;

    always @(posedge clk) begin
        if (reset) begin
            // Synchronous reset: clear the output.
            out         <= 32'b0;
            // Also clear the pending set and capture the current input.
            set_pending <= 32'b0;
            prev        <= in;
        end else begin
            // The SR flip-flop behavior: once out is set to 1 it remains 1
            // until a reset occurs.
            out <= out | set_pending;
            
            // Detect a 1->0 transition in the input:
            // For each bit, if the previous value was 1 and the current value is 0,
            // then we mark that a set event should occur the next cycle.
            set_pending <= prev & ~in;
            
            // Capture the current input value for comparison in the next cycle.
            prev <= in;
        end
    end

endmodule