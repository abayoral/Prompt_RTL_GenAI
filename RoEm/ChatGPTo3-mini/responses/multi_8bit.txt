module multi_8bit(
    input [7:0] A,
    input [7:0] B,
    output reg [15:0] product
);
    integer i;
    
    always @(*) begin
        // Initialize product to zero.
        product = 16'b0;
        
        // Use a temporary register to hold the shifted multiplicand.
        // Start by extending A to 16 bits.
        reg [15:0] shifted_A;
        shifted_A = {8'b0, A};
        
        // Iterate over all 8 bits of the multiplier B.
        // For each bit of B (from LSB to MSB):
        // If B's bit is '1', add the current shifted multiplicand to product.
        // Then shift the multiplicand left for the next higher bit.
        for (i = 0; i < 8; i = i + 1) begin
            if (B[i])
                product = product + shifted_A;
            shifted_A = shifted_A << 1;
        end
    end
endmodule