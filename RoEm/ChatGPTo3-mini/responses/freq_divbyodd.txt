module freq_divbyodd #(
    parameter NUM_DIV = 5
)(
    input  clk,    // Main input clock signal
    input  rst_n,  // Active low reset
    output clk_div // Divided clock output
);

    // Internal signals for the two clock dividers
    reg clk_div1;
    reg clk_div2;
    
    // Counters for positive and negative edge triggered logic
    reg [$clog2(NUM_DIV)-1:0] cnt1;
    reg [$clog2(NUM_DIV)-1:0] cnt2;

    // Dividing the clock using the positive edge of clk.
    // The counter "cnt1" counts up to NUM_DIV-1 and resets.
    // When it reaches half of the NUM_DIV (i.e., (NUM_DIV-1)/2), clk_div1 toggles.
    // This effectively generates a divided clock component from the rising edge.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1      <= 0;
            clk_div1  <= 1'b0;
        end else begin
            if (cnt1 == NUM_DIV - 1)
                cnt1 <= 0;
            else
                cnt1 <= cnt1 + 1;
                
            if (cnt1 == (NUM_DIV - 1) / 2)
                clk_div1 <= ~clk_div1;
        end
    end

    // Dividing the clock using the negative edge of clk.
    // Similarly, the counter "cnt2" counts up to NUM_DIV-1 and resets.
    // When it reaches half of the NUM_DIV (i.e., (NUM_DIV-1)/2), clk_div2 toggles.
    // This creates a complementary divided clock from the falling edge.
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2      <= 0;
            clk_div2  <= 1'b0;
        end else begin
            if (cnt2 == NUM_DIV - 1)
                cnt2 <= 0;
            else
                cnt2 <= cnt2 + 1;
                
            if (cnt2 == (NUM_DIV - 1) / 2)
                clk_div2 <= ~clk_div2;
        end
    end

    // The final output clock is produced by OR-ing the two divided clocks.
    assign clk_div = clk_div1 | clk_div2;

endmodule