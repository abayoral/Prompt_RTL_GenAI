module freq_div(
    input CLK_in,
    input RST,
    output reg CLK_50,
    output reg CLK_10,
    output reg CLK_1
);

    // Counter for generating 10MHz clock (dividing by 10).
    // Since we toggle CLK_10 after 5 cycles (counts 0 to 4),
    // the output clock period becomes 10 cycles of CLK_in.
    reg [2:0] cnt_10;
    
    // Counter for generating 1MHz clock (dividing by 100).
    // We toggle CLK_1 after 50 cycles (counts 0 to 49),
    // so the output clock period becomes 100 cycles of CLK_in.
    reg [5:0] cnt_100;

    // CLK_50 Generation: Toggle on every positive edge of CLK_in.
    always @(posedge CLK_in or posedge RST) begin
        if (RST)
            CLK_50 <= 1'b0;
        else
            CLK_50 <= ~CLK_50;
    end

    // CLK_10 Generation: Use a counter (counts 0 to 4) then toggle.
    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            cnt_10 <= 3'd0;
            CLK_10 <= 1'b0;
        end else begin
            if (cnt_10 == 3'd4) begin
                CLK_10 <= ~CLK_10;
                cnt_10 <= 3'd0;
            end else begin
                cnt_10 <= cnt_10 + 1'b1;
            end
        end
    end

    // CLK_1 Generation: Use a counter (counts 0 to 49) then toggle.
    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            cnt_100 <= 6'd0;
            CLK_1   <= 1'b0;
        end else begin
            if (cnt_100 == 6'd49) begin
                CLK_1   <= ~CLK_1;
                cnt_100 <= 6'd0;
            end else begin
                cnt_100 <= cnt_100 + 1'b1;
            end
        end
    end

endmodule