module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output [23:0] out_bytes,
    output done
);

    // Define states for the FSM
    parameter WAIT   = 2'd0;
    parameter BYTE2  = 2'd1;
    parameter BYTE3  = 2'd2;

    reg [1:0] state;
    reg [7:0] b1, b2, b3;
    reg done_reg;

    // Combine the three stored bytes into a 24-bit output.
    // Valid when done is high.
    assign out_bytes = {b1, b2, b3};
    assign done = done_reg;

    // FSM and Datapath: Captures bytes and tracks packet boundaries
    // The first byte must have bit[3]==1. The next two bytes complete the message.
    always @(posedge clk) begin
        if (reset) begin
            state    <= WAIT;
            b1       <= 8'b0;
            b2       <= 8'b0;
            b3       <= 8'b0;
            done_reg <= 1'b0;
        end else begin
            case (state)
                WAIT: begin
                    done_reg <= 1'b0; // ensure done is low in this state
                    if (in[3]) begin // Message header detected (bit[3]==1)
                        b1    <= in;  // capture first byte
                        state <= BYTE2;
                    end else begin
                        state <= WAIT;
                    end
                end
                BYTE2: begin
                    done_reg <= 1'b0;
                    b2    <= in;     // capture second byte
                    state <= BYTE3;
                end
                BYTE3: begin
                    b3    <= in;     // capture third byte
                    done_reg <= 1'b1; // Message complete! Signal done for one cycle.
                    state <= WAIT;   // After a message, return to WAIT state.
                end
                default: state <= WAIT;
            endcase
        end
    end

endmodule