module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);

    // Wires for the lower 16-bit addition result and its carry-out.
    wire [15:0] lower_sum;
    wire c_lo;
    
    // Wires for the upper 16-bit addition results.
    wire [15:0] upper_sum0;
    wire [15:0] upper_sum1;
    
    // Carry-out wires from the upper adders (unused in final output).
    wire c_top0, c_top1;
    
    // Lower 16-bit adder instance with carry-in 0.
    add16 lower_add (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(lower_sum),
        .cout(c_lo)
    );
    
    // Two upper 16-bit adder instances:
    // One assumes a carry-in of 0.
    add16 upper_add0 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b0),
        .sum(upper_sum0),
        .cout(c_top0)
    );
    
    // The other assumes a carry-in of 1.
    add16 upper_add1 (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b1),
        .sum(upper_sum1),
        .cout(c_top1)
    );
    
    // 16-bit 2-to-1 multiplexer selects between the two results from the 
    // upper adders based on the carry-out from the lower adder.
    // If c_lo is 0, select the sum from upper_add0, else select from upper_add1.
    assign sum[15:0] = lower_sum;
    assign sum[31:16] = c_lo ? upper_sum1 : upper_sum0;

endmodule