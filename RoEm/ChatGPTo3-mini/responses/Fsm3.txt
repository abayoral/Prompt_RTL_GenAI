module top_module(
    input clk,
    input in,
    input areset,
    output reg out
);

    // state encoding
    parameter STATE_A = 2'b00;
    parameter STATE_B = 2'b01;
    parameter STATE_C = 2'b10;
    parameter STATE_D = 2'b11;

    reg [1:0] state, next_state;

    // Next state logic (combinational)
    always @(*) begin
        case(state)
            STATE_A: begin
                if (in)
                    next_state = STATE_B;
                else
                    next_state = STATE_A;
            end
            STATE_B: begin
                if (in)
                    next_state = STATE_B;
                else
                    next_state = STATE_C;
            end
            STATE_C: begin
                if (in)
                    next_state = STATE_D;
                else
                    next_state = STATE_A;
            end
            STATE_D: begin
                if (in)
                    next_state = STATE_B;
                else
                    next_state = STATE_C;
            end
            default: next_state = STATE_A;
        endcase
    end

    // State flip-flops with asynchronous reset
    always @(posedge clk or posedge areset) begin
        if(areset)
            state <= STATE_A;
        else
            state <= next_state;
    end

    // Output logic (Moore machine: output depends solely on state)
    always @(*) begin
        case(state)
            STATE_D: out = 1;
            default: out = 0;
        endcase
    end

endmodule