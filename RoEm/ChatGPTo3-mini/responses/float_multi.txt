module float_multi(
    input         clk,
    input         rst,
    input  [31:0] a,
    input  [31:0] b,
    output reg [31:0] z
);

  // A simple pipeline controller using a 3‐bit counter.
  reg [2:0] counter;

  // Registers to hold the decomposed fields of the floating‐point numbers.
  reg       a_sign, b_sign, z_sign;
  reg [7:0] a_exponent, b_exponent, z_exponent;
  reg [22:0] a_mantissa, b_mantissa;
  // 24‐bit mantissa with the implicit “1” inserted (if normalized).
  reg [23:0] aa_mant, bb_mant;

  // Special flag and special result storage (for Inf/NaN results).
  reg special;
  reg [31:0] special_result;

  // Product of the two 24‐bit mantissas.
  // Multiplying two 24‐bit numbers gives a 48‐bit product.
  reg [47:0] product;

  // Signals for normalization and rounding stage.
  // norm_mant stores the 24‐bit normalized mantissa (with implicit bit).
  reg [23:0] norm_mant;
  reg        guard, round, sticky;

  // Temporary register for rounding addition (25 bits used to catch potential overflow).
  reg [24:0] round_sum;

  always @(posedge clk or posedge rst) begin
    if (rst) begin
      counter      <= 3'd0;
      z            <= 32'd0;
      special      <= 1'b0;
      a_sign       <= 1'b0;
      b_sign       <= 1'b0;
      z_sign       <= 1'b0;
      a_exponent   <= 8'd0;
      b_exponent   <= 8'd0;
      z_exponent   <= 8'd0;
      a_mantissa   <= 23'd0;
      b_mantissa   <= 23'd0;
      aa_mant      <= 24'd0;
      bb_mant      <= 24'd0;
      product      <= 48'd0;
      norm_mant    <= 24'd0;
      guard        <= 1'b0;
      round        <= 1'b0;
      sticky       <= 1'b0;
      round_sum    <= 25'd0;
    end else begin
      case (counter)
        // Stage 1: Decompose inputs.
        3'd0: begin
          // Extract sign, exponent and fraction fields.
          a_sign     <= a[31];
          b_sign     <= b[31];
          a_exponent <= a[30:23];
          b_exponent <= b[30:23];
          a_mantissa <= a[22:0];
          b_mantissa <= b[22:0];
          
          // For normalized numbers (exponent ≠ 0), the implicit bit is 1.
          aa_mant <= (a[30:23] != 8'd0) ? {1'b1, a[22:0]} : {1'b0, a[22:0]};
          bb_mant <= (b[30:23] != 8'd0) ? {1'b1, b[22:0]} : {1'b0, b[22:0]};
          
          // Check for special cases: if either exponent is all ones, it is Inf or NaN.
          if ((a[30:23] == 8'hFF) || (b[30:23] == 8'hFF)) begin
            special <= 1'b1;
            // If any input is NaN (nonzero mantissa), propagate a canonical NaN.
            if ((a[30:23] == 8'hFF && a[22:0] != 23'd0) ||
                (b[30:23] == 8'hFF && b[22:0] != 23'd0))
              special_result <= {1'b0, 8'hFF, 23'h400000}; // canonical NaN
            else begin
              // If one operand is infinity and the other is zero, the result is invalid: return NaN.
              if (((a[30:23] == 8'hFF) && (b[30:23] == 8'd0) && (b[22:0] == 23'd0)) ||
                  ((b[30:23] == 8'hFF) && (a[30:23] == 8'd0) && (a[22:0] == 23'd0)))
                special_result <= {1'b0, 8'hFF, 23'h400000};
              else
                special_result <= {a_sign ^ b_sign, 8'hFF, 23'd0}; // Infinity with combined sign.
            end
          end else begin
            special <= 1'b0;
          end
          
          counter <= 3'd1;
        end

        // Stage 2: Check for zero inputs and special result handling.
        3'd1: begin
          // If either input is zero, result is zero.
          if (((a_exponent == 8'd0) && (a_mantissa == 23'd0)) ||
              ((b_exponent == 8'd0) && (b_mantissa == 23'd0))) begin
            z <= {a_sign ^ b_sign, 8'd0, 23'd0}; // Signed zero.
            counter <= 3'd0;
          end else if (special) begin
            z <= special_result;
            counter <= 3'd0;
          end else begin
            // Determine the sign of the result.
            z_sign <= a_sign ^ b_sign;
            counter <= 3'd2;
          end
        end

        // Stage 3: Mantissa multiplication.
        3'd2: begin
          product   <= aa_mant * bb_mant; // 24x24 multiplication => 48-bit product.
          // Compute initial exponent: add exponents then subtract the bias (127).
          z_exponent <= a_exponent + b_exponent - 8'd127;
          counter <= 3'd3;
        end

        // Stage 4: Normalize the product and extract rounding bits.
        3'd3: begin
          // Two cases: if the product's MSB is 1, the product is in the range [2,4),
          // so we need to shift right one bit and increment the exponent.
          if (product[47] == 1'b1) begin
            // Normalized mantissa: take bits [47:24]. 
            // The effective mantissa fraction will later be taken as [46:24] (dropping the implicit 1),
            // but here we preserve 24 bits plus guard/round/sticky.
            norm_mant <= product[47:24];
            guard    <= product[23];
            round    <= product[22];
            sticky   <= |product[21:0];
            z_exponent <= z_exponent + 1; // Adjust exponent due to right shift.
          end else begin
            // No normalization shift required: the leading one is at product[46].
            norm_mant <= product[46:23];
            guard    <= product[22];
            round    <= product[21];
            sticky   <= |product[20:0];
          end
          counter <= 3'd4;
        end

        // Stage 5: Rounding (round to nearest even).
        3'd4: begin
          // Form a 25-bit number by prefixing a zero to norm_mant.
          // The rounding increment is applied if the guard is 1 and at least one of round or sticky is 1,
          // or if the guard is 1 and the LSB of norm_mant is 1 (to break ties towards even).
          round_sum = {1'b0, norm_mant} + ( (guard && (round || sticky || norm_mant[0])) ? 25'd1 : 25'd0 );
          // If addition causes a carry out (bit 24 becomes 1), we have an overflow in the fraction.
          if (round_sum[24] == 1'b1) begin
            norm_mant  <= round_sum[23:0]; // Rounded value with overflow.
            z_exponent <= z_exponent + 1;
          end else begin
            norm_mant <= round_sum[23:0];
          end
          counter <= 3'd5;
        end

        // Stage 6: Assemble and output the final IEEE-754 result.
        3'd5: begin
          // The final 23-bit fraction is taken from norm_mant[22:0] (dropping the implicit bit).
          z <= {z_sign, z_exponent, norm_mant[22:0]};
          counter <= 3'd0;  // Ready for the next operation.
        end

        default: counter <= 3'd0;
      endcase
    end
  end

endmodule