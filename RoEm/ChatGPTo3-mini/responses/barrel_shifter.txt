module mux2X1(
    input wire a,
    input wire b,
    input wire sel,
    output wire y
);
    assign y = sel ? b : a;
endmodule

module barrel_shifter(
    input wire [7:0] in,
    input wire [2:0] ctrl,
    output wire [7:0] out
);

    // Stage 0: initial input wire
    wire [7:0] stage0;
    assign stage0 = in;

    // Stage 1: shift left by 1 if ctrl[0] is high
    wire [7:0] stage1;
    genvar i;
    generate
        for (i = 0; i < 8; i = i + 1) begin : stage1_gen
            // For left rotate by 1, calculate (i+1) mod 8.
            // When i==7, next index is 0.
            if (i == 7) begin
                mux2X1 m(.a(stage0[i]), .b(stage0[0]), .sel(ctrl[0]), .y(stage1[i]));
            end else begin
                mux2X1 m(.a(stage0[i]), .b(stage0[i+1]), .sel(ctrl[0]), .y(stage1[i]));
            end
        end
    endgenerate

    // Stage 2: shift left by 2 if ctrl[1] is high
    wire [7:0] stage2;
    generate
        for (i = 0; i < 8; i = i + 1) begin : stage2_gen
            // For left rotate by 2, compute (i+2) mod 8.
            // For i = 6, (6+2)=8 -> index 0; for i = 7, (7+2)=9 -> index 1.
            if (i == 7) begin
                mux2X1 m(.a(stage1[i]), .b(stage1[1]), .sel(ctrl[1]), .y(stage2[i]));
            end else if(i == 6) begin
                mux2X1 m(.a(stage1[i]), .b(stage1[0]), .sel(ctrl[1]), .y(stage2[i]));
            end else begin
                mux2X1 m(.a(stage1[i]), .b(stage1[i+2]), .sel(ctrl[1]), .y(stage2[i]));
            end
        end
    endgenerate

    // Stage 3: shift left by 4 if ctrl[2] is high
    wire [7:0] stage3;
    generate
        for (i = 0; i < 8; i = i + 1) begin : stage3_gen
            // For left rotate by 4, compute (i+4) mod 8.
            // For i >= 4, (i+4) mod 8 = i - 4.
            if (i < 4) begin
                mux2X1 m(.a(stage2[i]), .b(stage2[i+4]), .sel(ctrl[2]), .y(stage3[i]));
            end else begin
                mux2X1 m(.a(stage2[i]), .b(stage2[i-4]), .sel(ctrl[2]), .y(stage3[i]));
            end
        end
    endgenerate

    // Final output assignment.
    assign out = stage3;

endmodule