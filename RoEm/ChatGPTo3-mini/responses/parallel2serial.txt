module parallel2serial(
    input         clk,
    input         rst_n,
    input  [3:0]  d,
    output reg    valid_out,
    output reg    dout
);

  // Internal registers: shift register to hold parallel data, and a 2-bit counter.
  reg [3:0] data_reg;
  reg [1:0] cnt;   // Counter values: 0, 1, 2, 3

  // On reset, initialize all registers. Post-reset, on each clock cycle:
  // When the counter is 0, load new parallel data, output the MSB (d[3]) and increment the counter.
  // For subsequent cycles, output the corresponding bit (d[3-cnt]) until the 4th bit is output,
  // then reset the counter to 0 to allow new data to be loaded.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      data_reg  <= 4'b0;
      cnt       <= 2'b0;
      valid_out <= 1'b0;
      dout      <= 1'b0;
    end else begin
      if (cnt == 2'b0) begin
        // Load new data and output the MSB.
        data_reg  <= d;
        dout      <= d[3];
        valid_out <= 1'b1;
        cnt       <= 2'b01;
      end else begin
        // Continue outputting bits from data_reg.
        case (cnt)
          2'b01: dout <= data_reg[2];
          2'b10: dout <= data_reg[1];
          2'b11: dout <= data_reg[0];
          default: dout <= 1'b0;
        endcase
        valid_out <= 1'b1;
        // Update the counter: if the last bit has been sent, reset counter to load new data next cycle.
        if (cnt == 2'b11)
          cnt <= 2'b0;
        else
          cnt <= cnt + 1;
      end
    end
  end

endmodule