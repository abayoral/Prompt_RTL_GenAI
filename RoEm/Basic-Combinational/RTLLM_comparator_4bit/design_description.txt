As an experienced Verilog designer working with digital logic design systems, your task is to develop a Verilog module named "comparator_4bit." This module will function as a 4-bit comparator utilizing combinational logic to evaluate and compare two 4-bit binary numbers. Let's delve into the specifics of your assignment.

Module Objective:
You are tasked with creating a "comparator_4bit" module that compares two 4-bit inputs, A and B. The comparison should determine and output whether A is greater than, equal to, or less than B.

Input Ports:
1. **A[3:0]**: Represents the 4-bit binary input operand, designated as the first number for the comparison.
2. **B[3:0]**: Represents the 4-bit binary input operand, designated as the second number for the comparison.

Output Ports:
1. **A_greater**: A single-bit output that indicates if operand A is greater than operand B. Outputs a logic high (1) if true.
2. **A_equal**: A single-bit output that indicates if operands A and B are equivalent. Outputs a logic high (1) if true.
3. **A_less**: A single-bit output that indicates if operand A is less than operand B. Outputs a logic high (1) if true.

Implementation Details:
- **Comparison Logic**: Implement the logic to compare the inputs A and B by essentially performing the arithmetic subtraction of A - B. The outcome of this subtraction directly influences the determination of the outputs:
  - The detection of a borrow during the subtraction implies that A is less than B, activating `A_less`.
  - Conversely, absence of a borrow and a non-zero result from subtraction implies that A is greater than B, activating `A_greater`.
  - If the subtraction yields a zero result, it asserts that A is equal to B, activating `A_equal`.
  
- **Output Encoding**: The resulting logic for outputs A_greater, A_equal, and A_less should ensure exclusivity, meaning only one of these outputs can be active (set to logic level 1) at any given time.

Your task is to comprehensively code this logic in Verilog. Focus not only on the correct implementation setup but also ensure code clarity and adherence to design conventions to establish a robust and efficient module.