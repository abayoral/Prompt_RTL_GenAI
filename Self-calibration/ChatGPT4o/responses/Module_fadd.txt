Here is the corrected version of your provided Verilog code. The original code contains some issues with how the carry signals and inputs are connected, especially in the `add1` instantiation within the `add16` module. Let's address these issues:

1. The `add1` module instantiation in `add16` happens with broadcasting, which does not correctly handle the different `cin` and `cout` connections for each instance.
2. When cascading multiple `add1` adders, we should connect the carry output from one stage to the carry input of the next.
3. The connect to the carry input of `add1` instances needs to consider how to propagate through the `add1` modules.

Here is a corrected version of the code:

```verilog
module add1 (
    input a, 
    input b, 
    input cin, 
    output sum, 
    output cout
);
    assign {cout, sum} = a + b + cin;
endmodule

module add16 (
    input [15:0] a, 
    input [15:0] b, 
    input cin, 
    output [15:0] sum, 
    output cout
);
    wire [14:0] carry;

    add1 adder0 (
        .a(a[0]),
        .b(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(carry[0])
    );

    genvar i;
    generate
        for (i = 1; i < 16; i = i + 1) begin : adder_gen
            add1 adder (
                .a(a[i]),
                .b(b[i]),
                .cin(carry[i-1]),
                .sum(sum[i]),
                .cout(carry[i])
            );
        end
    endgenerate

    assign cout = carry[15];
endmodule

module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire carry_out_lower;

    add16 lower_adder (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(sum[15:0]),
        .cout(carry_out_lower)
    );

    add16 upper_adder (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(carry_out_lower),
        .sum(sum[31:16]),
        .cout() // Ignore the carry-out of the upper adder
    );
endmodule
```

### Key Changes:
- Added an individual instantiation of `add1` for the first bit to correctly incorporate the input carry (`cin`).
- Used a `for`-generate block to create subsequent `add1` instances for the remaining bits, connected correctly to propagate the `carry` to the next stage.
- Ensured that the `cout` of the last `add1` instance in `add16` is assigned to the module's output `cout`. 

This structure ensures an accurate ripple-carry adder implementation for each 16-bit segment and correct carry propagation across the `top_module`.