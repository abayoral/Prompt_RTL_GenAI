The provided Verilog code for a D flip-flop (`my_dff`) and its instantiation in `top_module` appears to be mostly correct in terms of functionality. However, let's go through it step by step to ensure it follows best practices and clarify its functioning:

1. **Check `my_dff` Module**:
   - The `my_dff` module implements a D-type flip-flop, storing input `d` on the positive edge of `clk`. The implementation is correct, and the output `q` is properly assigned from `q_reg`.

2. **Review `top_module` Hierarchy**:
   - The `top_module` correctly instantiates three `my_dff` modules in series, thereby forming a 3-stage shift register with an input `d`.

3. **Output Type**:
   - The `q` in `top_module` should be declared as a `wire` since it is driven by the output of the third instance of `my_dff`. The current implementation already uses wires (`q1`, `q2`, `q`), which is appropriate.

4. **Code Consistency and Best Practices**:
   - Ensure proper indentation and comments for better readability.
   - It's always good to specify default values for registers using initial blocks, particularly when dealing with larger designs. While not strictly necessary here, initializing `q_reg` to zero can help avoid any simulation mismatches.

Let's slightly modify the code for readability and completeness:

```verilog
module my_dff (
    input wire clk,
    input wire d,
    output wire q
);
    reg q_reg;
    
    always @(posedge clk) begin
        q_reg <= d;
    end

    assign q = q_reg;

endmodule

module top_module (
    input wire clk,
    input wire d,
    output wire q
);
    wire q1, q2;

    // Instantiate three D flip-flops, forming a 3-stage shift register
    my_dff dff1 (
        .clk(clk), 
        .d(d), 
        .q(q1)
    );

    my_dff dff2 (
        .clk(clk), 
        .d(q1), 
        .q(q2)
    );

    my_dff dff3 (
        .clk(clk), 
        .d(q2), 
        .q(q)
    );

endmodule
```

### Key Points:
- **Proper Naming and Indentation**: Normally, correctness and readability improve with proper formatting. In larger designs, naming conventions and indentation improve maintenance and understanding.
- **Simulation Initialization**: Adding initial values for registers reduces potential simulation gray areas.
- **Clear Comments**: Clear explanations of each module and instance purpose improve the design's comprehensibility.

This revised code maintains functionality while adhering to best practices. It also supports simulation-friendly practices such as potential register initializations in larger or more complex designs.