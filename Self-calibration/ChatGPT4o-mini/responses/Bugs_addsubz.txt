The provided Verilog code has some issues that need to be addressed:

1. **Events in Sensitivity List**: The `always @(*)` block is generally correct but should also take care of outputs based on their conditions properly.
  
2. **Asynchronous Reset**: The `result_is_zero` output should also reset when the `do_sub` signal changes. Using a proper sensitivity list ensures that the output reflects the current state of `do_sub.

3. **Use of `default` in `case`:** Although technically not an error, it can be misleading because `do_sub` is a single-bit input. The `default` case can be eliminated since a value of `do_sub` can only be 0 or 1.

4. **Best Practices**: It is generally advisable to use non-blocking assignments (`<=`) for registers in sequential logic, but in combinational logic (like `always @(*)`), blocking assignments (`=`) are appropriate. However, keep it consistent across the entire module.

Here is the corrected version of your Verilog module resolving these issues:

```verilog
module top_module ( 
    input do_sub,
    input [7:0] a,
    input [7:0] b,
    output reg [7:0] out,
    output reg result_is_zero
);

    always @(*) begin
        // Perform addition or subtraction based on do_sub value
        if (do_sub) begin // when do_sub is 1
            out = a - b;
        end else begin // when do_sub is 0
            out = a + b; 
        end
        
        // Check if the output is zero
        result_is_zero = (out == 8'b0);
    end

endmodule
```

### Changes Made:
1. Simplified the logic by replacing the `case` statement with an `if-else` structure for better readability.
2. Removed unnecessary `default` case.
3. Simplified the assignment of `result_is_zero` and improved readability.
4. Listened to the changes in `do_sub`, `a`, and `b` implicitly with `always @(*)`, which is intended for combinational logic. 

This revised version should function correctly without semantic errors while adhering to best practices in Verilog coding.