Below is an analysis and a corrected (and slightly improved) version of your code. Functionally your code was nearly correct; the “errors” were mostly style‐ and best practice–related improvements. For example, it is often preferable to:

• Parameterize division counts instead of “magic numbers” (which makes the code easier to maintain and understand).

• Use descriptive signal names (using lower_case may be preferred over mixed-case by some style guides).

• Be clear about the reset style. (Here the reset is synchronous; if you need an asynchronous reset, you’d include RST in the sensitivity list.)

Below is a revised version that incorporates these suggestions. (Note: The functionality remains the same.) 

------------------------------------------------------
module freq_div(
    input  clk_in,   // Assume 100MHz clock input
    input  reset,    // Active-high synchronous reset
    output reg clk_50,
    output reg clk_10,
    output reg clk_1
);

    // Parameters for division counts.
    // For clk_10: Toggle every 5 clock cycles (so period is 10 cycles => 10MHz).
    // For clk_1:  Toggle every 50 clock cycles (so period is 100 cycles => 1MHz).
    parameter DIV10_COUNT   = 5;
    parameter DIV100_COUNT  = 50;
    
    // Calculate the number of bits needed for each counter.
    // Using the $clog2 function ensures enough bits for the count.
    localparam CNT10_WIDTH  = $clog2(DIV10_COUNT);
    localparam CNT100_WIDTH = $clog2(DIV100_COUNT);

    reg [CNT10_WIDTH-1:0] cnt10;
    reg [CNT100_WIDTH-1:0] cnt100;
    
    // clk_50 Generation: Simply toggles at every posedge.
    always @(posedge clk_in) begin
        if (reset)
            clk_50 <= 1'b0;
        else
            clk_50 <= ~clk_50;
    end

    // clk_10 Generation: Toggle when cnt10 reaches DIV10_COUNT-1.
    always @(posedge clk_in) begin
        if (reset) begin
            cnt10   <= 0;
            clk_10  <= 1'b0;
        end
        else if (cnt10 == DIV10_COUNT - 1) begin
            cnt10   <= 0;
            clk_10  <= ~clk_10;
        end
        else begin
            cnt10 <= cnt10 + 1;
        end
    end

    // clk_1 Generation: Toggle when cnt100 reaches DIV100_COUNT-1.
    always @(posedge clk_in) begin
        if (reset) begin
            cnt100  <= 0;
            clk_1   <= 1'b0;
        end
        else if (cnt100 == DIV100_COUNT - 1) begin
            cnt100  <= 0;
            clk_1   <= ~clk_1;
        end
        else begin
            cnt100 <= cnt100 + 1;
        end
    end

endmodule
------------------------------------------------------

Key Points in This Revision:

1. Parameterization: DIV10_COUNT and DIV100_COUNT make it clear that for clk_10 the counter must count 5 cycles (toggle, so full period is 10 cycles) and similarly for clk_1.

2. Automatic bit-width determination: Using $clog2 ensures that the counters are wide enough without guessing the width.

3. Naming: Using lower-case signal names (like clk_in and reset) is more common in many coding conventions, though your names were not “wrong.”

4. Synchronous Reset: The resets remain synchronous. (If an asynchronous reset is desired, add reset to the sensitivity list and structure the always block accordingly.)

With these changes, the module retains the intended functionality while following more conventional best practices for synthesizable Verilog.