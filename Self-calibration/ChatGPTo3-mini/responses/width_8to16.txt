Below is the revised version of your module. Functionally the original design was correct, but the following version includes a few minor improvements for clarity and style. In particular, the code now uses comments that more clearly describe the behavior, and signal names are left unchanged since they were already descriptive. You can also choose to use synchronous reset if that better suits your design flow. (Note that using an asynchronous reset—as here—is a common and acceptable practice.) 

────────────────────────────
module width_8to16 (
    input         clk,
    input         rst_n,      // asynchronous active‐low reset
    input         valid_in,
    input  [7:0]  data_in,
    output        valid_out,
    output [15:0] data_out
);

  // Internal signals:
  // 'waiting' indicates that the first byte of a pair has been received.
  reg        waiting;
  reg [7:0]  first_byte;
  
  // When the second byte is received, the candidate (concatenation of first_byte and new byte)
  // along with its valid signal are computed. A one-cycle pipeline follows.
  reg [15:0] candidate_data;
  reg        candidate_valid;
  
  // Pipeline registers that delay the candidate output by one clock cycle.
  reg [15:0] piped_data;
  reg        piped_valid;
  
  // First always block:
  // Handles capturing the first valid byte, then when a second valid byte arrives,
  // combines the stored data with the current byte.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      waiting         <= 1'b0;
      first_byte      <= 8'b0;
      candidate_data  <= 16'b0;
      candidate_valid <= 1'b0;
    end else begin
      // By default, deassert candidate_valid.
      candidate_valid <= 1'b0;
      if (valid_in) begin
        if (!waiting) begin
          // First byte is captured
          first_byte <= data_in;
          waiting    <= 1'b1;
        end else begin
          // Second byte: form 16-bit word (first_byte is MSB)
          candidate_data  <= {first_byte, data_in};
          candidate_valid <= 1'b1;
          waiting         <= 1'b0;
        end
      end
    end
  end
  
  // Second always block:
  // Pipeline candidate_data and candidate_valid to generate output signals one cycle later.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      piped_data  <= 16'b0;
      piped_valid <= 1'b0;
    end else begin
      piped_data  <= candidate_data;
      piped_valid <= candidate_valid;
    end
  end
  
  // Output assignments.
  assign data_out  = piped_data;
  assign valid_out = piped_valid;
  
endmodule
────────────────────────────

Key improvements and clarifications:
1. Comments have been updated to better describe the overall behavior.
2. The reset procedure is clearly separated from the normal operation.
3. Signal names and formatting remain as in your original design since they were clear and consistent.

This version adheres to best practices and is free of syntax or logical errors.