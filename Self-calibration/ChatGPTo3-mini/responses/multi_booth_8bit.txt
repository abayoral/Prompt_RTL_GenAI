Below is one corrected and improved version of your module. In this version, we adjust two points:

1. Since you intend to multiply signed 8‐bit numbers, it’s best to declare the I/O (and computed product) as signed. (Internally we still use our 16–bit registers.)
2. When “shifting through” the multiplier bits the algorithm must use a logical shift right (to “consume” each bit in order) rather than an arithmetic shift (which would preserve the sign bit of a signed value). In Verilog the >> operator on a signed variable performs an arithmetic shift. One common and clear way to perform a logical right shift even when the signal is signed is to concatenate a zero as the new MSB (i.e. multiplier <= {1'b0, multiplier[15:1]};).

Below is the corrected code:

------------------------------------------------
module multi_booth_8bit(
    input               clk,
    input               reset,
    input signed  [7:0] a,
    input signed  [7:0] b,
    output reg signed [15:0] p,
    output reg          rdy
);

  // Internal registers:
  // We make 'multiplier' an unsigned 16–bit quantity so that we can shift it logically.
  reg         [15:0] multiplier;
  reg signed [15:0] multiplicand;
  reg         [4:0]  ctr;  // 5–bit counter to count 16 cycles

  always @(posedge clk or posedge reset) begin
    if (reset) begin
      // On reset, sign–extend the 8–bit inputs to 16 bits.
      multiplier   <= { {8{a[7]}}, a };
      multiplicand <= { {8{b[7]}}, b };
      p            <= 16'sd0;
      ctr          <= 5'd0;
      rdy          <= 1'b0;
    end
    else if (!rdy) begin
      // For each cycle, if the LSB of the multiplier bit string is 1, add the current
      // multiplicand (which is already appropriately aligned) to the accumulating product.
      if (multiplier[0])
        p <= p + multiplicand;
      
      // Shift the multiplicand left by one to double its weight.
      multiplicand <= multiplicand << 1;
      
      // Shift the multiplier right logically (note that using the ">>" operator on a signed 
      // value would be arithmetic; we avoid that by concatenating a 0 into the MSB).
      multiplier <= {1'b0, multiplier[15:1]};
      
      // Increment the cycle counter.
      ctr <= ctr + 5'd1;
      
      // When the counter reaches 15 (meaning 16 cycles have completed) assert the ready flag.
      if (ctr == 5'd15)
        rdy <= 1'b1;
    end
  end

endmodule
------------------------------------------------

Explanation of Changes:

• I declared a, b, and p as signed. This makes the intent clear that we are performing signed multiplication.

• I changed the type of multiplier from signed to unsigned (16‐bit) so that we can “consume” bits properly. (The sign extension was needed only to capture all bit–information from the original 8–bit input.)  
  – To perform the logical right shift, instead of using “>>” (which on a signed type is arithmetic) we use:
    multiplier <= {1'b0, multiplier[15:1]};

• The rest of the code (reset and iterative addition in 16 cycles) remains essentially the same.

This corrected version follows best practices and correctly implements the “shift–add” signed multiplication as described.