module instr_reg(
    input         clk,
    input         rst,        // active low reset
    input  [1:0]  fetch,      // control signal: 01 -> fetch into ins_p1; 10 -> fetch into ins_p2
    input  [7:0]  data,       // 8-bit instruction data input
    output [2:0]  ins,        // high 3 bits of instruction from ins_p1 (opcode)
    output [4:0]  ad1,        // low 5 bits of instruction from ins_p1 (register address)
    output [7:0]  ad2         // complete 8-bit instruction data from ins_p2
);

  // Internal registers to hold instructions from different sources
  reg [7:0] ins_p1;
  reg [7:0] ins_p2;

  // Synchronous process for instruction fetching and register update
  always @(posedge clk) begin
    if (!rst) begin
      // Active low reset: initialize registers to zero
      ins_p1 <= 8'b0;
      ins_p2 <= 8'b0;
    end else begin
      case (fetch)
        2'b01: begin
          // When fetch is 01, fetch instruction from data, store into ins_p1
          ins_p1 <= data;
        end
        2'b10: begin
          // When fetch is 10, fetch instruction from data, store into ins_p2
          ins_p2 <= data;
        end
        default: begin
          // Otherwise, retain the current instructions
          ins_p1 <= ins_p1;
          ins_p2 <= ins_p2;
        end
      endcase
    end
  end

  // Output assignments:
  // - ins: high 3 bits (opcode) from ins_p1
  // - ad1: low 5 bits (register address) from ins_p1
  // - ad2: entire 8-bit instruction from ins_p2 (for the second source)
  assign ins = ins_p1[7:5];
  assign ad1 = ins_p1[4:0];
  assign ad2 = ins_p2;

endmodule