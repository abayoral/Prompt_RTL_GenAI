module fixed_point_adder #(parameter Q = 8, parameter N = 16)
   (input  [N-1:0] a,
    input  [N-1:0] b,
    output [N-1:0] c);

  // Internal register to hold the computed result.
  reg [N-1:0] res;

  // Internal signals for computing the absolute values.
  reg [N-1:0] abs_a;
  reg [N-1:0] abs_b;
  
  // Extra bit to hold overflow from magnitude addition.
  reg [N:0] sum_temp;
  
  // Signal for magnitude difference (N-bit width is enough as difference will not overflow)
  reg [N-1:0] diff;

  // Combinational logic for the fixed point addition
  always @(*) begin
    // Compute absolute value of 'a'
    if (a[N-1] == 1'b1)
      abs_a = (~a) + 1;  // two's complement for negative value
    else
      abs_a = a;
      
    // Compute absolute value of 'b'
    if (b[N-1] == 1'b1)
      abs_b = (~b) + 1;
    else
      abs_b = b;
      
    // Check if both inputs have the same sign
    if (a[N-1] == b[N-1]) begin  // Same sign: perform magnitude addition
      // Extend result by one bit to capture potential overflow
      sum_temp = abs_a + abs_b;
      
      // Check for overflow: if the sum exceeds the representable magnitude (i.e. if the extra bit is set)
      if (sum_temp[N] == 1'b1) begin
        // Overflow detected: saturate based on the common sign
        if (a[N-1] == 1'b0)
          // For positive numbers, maximum representable value is 0 followed by all 1's in the remaining bits
          res = {1'b0, {(N-1){1'b1}}};
        else
          // For negative numbers, the most negative value (saturation to minimum value)
          res = {1'b1, {(N-1){1'b0}}};
      end else begin
        // No overflow. Now, if the inputs were positive, the result equals the sum.
        // If they were negative, the sum of the magnitudes needs to be converted back to 2's complement.
        if (a[N-1] == 1'b0)
          res = sum_temp[N-1:0];
        else
          res = (~sum_temp[N-1:0]) + 1;  // reapply negative sign
      end
      
    end else begin
      // Different signs: perform magnitude subtraction.
      // We must subtract the smaller magnitude from the larger one and assign the appropriate sign.
      if (abs_a >= abs_b) begin
        diff = abs_a - abs_b;
        // If the difference is zero, the sign is non-negative.
        if (diff == 0)
          res = {N{1'b0}};
        else if (a[N-1] == 1'b1)
          res = (~diff) + 1;  // a was negative so result takes negative sign
        else
          res = diff;         // a was positive so result is positive
      end else begin
        diff = abs_b - abs_a;
        // Similarly, assign the sign based on 'b'
        if (diff == 0)
          res = {N{1'b0}};
        else if (b[N-1] == 1'b1)
          res = (~diff) + 1;
        else
          res = diff;
      end
    end
  end

  // Continuous assignment of the result to output port
  assign c = res;

endmodule