module multi_8bit(
    input  [7:0] A,
    input  [7:0] B,
    output [15:0] product
);

    integer i;
    reg [15:0] prod;
    reg [15:0] temp;

    // Combinational logic implementing shift-and-add multiplication:
    // For each bit in B, if that bit is 1, add the current shifted value of A.
    // After each iteration, shift the multiplicand (temp) left by one position.
    always @(*) begin
        prod = 16'b0;         // Clear product accumulator.
        temp = {8'b0, A};     // Place A in the lower 8 bits of a 16-bit register.
        for (i = 0; i < 8; i = i + 1) begin
            if (B[i])
                prod = prod + temp;
            temp = temp << 1; // Shift multiplicand left for next bit position.
        end
    end

    assign product = prod;

endmodule