module add1 (
    input a, 
    input b, 
    input cin, 
    output sum, 
    output cout
);
    // Full adder: sum = a XOR b XOR cin, cout = (a & b) | (a & cin) | (b & cin)
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (a & cin) | (b & cin);
endmodule

module add16 (
    input  [15:0] a, 
    input  [15:0] b, 
    input         cin, 
    output [15:0] sum, 
    output        cout
);
    wire [16:0] carry;
    assign carry[0] = cin;
    
    genvar i;
    generate
        for (i = 0; i < 16; i = i + 1) begin: full_adder_bits
            add1 fa (
                .a(a[i]),
                .b(b[i]),
                .cin(carry[i]),
                .sum(sum[i]),
                .cout(carry[i+1])
            );
        end
    endgenerate

    assign cout = carry[16];
endmodule

module top_module (
    input  [31:0] a,
    input  [31:0] b,
    output [31:0] sum
);
    wire carry_out_lower;

    // Lower 16 bits adder with carry-in assumed 0.
    add16 lower_adder (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(sum[15:0]),
        .cout(carry_out_lower)
    );

    // Upper 16 bits adder using the carry-out of lower_adder as carry-in.
    // The final carry-out from the upper_adder is ignored.
    add16 upper_adder (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(carry_out_lower),
        .sum(sum[31:16]),
        .cout() // carry-out ignored
    );
endmodule