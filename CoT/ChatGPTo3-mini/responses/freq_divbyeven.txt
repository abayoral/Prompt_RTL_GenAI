module freq_diveven #(
    parameter NUM_DIV = 10  // Must be an even number; full period = NUM_DIV cycles, half period = NUM_DIV/2 cycles
)(
    input  clk,      // Input clock signal
    input  rst_n,    // Active-low reset signal
    output reg clk_div  // Divided clock output
);

    // 4-bit counter to count input clock cycles.
    // It counts from 0 up to (NUM_DIV/2 - 1) then toggles clk_div.
    reg [3:0] cnt;

    // Synchronous process with asynchronous active-low reset.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt     <= 4'd0;
            clk_div <= 1'b0;
        end else begin
            // When counter reaches half cycle (i.e., NUM_DIV/2 cycles),
            // reset counter and toggle the output to obtain a full period of NUM_DIV cycles.
            if (cnt == (NUM_DIV/2 - 1)) begin
                cnt     <= 4'd0;
                clk_div <= ~clk_div;
            end else begin
                cnt <= cnt + 4'd1;
            end
        end
    end

endmodule