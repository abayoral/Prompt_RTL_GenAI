module multi_16bit(
    input         clk,
    input         rst_n,
    input         start,
    input  [15:0] ain,
    input  [15:0] bin,
    output [31:0] yout,
    output        done
);

    // Internal registers
    reg [4:0] i;           // shift count register (needs 5 bits to count up to 17)
    reg       done_r;      // completion flag register
    reg [15:0] areg;       // register to hold multiplicand
    reg [15:0] breg;       // register to hold multiplier
    reg [31:0] yout_r;     // register to hold product accumulation

    // Shift count register update
    // Trigger on positive clock edge or negative reset edge
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            i <= 5'd0;
        else begin
            if (start) begin
                if (i < 5'd17)
                    i <= i + 5'd1;
                else
                    i <= i; // hold the value if it has reached 17
            end else begin
                i <= 5'd0;
            end
        end
    end

    // Completion flag update
    // Trigger on positive clock edge or negative reset edge
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            done_r <= 1'b0;
        else begin
            if (i == 5'd16)
                done_r <= 1'b1;
            else if (i == 5'd17)
                done_r <= 1'b0;
            else
                done_r <= done_r; // maintain done flag until the condition changes
        end
    end

    // Shift and accumulate operation
    // This block performs the accumulation based on the current shift counter.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            areg   <= 16'd0;
            breg   <= 16'd0;
            yout_r <= 32'd0;
        end
        else if (start) begin
            if (i == 5'd0) begin
                // For the initial cycle, load the multiplicand and multiplier 
                areg   <= ain;
                breg   <= bin;
                yout_r <= 32'd0;
            end
            else if ((i >= 5'd1) && (i <= 5'd16)) begin
                // For cycles 1 through 16: if the (i-1)th bit of the multiplicand is 1,
                // accumulate (multiplier shifted left by (i-1)) into the product register.
                if (areg[i-1])
                    yout_r <= yout_r + (breg << (i - 5'd1));
            end
            // When i is 17 or above, no operation is required.
        end
        else begin
            // When start is inactive, reset the registers.
            areg   <= 16'd0;
            breg   <= 16'd0;
            yout_r <= 32'd0;
        end
    end

    // Output assignments
    assign yout = yout_r;
    assign done = done_r;

endmodule