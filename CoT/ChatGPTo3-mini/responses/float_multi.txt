module float_multi(
  input clk,
  input rst,
  input [31:0] a,
  input [31:0] b,
  output reg [31:0] z
);

  // Cycle control counter.
  reg [2:0] counter;

  // Component registers.
  reg [23:0] a_mantissa, b_mantissa, z_mantissa;
  reg [9:0] a_exponent, b_exponent, z_exponent; // extra bits for intermediate calculation
  reg        a_sign,     b_sign,    z_sign;

  // Intermediate calculation registers.
  reg [49:0] product; // 24x24 multiplication gives up to 48 bits; we use 50 bits for extra rounding bits.
  reg        guard_bit, round_bit, sticky;
  reg        special_case;    // flag for special values (NaN or Inf)
  reg [31:0] special_value;   // value to output in special-case

  // Intermediate exponent calculation.
  reg [9:0] temp_exponent; // computed as (a_exponent+b_exponent)-127.
  
  // Rounding intermediate signals.
  reg [23:0] norm_sig;      // normalized significand (24 bits: 1 hidden + 23 fraction)
  reg [24:0] round_sum;     // for rounding addition
  reg [23:0] final_sig;     // final normalized significand after rounding
  reg [9:0]  new_exponent;  // exponent after normalization & rounding adjustments

  // Main sequential process.
  always @(posedge clk) begin
    if (rst) begin
      counter       <= 3'd0;
      z             <= 32'd0;
      special_case  <= 1'b0;
      special_value <= 32'd0;
      // Clear intermediate registers.
      a_mantissa    <= 24'd0;
      b_mantissa    <= 24'd0;
      a_exponent    <= 10'd0;
      b_exponent    <= 10'd0;
      a_sign        <= 1'b0;
      b_sign        <= 1'b0;
      product       <= 50'd0;
      temp_exponent <= 10'd0;
      norm_sig      <= 24'd0;
      z_mantissa    <= 24'd0;
      z_exponent    <= 10'd0;
      z_sign        <= 1'b0;
      guard_bit     <= 1'b0;
      round_bit     <= 1'b0;
      sticky        <= 1'b0;
      new_exponent  <= 10'd0;
      final_sig     <= 24'd0;
    end
    else begin
      case(counter)
        // Cycle 0: Input Processing Phase - extract component parts.
        3'd0: begin
          // Extract sign bits.
          a_sign     <= a[31];
          b_sign     <= b[31];

          // Extract exponents.
          // IEEE 754 single precision exponent is 8 bits; but we store in a 10-bit register.
          a_exponent <= {2'b00, a[30:23]};
          b_exponent <= {2'b00, b[30:23]};
          
          // Extract mantissas:
          // For normalized numbers (exponent != 0) the hidden bit is 1.
          // For denormalized numbers (exponent == 0) the hidden bit is 0.
          if(a[30:23] != 8'd0)
            a_mantissa <= {1'b1, a[22:0]};
          else
            a_mantissa <= {1'b0, a[22:0]};
          
          if(b[30:23] != 8'd0)
            b_mantissa <= {1'b1, b[22:0]};
          else
            b_mantissa <= {1'b0, b[22:0]};
          
          counter <= counter + 3'd1;
        end

        // Cycle 1: Special Case Handling Phase.
        3'd1: begin
          // Check if either number is NaN or Infinity.
          // For IEEE 754, if exponent == 255 (8'hFF) then the number is either Inf (if fraction==0) or NaN (if fraction != 0).
          if ((a[30:23] == 8'hFF) || (b[30:23] == 8'hFF)) begin
            // In this implementation, we simply output a quiet NaN.
            special_case  <= 1'b1;
            special_value <= 32'h7FC00000; // quiet NaN representation.
          end else begin
            special_case <= 1'b0;
          end;
          counter <= counter + 3'd1;
        end

        // Cycle 2: Multiplication Phase.
        3'd2: begin
          if (!special_case) begin
            // Compute the product of the mantissas.
            // Multiplying two 24-bit numbers gives up to 48 bits; we allocate extra bits for rounding.
            product <= a_mantissa * b_mantissa;
            // Compute preliminary exponent: add the exponents (only lower 8 bits are significant) and subtract the bias (127).
            temp_exponent <= (a_exponent[7:0] + b_exponent[7:0]) - 8'd127;
            // Compute the sign of the result.
            z_sign <= a_sign ^ b_sign;
          end;
          counter <= counter + 3'd1;
        end

        // Cycle 3: Normalization and Rounding Phase.
        3'd3: begin
          if (!special_case) begin
            // Normalize the raw product.
            // The product is 48 bits (in product[47:0]) with extra two bits available in product[49:48] unused.
            // If product[47] is 1, then the product is in the range [2.0,4.0) and must be right-shifted (mantissa, exponent).
            if (product[47] == 1'b1) begin
              // Normal case: shift right by one.
              norm_sig  <= product[47:24];  // 24 bits (leading 1 plus 23 fraction bits) before rounding.
              guard_bit <= product[23];
              round_bit <= product[22];
              sticky    <= |product[21:0];
              new_exponent <= temp_exponent + 10'd1;  // adjust exponent as we shifted.
            end
            else begin
              // Otherwise, product[47] is 0. In a correctly normalized multiplication of two normalized numbers,
              // the product should be in [1.0,2.0). In case of denormal inputs, we might get a leading zero.
              norm_sig  <= product[46:23]; // shift left by one.
              guard_bit <= product[22];
              round_bit <= product[21];
              sticky    <= |product[20:0];
              new_exponent <= temp_exponent; // no exponent increment needed.
            end
            // Apply rounding: round to nearest even.
            // Create a 25-bit field where the MSB is a zero for potential carry.
            round_sum = {1'b0, norm_sig} + 
                        (guard_bit && (round_bit || sticky || norm_sig[0]) ? 25'd1 : 25'd0);
            // Check if rounding produced a carry-out that requires normalization adjustment.
            if (round_sum[24] == 1'b1) begin
              final_sig   <= round_sum[24:1];  // shift right; the MSB becomes the new hidden bit.
              new_exponent <= new_exponent + 10'd1;
            end else begin
              final_sig <= round_sum[23:0];
            end
          end;
          counter <= counter + 3'd1;
        end

        // Cycle 4: Output Generation Phase.
        3'd4: begin
          if (special_case) begin
            // In special cases, simply output the predetermined special value.
            z <= special_value;
          end
          else begin
            // Check for exponent overflow or underflow.
            // In IEEE single-precision, the exponent field is 8 bits.
            if (new_exponent[7:0] >= 8'd255) begin
              // Overflow: result is infinity.
              z <= {z_sign, 8'hFF, 23'd0};
            end else if (new_exponent[7:0] == 8'd0) begin
              // Underflow: for simplicity, we output zero.
              z <= {z_sign, 8'd0, 23'd0};
            end else begin
              // Pack final result.
              // The final_sig has 24 bits (hidden bit + 23 fraction bits). The hidden bit is not stored.
              z <= {z_sign, new_exponent[7:0], final_sig[22:0]};
            end
          end;
          // Reset counter for next operation.
          counter <= 3'd0;
        end

        default: begin
          counter <= 3'd0;
        end
      endcase
    end
  end

endmodule