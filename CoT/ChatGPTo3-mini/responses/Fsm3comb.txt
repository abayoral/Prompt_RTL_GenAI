module top_module(
    input in,
    input [1:0] state,
    output reg [1:0] next_state,
    output reg out
);

    parameter A = 2'b00,
              B = 2'b01,
              C = 2'b10,
              D = 2'b11;

    // Combinational logic for state transitions based on current state and input
    always @(*) begin
        case(state)
            A: begin
                if (in == 1'b0)
                    next_state = A;
                else
                    next_state = B;
            end
            B: begin
                if (in == 1'b0)
                    next_state = C;
                else
                    next_state = B;
            end
            C: begin
                if (in == 1'b0)
                    next_state = A;
                else
                    next_state = D;
            end
            D: begin
                if (in == 1'b0)
                    next_state = C;
                else
                    next_state = B;
            end
            default: next_state = A;
        endcase
    end

    // Combinational logic for output generation (Moore machine - output depends solely on state)
    always @(*) begin
        case(state)
            A, B, C: out = 1'b0;
            D:       out = 1'b1;
            default: out = 1'b0;
        endcase
    end

endmodule