module freq_divbyodd #
(
  parameter NUM_DIV = 5  // Must be an odd number
)
(
  input  clk,      // Input clock signal
  input  rst_n,    // Active-low reset
  output clk_div   // Divided clock output
);

  // Calculate half divisor value (integer division)
  // For an odd number, this will be floor(NUM_DIV/2)
  localparam HALF = NUM_DIV >> 1;

  // Determine the number of bits required for the counters
  localparam CNT_WIDTH = $clog2(NUM_DIV);

  // Counter and clock divider for positive edge processing
  reg [CNT_WIDTH-1:0] cnt1;
  reg                 clk_div1;

  // Counter and clock divider for negative edge processing
  reg [CNT_WIDTH-1:0] cnt2;
  reg                 clk_div2;

  // Process positive edges of the input clock
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      cnt1      <= 0;
      clk_div1  <= 0;
    end
    else begin
      if (cnt1 == (NUM_DIV - 1))
        cnt1 <= 0;
      else
        cnt1 <= cnt1 + 1;

      // Toggle clk_div1 when counter reaches HALF value
      if (cnt1 == HALF)
        clk_div1 <= ~clk_div1;
    end
  end

  // Process negative edges of the input clock
  always @(negedge clk or negedge rst_n) begin
    if (!rst_n) begin
      cnt2      <= 0;
      clk_div2  <= 0;
    end
    else begin
      if (cnt2 == (NUM_DIV - 1))
        cnt2 <= 0;
      else
        cnt2 <= cnt2 + 1;

      // Toggle clk_div2 when counter reaches HALF value
      if (cnt2 == HALF)
        clk_div2 <= ~clk_div2;
    end
  end

  // Output clock is the OR of the two divided clocks
  assign clk_div = clk_div1 | clk_div2;

endmodule