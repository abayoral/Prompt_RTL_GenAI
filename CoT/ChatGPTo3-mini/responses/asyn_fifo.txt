module asyn_fifo #(
    parameter WIDTH = 8,
    parameter DEPTH = 16,
    // Derived parameters
    parameter ADDR_WIDTH = $clog2(DEPTH),
    parameter PTR_WIDTH  = ADDR_WIDTH + 1
)(
    input                 wclk,
    input                 rclk,
    input                 wrstn,
    input                 rrstn,
    input                 winc,
    input                 rinc,
    input [WIDTH-1:0]     wdata,
    output                wfull,
    output                rempty,
    output [WIDTH-1:0]    rdata
);

    //--------------------------------------------------------------------------
    // Pointer registers in write and read clock domains (binary & Gray-coded)
    reg [PTR_WIDTH-1:0] wptr_bin, wptr_gray;
    reg [PTR_WIDTH-1:0] rptr_bin, rptr_gray;

    // Synchronizers for pointer crossing clock domains
    reg [PTR_WIDTH-1:0] rptr_gray_wclk_sync1, rptr_gray_wclk_sync2;
    reg [PTR_WIDTH-1:0] wptr_gray_rclk_sync1, wptr_gray_rclk_sync2;

    //---------------------------------------------------------------------------
    // Functions: Binary to Gray and Gray to Binary conversion
    function [PTR_WIDTH-1:0] bin2gray;
        input [PTR_WIDTH-1:0] bin;
        begin
            bin2gray = bin ^ (bin >> 1);
        end
    endfunction

    function [PTR_WIDTH-1:0] gray2bin;
        input [PTR_WIDTH-1:0] gray;
        reg   [PTR_WIDTH-1:0] bin;
        integer i;
        begin
            bin[PTR_WIDTH-1] = gray[PTR_WIDTH-1];
            for(i = PTR_WIDTH-2; i >= 0; i = i - 1)
                bin[i] = bin[i+1] ^ gray[i];
            gray2bin = bin;
        end
    endfunction

    //---------------------------------------------------------------------------
    // Write Pointer and associated Gray conversion in the write clock domain
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            wptr_bin  <= 0;
            wptr_gray <= 0;
        end else begin
            if (winc && !wfull) begin
                wptr_bin  <= wptr_bin + 1;
                wptr_gray <= bin2gray(wptr_bin + 1);
            end
        end
    end

    //---------------------------------------------------------------------------
    // Read Pointer and associated Gray conversion in the read clock domain
    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            rptr_bin  <= 0;
            rptr_gray <= 0;
        end else begin
            if (rinc && !rempty) begin
                rptr_bin  <= rptr_bin + 1;
                rptr_gray <= bin2gray(rptr_bin + 1);
            end
        end
    end

    //---------------------------------------------------------------------------
    // Pointer Synchronizer: Synchronize read pointer (Gray-coded) into write clock domain
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            rptr_gray_wclk_sync1 <= 0;
            rptr_gray_wclk_sync2 <= 0;
        end else begin
            rptr_gray_wclk_sync1 <= rptr_gray;
            rptr_gray_wclk_sync2 <= rptr_gray_wclk_sync1;
        end
    end

    //---------------------------------------------------------------------------
    // Pointer Synchronizer: Synchronize write pointer (Gray-coded) into read clock domain
    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            wptr_gray_rclk_sync1 <= 0;
            wptr_gray_rclk_sync2 <= 0;
        end else begin
            wptr_gray_rclk_sync1 <= wptr_gray;
            wptr_gray_rclk_sync2 <= wptr_gray_rclk_sync1;
        end
    end

    //---------------------------------------------------------------------------
    // FIFO Status Flags (using Gray pointers)
    // The FIFO is empty when the read pointer equals the synchronized write pointer.
    assign rempty = (rptr_gray == wptr_gray_rclk_sync2);
    
    // The FIFO is full when the write pointer's Gray code equals the read pointer's Gray code with the MSB inverted.
    assign wfull = (wptr_gray == {~rptr_gray_wclk_sync2[PTR_WIDTH-1], rptr_gray_wclk_sync2[PTR_WIDTH-2:0]});

    //---------------------------------------------------------------------------
    // Dual-Port RAM instance for data storage.
    // Write port uses address from write pointer binary (lower ADDR_WIDTH bits)
    // Read port uses address from read pointer binary (lower ADDR_WIDTH bits)
    wire [ADDR_WIDTH-1:0] waddr = wptr_bin[ADDR_WIDTH-1:0];
    wire [ADDR_WIDTH-1:0] raddr = rptr_bin[ADDR_WIDTH-1:0];

    // Enable signals for RAM access: only perform read/write if allowed
    wire write_enable = winc && !wfull;
    wire read_enable  = rinc && !rempty;

    dual_port_ram #(
        .WIDTH(WIDTH),
        .DEPTH(DEPTH),
        .ADDR_WIDTH(ADDR_WIDTH)
    ) ram_inst (
        .wclk   (wclk),
        .wenc   (write_enable),
        .waddr  (waddr),
        .wdata  (wdata),
        .rclk   (rclk),
        .renc   (read_enable),
        .raddr  (raddr),
        .rdata  (rdata)
    );

endmodule

//------------------------------------------------------------------------------
// Dual-Port RAM Module
//------------------------------------------------------------------------------
module dual_port_ram #(
    parameter WIDTH = 8,
    parameter DEPTH = 16,
    parameter ADDR_WIDTH = $clog2(DEPTH)
)(
    input                   wclk,
    input                   wenc,
    input [ADDR_WIDTH-1:0]  waddr,
    input [WIDTH-1:0]       wdata,
    input                   rclk,
    input                   renc,
    input [ADDR_WIDTH-1:0]  raddr,
    output reg [WIDTH-1:0]  rdata
);

    // Memory array
    reg [WIDTH-1:0] mem [0:DEPTH-1];

    // Write operation (synchronous write)
    always @(posedge wclk) begin
        if (wenc)
            mem[waddr] <= wdata;
    end

    // Read operation (synchronous read with a registered output)
    always @(posedge rclk) begin
        if (renc)
            rdata <= mem[raddr];
    end

endmodule