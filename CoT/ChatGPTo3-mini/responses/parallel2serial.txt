module parallel2serial(
    input        clk,    // Clock input
    input        rst_n,  // Active-low reset
    input  [3:0] d,      // 4-bit parallel data input
    output reg   valid_out, // Valid serial data output indicator
    output reg   dout       // Serial data output
);

  // 2-bit counter to cycle through the 4-bit input data
  reg [1:0] cnt;

  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      // On reset, initialize counter and outputs to known states
      cnt       <= 2'd0;
      dout      <= 1'b0;
      valid_out <= 1'b0;
    end 
    else begin
      // valid_out is high throughout the serial conversion process
      valid_out <= 1'b1;
      
      // Output the correct bit based on the counter value:
      // cnt = 0 -> output MSB (d[3])
      // cnt = 1 -> output d[2]
      // cnt = 2 -> output d[1]
      // cnt = 3 -> output LSB (d[0])
      case (cnt)
        2'd0: dout <= d[3];
        2'd1: dout <= d[2];
        2'd2: dout <= d[1];
        2'd3: dout <= d[0];
        default: dout <= 1'b0;
      endcase

      // Increment the counter; when cnt == 3 reset it to 0
      if (cnt == 2'd3)
        cnt <= 2'd0;
      else
        cnt <= cnt + 2'd1;
    end
  end

endmodule