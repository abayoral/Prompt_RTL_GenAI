module top_module(
    input clk,
    input in,
    input areset,
    output reg out);

    // State encoding using 2-bit parameters
    localparam A = 2'b00,
               B = 2'b01,
               C = 2'b10,
               D = 2'b11;

    reg [1:0] current_state, next_state;

    // Next state logic based on current state and input
    always @(*) begin
        case (current_state)
            A: next_state = (in) ? B : A;
            B: next_state = (in) ? B : C;
            C: next_state = (in) ? D : A;
            D: next_state = (in) ? B : C;
            default: next_state = A;
        endcase
    end

    // State registers with asynchronous reset
    always @(posedge clk or posedge areset) begin
        if (areset)
            current_state <= A;
        else
            current_state <= next_state;
    end

    // Output logic: Moore machine output depends solely on current state
    always @(*) begin
        case (current_state)
            D: out = 1'b1;
            default: out = 1'b0;
        endcase
    end

endmodule