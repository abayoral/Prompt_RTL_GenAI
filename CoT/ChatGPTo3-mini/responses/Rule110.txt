module top_module(
    input clk,
    input load,
    input [511:0] data,
    output [511:0] q
);

    reg [511:0] state;
    reg [511:0] next_state;
    integer i;
    
    // Combinational logic to compute the next state for Rule 110
    // For each cell, the left neighbor is state[i-1] (or 0 if i==0),
    // the center is state[i], and the right neighbor is state[i+1] (or 0 if i==511).
    // Rule 110: 111->0, 110->1, 101->1, 100->0, 011->1, 010->1, 001->1, 000->0
    // This can be implemented with: next = (~left & (center | right)) | (left & (center ^ right))
    always @* begin
        for(i = 0; i < 512; i = i + 1) begin
            next_state[i] = ( ~((i==0)   ? 1'b0 : state[i-1]) & ( state[i] | ((i==511) ? 1'b0 : state[i+1]) ) ) |
                            ( ((i==0)   ? 1'b0 : state[i-1]) & ( state[i] ^ ((i==511) ? 1'b0 : state[i+1]) ) );
        end
    end
    
    // Sequential logic: on every clock cycle, either load new data or update the state
    always @(posedge clk) begin
        if (load)
            state <= data;
        else
            state <= next_state;
    end
    
    assign q = state;
    
endmodule