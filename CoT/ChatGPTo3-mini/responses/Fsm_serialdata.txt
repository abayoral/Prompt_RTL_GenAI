module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output [7:0] out_byte,
    output done
);

    // FSM states
    localparam IDLE      = 2'd0;
    localparam RECEIVE   = 2'd1;
    localparam STOP_CHECK = 2'd2;
    localparam WAIT_STOP  = 2'd3;
    
    reg [1:0] state;
    reg [3:0] bit_count;
    reg [7:0] shift_reg;
    reg done_reg;
    
    // The serial protocol sends the LSB first.
    // We shift in one bit at a time: in the RECEIVE state we shift the input bit into the MSB of shift_reg,
    // so that after 8 shifts, shift_reg = {b7, b6, ..., b0}. To output the byte with b0 at bit0,
    // we simply reverse the bit order on output.
    assign out_byte = {shift_reg[0], shift_reg[1], shift_reg[2], shift_reg[3],
                       shift_reg[4], shift_reg[5], shift_reg[6], shift_reg[7]};
    
    assign done = done_reg;
    
    always @(posedge clk) begin
        if (reset) begin
            state     <= IDLE;
            bit_count <= 0;
            shift_reg <= 0;
            done_reg  <= 0;
        end 
        else begin
            // clear done by default
            done_reg <= 0;
            case (state)
                IDLE: begin
                    // Wait for the start bit. In an idle line the in signal should be 1.
                    // A low (0) indicates a potential start bit.
                    if (in == 0) begin
                        state     <= RECEIVE;
                        bit_count <= 0;
                    end
                end
                
                RECEIVE: begin
                    // Shift in the new data bit.
                    // We shift in from the left so that after 8 bits:
                    // shift_reg = {b7, b6, ... , b0}; note that the serial stream sends LSB first.
                    shift_reg <= {in, shift_reg[7:1]};
                    if (bit_count == 7) begin
                        // Received all 8 bits, now check the stop bit.
                        state <= STOP_CHECK;
                    end
                    else begin
                        bit_count <= bit_count + 1;
                    end
                end
                
                STOP_CHECK: begin
                    // The stop bit should be high ('1').
                    if (in == 1) begin
                        // Valid stop bit -- assert done and latch the valid byte.
                        done_reg <= 1;
                        state    <= IDLE;
                    end
                    else begin
                        // Framing error: stop bit did not appear when expected.
                        // Wait until a stop bit is found before starting next reception.
                        state <= WAIT_STOP;
                    end
                end
                
                WAIT_STOP: begin
                    // Do not sample any data bits.
                    // Once a stop bit (in==1) appears we return to the IDLE state.
                    if (in == 1) begin
                        state <= IDLE;
                    end
                end
                
                default: state <= IDLE;
            endcase
        end
    end

endmodule