module alu(
    input  [31:0] a,
    input  [31:0] b,
    input  [5:0]  aluc,
    output reg [31:0] r,
    output reg zero,
    output reg carry,
    output reg negative,
    output reg overflow,
    output reg flag
);

  // Define opcode parameters
  localparam [5:0] ADD   = 6'b100000;
  localparam [5:0] ADDU  = 6'b100001;
  localparam [5:0] SUB   = 6'b100010;
  localparam [5:0] SUBU  = 6'b100011;
  localparam [5:0] AND_OP= 6'b100100;
  localparam [5:0] OR_OP = 6'b100101;
  localparam [5:0] XOR_OP= 6'b100110;
  localparam [5:0] NOR_OP= 6'b100111;
  localparam [5:0] SLT   = 6'b101010;
  localparam [5:0] SLTU  = 6'b101011;
  localparam [5:0] SLL   = 6'b000000;
  localparam [5:0] SRL   = 6'b000010;
  localparam [5:0] SRA   = 6'b000011;
  localparam [5:0] SLLV  = 6'b000100;
  localparam [5:0] SRLV  = 6'b000110;
  localparam [5:0] SRAV  = 6'b000111;
  localparam [5:0] LUI   = 6'b001111;

  // Internal variable for extended arithmetic operations
  reg [32:0] tmp;

  always @(*) begin
    // Default assignments
    r        = 32'b0;
    carry    = 1'b0;
    overflow = 1'b0;
    flag     = 1'b0;

    case(aluc)
      // Signed Addition
      ADD: begin
             tmp = {1'b0, a} + {1'b0, b};
             r = tmp[31:0];
             carry = tmp[32];
             // Overflow when sign of operands are same and sign of result differs.
             overflow = ((a[31] == b[31]) && (r[31] != a[31]));
           end

      // Unsigned Addition: overflow is not defined.
      ADDU: begin
              tmp = {1'b0, a} + {1'b0, b};
              r = tmp[31:0];
              carry = tmp[32];
              overflow = 1'b0;
            end

      // Signed Subtraction
      SUB: begin
             tmp = {1'b0, a} - {1'b0, b};
             r = tmp[31:0];
             // For subtraction, interpret carry as the inverse of the borrow.
             carry = ~tmp[32];
             // Overflow: if signs of a and b differ and sign of result differs from sign of a.
             overflow = ((a[31] != b[31]) && (r[31] != a[31]));
           end

      // Unsigned Subtraction
      SUBU: begin
              tmp = {1'b0, a} - {1'b0, b};
              r = tmp[31:0];
              carry = ~tmp[32];
              overflow = 1'b0;
            end

      // Bitwise AND
      AND_OP: begin
                r = a & b;
              end

      // Bitwise OR
      OR_OP: begin
               r = a | b;
             end

      // Bitwise XOR
      XOR_OP: begin
                r = a ^ b;
             end

      // Bitwise NOR
      NOR_OP: begin
                r = ~(a | b);
              end

      // Set on Less Than (signed comparison)
      SLT: begin
             if ($signed(a) < $signed(b))
               flag = 1'b1;
             else
               flag = 1'b0;
             // For convenience, we extend the 1-bit flag into 32-bit result.
             r = {31'b0, flag};
           end

      // Set on Less Than Unsigned (unsigned comparison)
      SLTU: begin
              if (a < b)
                flag = 1'b1;
              else
                flag = 1'b0;
              r = {31'b0, flag};
            end

      // Shift Left Logical with immediate shift amount in bits [10:6] of operand 'a'
      SLL: begin
             r = b << a[10:6];
           end

      // Shift Right Logical with immediate shift amount in bits [10:6] of operand 'a'
      SRL: begin
             r = b >> a[10:6];
           end

      // Shift Right Arithmetic with immediate shift amount in bits [10:6] of operand 'a'
      SRA: begin
             r = $signed(b) >>> a[10:6];
           end

      // Shift Left Logical Variable: shift amount given by lower 5 bits of 'a'
      SLLV: begin
              r = b << a[4:0];
            end

      // Shift Right Logical Variable
      SRLV: begin
              r = b >> a[4:0];
            end

      // Shift Right Arithmetic Variable
      SRAV: begin
              r = $signed(b) >>> a[4:0];
            end

      // Load Upper Immediate: shift the lower 16 bits of 'a' into the upper 16 bits
      LUI: begin
             r = {a[15:0], 16'b0};
           end

      // Default: unhandled opcodes -> high impedance on outputs
      default: begin
                 r        = 32'bz;
                 carry    = 1'bz;
                 overflow = 1'bz;
                 flag     = 1'bz;
               end
    endcase

    // Set the zero flag if result is zero
    zero = (r === 32'b0);
    // Negative flag indicates that the result is negative (MSB is 1)
    negative = r[31];
  end

endmodule