module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    // FSM state encoding
    localparam IDLE  = 2'b00,
               BYTE2 = 2'b01,
               BYTE3 = 2'b10;

    reg [1:0] state;

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            out_bytes <= 24'b0;
            done <= 0;
        end else begin
            // default: done low unless a complete message is captured
            done <= 1'b0;
            case (state)
                IDLE: begin
                    // Wait until a byte with bit[3]==1 appears.
                    if (in[3]) begin
                        // this byte is the first byte of the 3-byte packet.
                        out_bytes[23:16] <= in;
                        state <= BYTE2;
                    end else begin
                        state <= IDLE;
                    end
                end

                BYTE2: begin
                    // Capture the second byte
                    out_bytes[15:8] <= in;
                    state <= BYTE3;
                end

                BYTE3: begin
                    // Capture the third byte and signal done
                    out_bytes[7:0] <= in;
                    done <= 1'b1;
                    state <= IDLE;
                end

                default: state <= IDLE;
            endcase
        end
    end

endmodule