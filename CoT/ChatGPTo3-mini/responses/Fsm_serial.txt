module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);

    // State encoding
    localparam IDLE      = 2'd0;
    localparam DATA      = 2'd1;
    localparam STOP      = 2'd2;
    localparam STOP_WAIT = 2'd3;

    reg [1:0] state;
    reg [2:0] bit_count;  // To count 8 data bits (0 to 7)

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            bit_count <= 3'd0;
            done <= 1'b0;
        end else begin
            // By default done is 0; we assert it when a valid byte is completely received.
            done <= 1'b0;
            case (state)
                IDLE: begin
                    // The line is idle at 1. A start bit is 0.
                    if (in == 1'b0) begin
                        state <= DATA;
                        bit_count <= 3'd0;
                    end
                end
                DATA: begin
                    // Sample the data bit (actual value is not checked).
                    // When we've sampled 8 data bits, transition to the STOP state.
                    if (bit_count == 3'd7)
                        state <= STOP;
                    else
                        bit_count <= bit_count + 1'b1;
                end
                STOP: begin
                    // The stop bit should be high (1).
                    if (in == 1'b1) begin
                        done <= 1'b1;  // Indicate a correct framing (start, 8 data bits, stop)
                        state <= IDLE;
                    end else begin
                        // If the stop bit is not high, wait here until a 1 is seen.
                        state <= STOP_WAIT;
                    end
                end
                STOP_WAIT: begin
                    // Wait for in to become high (the line returning to idle)
                    if (in == 1'b1)
                        state <= IDLE;
                end
                default: state <= IDLE;
            endcase
        end
    end

endmodule