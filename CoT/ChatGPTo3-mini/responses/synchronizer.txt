module synchronizer(
    input         clk_a,     // Clock for data domain
    input         arstn,     // Asynchronous reset for clk_a, active low
    input  [3:0]  data_in,   // 4-bit input data in clk_a domain
    input         data_en,   // Enable signal in clk_a domain
    input         clk_b,     // Clock for synchronization and output domain
    input         brstn,     // Asynchronous reset for clk_b, active low
    output reg [3:0] dataout  // 4-bit synchronized output data
);

    // Registers in clk_a domain
    reg [3:0] data_reg;       // Latches data_in when enabled in clk_a domain
    reg       en_data_reg;    // Latches data_en from clk_a domain

    // Synchronizer registers in clk_b domain to delay the enable signal
    reg en_clap_one;          // First stage of synchronization (1st clock cycle delay)
    reg en_clap_two;          // Second stage of synchronization (2nd clock cycle delay)

    // Process in clk_a domain: latch data and enable signal when data_en is high.
    always @(posedge clk_a or negedge arstn) begin
        if (!arstn) begin
            data_reg    <= 4'b0;
            en_data_reg <= 1'b0;
        end else begin
            if (data_en) begin
                data_reg    <= data_in;
                en_data_reg <= data_en;
            end else begin
                // Optionally clear the enable flag if not high.
                en_data_reg <= 1'b0;
            end
        end
    end

    // Process in clk_b domain: synchronize the enable signal and update dataout.
    // The enable signal passes through two flip-flops (en_clap_one and en_clap_two)
    // thereby achieving a two-cycle propagation delay, which with the requirement
    // of data_en being high for at least three cycles, ensures proper synchronization.
    always @(posedge clk_b or negedge brstn) begin
        if (!brstn) begin
            en_clap_one <= 1'b0;
            en_clap_two <= 1'b0;
            dataout     <= 4'b0;
        end else begin
            // Pass the enable from clk_a (safely latched as en_data_reg) through two flip-flops.
            en_clap_one <= en_data_reg;
            en_clap_two <= en_clap_one;

            // When the synchronized enable (en_clap_two) is active, update output.
            // Otherwise, retain the current value of dataout.
            if (en_clap_two)
                dataout <= data_reg;
            // If en_clap_two is inactive, dataout holds its previous state.
        end
    end

endmodule