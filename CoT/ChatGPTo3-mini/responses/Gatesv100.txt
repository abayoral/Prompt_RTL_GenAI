module top_module( 
    input [99:0] in,
    output [98:0] out_both,
    output [99:1] out_any,
    output [99:0] out_different );

    // out_both[i] is 1 if both in[i] and its left‐neighbor in[i+1] are 1 (for i=0 to 98)
    assign out_both = in[98:0] & in[99:1];

    // out_any[i] is 1 if either in[i] or its right‐neighbor in[i-1] is 1 (for i=1 to 99)
    assign out_any = in[99:1] | in[98:0];

    // For out_different, we treat the input as arranged left-to‐right (with in[99] as the leftmost bit).
    // Each out_different[i] is 1 if in[i] is different from its left neighbor.
    // For bits 0 through 98, the left neighbor is in[i+1] and for bit 99, the left neighbor is in[0] (wrap-around).
    // We form a rotated version of 'in' where the bit to the left of in[i] is given by:
    // rotated[99] = in[0] and rotated[98:0] = in[99:1].
    assign out_different = in ^ {in[0], in[99:1]};

endmodule