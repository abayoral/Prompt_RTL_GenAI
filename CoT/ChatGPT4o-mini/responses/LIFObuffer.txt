```
module LIFObuffer (
    input  wire [3:0] dataIn,
    input  wire RW,
    input  wire EN,
    input  wire Rst,
    input  wire Clk,
    output wire EMPTY,
    output wire FULL,
    output reg  [3:0] dataOut
);
    reg [3:0] stack_mem [0:3]; // 4-bit entries with space for 4 entries
    reg [1:0] SP;              // Stack pointer to track the top of the stack

    assign EMPTY = (SP == 2'b00);
    assign FULL = (SP == 2'b10);

    always @(posedge Clk or posedge Rst) begin
        if (Rst) begin
            SP <= 2'b00;                // Reset stack pointer to empty state
            dataOut <= 4'b0000;         // Clear output data
            // Clear the stack memory
            stack_mem[0] <= 4'b0000;
            stack_mem[1] <= 4'b0000;
            stack_mem[2] <= 4'b0000;
            stack_mem[3] <= 4'b0000;
        end else if (EN) begin
            if (RW == 1'b0) begin       // Push operation
                if (!FULL) begin
                    stack_mem[SP] <= dataIn; // Push data into the stack
                    SP <= SP + 2'b01;       // Increment stack pointer
                end
            end else begin                // Pop operation
                if (!EMPTY) begin
                    dataOut <= stack_mem[SP - 1]; // Get data from the top
                    stack_mem[SP - 1] <= 4'b0000; // Clear the top stack entry
                    SP <= SP - 2'b01;       // Decrement stack pointer
                end
            end
        end
    end
endmodule
```