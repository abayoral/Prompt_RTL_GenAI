```verilog
module radix2_div (
    input wire clk,
    input wire rst,
    input wire sign,
    input wire [7:0] dividend,
    input wire [7:0] divisor,
    input wire opn_valid,
    output reg res_valid,
    output reg [15:0] result
);

    reg [7:0] abs_dividend;
    reg [7:0] abs_divisor;
    reg signed [8:0] NEG_DIVISOR;
    reg [3:0] cnt;
    reg start_cnt;
    reg [15:0] SR; // Shift register to hold the quotient and remainder

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            result <= 16'b0;
            cnt <= 0;
            start_cnt <= 1'b0;
            SR <= 16'b0;
        end else begin
            if (opn_valid && !res_valid) begin
                abs_dividend <= (sign && dividend[7]) ? ~dividend + 1 : dividend; // Handle signed dividend
                abs_divisor <= (sign && divisor[7]) ? ~divisor + 1 : divisor; // Handle signed divisor
                NEG_DIVISOR <= -abs_divisor; // Negative divisor for subtraction
                cnt <= 1; // Start counting from 1
                start_cnt <= 1'b1;
                SR <= {8'b0, abs_dividend} << 1; // Initialize with shifted dividend
            end

            if (start_cnt) begin
                if (cnt < 8) begin
                    cnt <= cnt + 1; // Increment counter

                    // Perform the subtraction and set multiplexed bits if needed
                    if (SR[15:8] >= abs_divisor) begin
                        SR[15:8] <= SR[15:8] + NEG_DIVISOR; // Subtract
                        SR[0] <= 1'b1; // Set the quotient bit
                    end else begin
                        SR[0] <= 1'b0; // Do not set the quotient bit
                    end

                    // Shift left to prepare for next bit
                    SR <= SR << 1;
                end else begin
                    // Finalizing the result
                    start_cnt <= 1'b0; // Stop the counting
                    res_valid <= 1'b1; // Result is valid
                    result <= {SR[15:8], SR[7:0]}; // Assign the outcome to result
                end
            end
            
            // If the result is consumed, clear res_valid
            if (res_valid && !opn_valid) begin
                res_valid <= 0; // Reset result valid when operation is not valid anymore
            end
        end
    end
endmodule
```