```
module multi_pipe_8bit (
    input wire clk,
    input wire rst_n,
    input wire mul_en_in,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    output reg mul_en_out,
    output reg [15:0] mul_out
);

    reg [7:0] mul_a_reg;
    reg [7:0] mul_b_reg;
    reg mul_en_out_reg;
    reg [15:0] partial_products [0:7];
    reg [15:0] sum;
    reg [15:0] mul_out_reg;

    integer i;

    // Generating partial products
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_a_reg <= 8'b0;
            mul_b_reg <= 8'b0;
            mul_en_out_reg <= 1'b0;
            mul_out_reg <= 16'b0;
            sum <= 16'b0;
            mul_en_out <= 1'b0;
        end else begin
            if (mul_en_in) begin
                mul_a_reg <= mul_a;
                mul_b_reg <= mul_b;
                mul_en_out_reg <= 1'b1;
            end
            else begin
                mul_en_out_reg <= 1'b0;
            end

            // Generate partial products
            for (i = 0; i < 8; i = i + 1) begin
                if (mul_b_reg[i]) begin
                    partial_products[i] = {mul_a_reg, 8'b0} >> i;  // Shift mul_a according to multiplier bit position
                end else begin
                    partial_products[i] = 16'b0; 
                end
            end

            // Accumulate the partial products to form the final product
            sum = partial_products[0];
            for (i = 1; i < 8; i = i + 1) begin
                sum = sum + partial_products[i];
            end

            // Update the output registers
            mul_out_reg <= sum;
            mul_out <= (mul_en_out_reg) ? mul_out_reg : 16'b0;
            mul_en_out <= mul_en_out_reg;
        end
    end

endmodule
```