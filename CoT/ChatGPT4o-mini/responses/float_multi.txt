```
module float_multi (
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

    reg [2:0] counter;
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [7:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;

    // State definitions
    localparam IDLE = 3'b000, EXTRACT = 3'b001, SPECIAL_CASE = 3'b010,
               MULTIPLY = 3'b011, ROUND_AND_NORMALIZE = 3'b100, OUTPUT = 3'b101;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 0;
            z <= 32'b0;
        end else begin
            case (counter)
                IDLE: begin
                    counter <= EXTRACT;
                end

                EXTRACT: begin
                    a_sign <= a[31];
                    b_sign <= b[31];
                    a_exponent <= a[30:23];
                    b_exponent <= b[30:23];
                    a_mantissa <= {1'b1, a[22:0]}; // implicit 1 for normalized
                    b_mantissa <= {1'b1, b[22:0]}; // implicit 1 for normalized
                    counter <= SPECIAL_CASE;
                end

                SPECIAL_CASE: begin
                    if (a_exponent == 8'hFF || b_exponent == 8'hFF) begin
                        // Handle NaN or Infinity case
                        if ((a_exponent == 8'hFF && a_mantissa != 24'b0) || (b_exponent == 8'hFF && b_mantissa != 24'b0)) begin
                            z <= 32'h7FC00000; // NaN
                        end else if (a_exponent == 8'hFF) begin
                            z <= a; // a is infinity
                        end else if (b_exponent == 8'hFF) begin
                            z <= b; // b is infinity
                        end else begin
                            z <= 32'b0; // Zero case
                        end
                        counter <= OUTPUT;
                    end else begin
                        counter <= MULTIPLY;
                    end
                end

                MULTIPLY: begin
                    product <= a_mantissa * b_mantissa;
                    z_exponent <= a_exponent + b_exponent - 8'd127; // subtract bias
                    z_sign <= a_sign ^ b_sign; // XOR for sign
                    counter <= ROUND_AND_NORMALIZE;
                end

                ROUND_AND_NORMALIZE: begin
                    // Extract the relevant bits for rounding
                    z_mantissa <= product[47:24]; // 24 mantissa bits after multiplication
                    guard_bit <= product[23];
                    round_bit <= product[22];
                    sticky <= |product[21:0]; // sticky bit is any trailing bits set

                    // Rounding logic
                    if (round_bit && (guard_bit || sticky)) begin
                        z_mantissa <= z_mantissa + 1;
                    end

                    // Check for normalization
                    if (z_mantissa[23] == 1) begin
                        z_exponent <= z_exponent + 1; // increment exponent if normalizing
                        z_mantissa <= z_mantissa >> 1; // shift right
                    end

                    counter <= OUTPUT;
                end

                OUTPUT: begin
                    z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                    counter <= IDLE; // Return to idle state
                end

                default: counter <= IDLE; // Safety
            endcase
        end
    end
endmodule
```