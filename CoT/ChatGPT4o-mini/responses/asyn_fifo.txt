```verilog
module dual_port_ram #(parameter WIDTH = 8, parameter DEPTH = 16) (
    input wire wclk,         
    input wire wenc,         
    input wire [clog2(DEPTH)-1:0] waddr,   
    input wire [WIDTH-1:0] wdata,           
    input wire rclk,         
    input wire renc,         
    input wire [clog2(DEPTH)-1:0] raddr,   
    output reg [WIDTH-1:0] rdata             
);
    reg [WIDTH-1:0] ram [0:DEPTH-1];

    always @(posedge wclk) begin
        if (wenc) begin
            ram[waddr] <= wdata;
        end
    end

    always @(posedge rclk) begin
        if (renc) begin
            rdata <= ram[raddr];
        end
    end
endmodule

module asyn_fifo #(parameter WIDTH = 8, parameter DEPTH = 16) (
    input wire wclk,         
    input wire rclk,         
    input wire wrstn,        
    input wire rrstn,        
    input wire winc,         
    input wire rinc,         
    input wire [WIDTH-1:0] wdata,  
    output reg wfull,        
    output reg rempty,       
    output reg [WIDTH-1:0] rdata
);
    localparam ADDR_WIDTH = clog2(DEPTH);
    reg [ADDR_WIDTH-1:0] wptr_gray, rptr_gray, wptr_bin, rptr_bin;
    reg [ADDR_WIDTH-1:0] waddr, raddr;
    wire [ADDR_WIDTH-1:0] wptr_gray_next, rptr_gray_next;

    function integer clog2;
        input integer num;
        begin
            num = num - 1;
            for (clog2 = 0; num > 0; clog2 = clog2 + 1) begin
                num = num >> 1;
            end
        end
    endfunction

    // Dual-port RAM instance
    dual_port_ram #(WIDTH, DEPTH) ram_inst (
        .wclk(wclk),
        .wenc(winc),
        .waddr(waddr),
        .wdata(wdata),
        .rclk(rclk),
        .renc(rinc),
        .raddr(raddr),
        .rdata(rdata)
    );

    // Gray code conversion
    function [ADDR_WIDTH-1:0] bin_to_gray;
        input [ADDR_WIDTH-1:0] bin;
        begin
            bin_to_gray = bin ^ (bin >> 1);
        end
    endfunction

    function [ADDR_WIDTH-1:0] gray_to_bin;
        input [ADDR_WIDTH-1:0] gray;
        integer i;
        begin
            gray_to_bin = 0;
            for (i = 0; i < ADDR_WIDTH; i = i + 1) begin
                gray_to_bin[i] = ^gray[ADDR_WIDTH-1:i];
            end
        end
    endfunction

    // Write pointer update
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            wptr_gray <= 0;
            waddr <= 0;
        end else if (winc && !wfull) begin
            wptr_gray <= bin_to_gray(wptr_gray + 1);
            waddr <= gray_to_bin(wptr_gray + 1);
        end
    end

    // Read pointer update
    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            rptr_gray <= 0;
            raddr <= 0;
        end else if (rinc && !rempty) begin
            rptr_gray <= bin_to_gray(rptr_gray + 1);
            raddr <= gray_to_bin(rptr_gray + 1);
        end
    end

    // Full and empty flag logic
    always @(*) begin
        wfull = (wptr_gray[ADDR_WIDTH-1] ^ rptr_gray[ADDR_WIDTH-1]) & 
                (wptr_gray[ADDR_WIDTH-2:0] == rptr_gray[ADDR_WIDTH-2:0]);
        rempty = (wptr_gray == rptr_gray);
    end
endmodule
```