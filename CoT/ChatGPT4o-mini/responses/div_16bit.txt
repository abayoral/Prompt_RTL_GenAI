```verilog
module div_16bit (
    input  [15:0] A, // 16-bit dividend
    input  [7:0]  B, // 8-bit divisor
    output [15:0] result, // Quotient
    output [15:0] odd // Remainder
);
    reg [15:0] quotient;
    reg [15:0] remainder;
    reg [15:0] a_reg;
    reg [7:0]  b_reg;
    
    always @* begin
        a_reg = A;
        b_reg = B;
        quotient = 0;
        remainder = 0;

        for (integer i = 15; i >= 0; i = i - 1) begin
            remainder = (remainder << 1) | (a_reg[i] ? 1 : 0); // Shift the remainder and add the next bit from dividend
            if (remainder >= b_reg) begin
                remainder = remainder - b_reg; // Subtract the divisor from the remainder
                quotient[i] = 1; // Set the quotient bit
            end else begin
                quotient[i] = 0; // Clear the quotient bit
            end
        end
    end

    assign result = quotient;
    assign odd = remainder;

endmodule
```