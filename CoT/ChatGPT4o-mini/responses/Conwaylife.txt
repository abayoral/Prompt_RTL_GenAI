```
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
); 

    reg [255:0] next_q;

    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else begin
            q <= next_q;
        end
    end

    integer i, j, count;
    always @* begin
        next_q = q; // Default to current state
        for (i = 0; i < 16; i = i + 1) begin
            for (j = 0; j < 16; j = j + 1) begin
                count = 0;

                // Check all 8 neighbours (using toroidal indexing)
                for (integer di = -1; di <= 1; di = di + 1) begin
                    for (integer dj = -1; dj <= 1; dj = dj + 1) begin
                        if (di == 0 && dj == 0) continue; // Skip self

                        // Toroidal indexing
                        integer ni = (i + di + 16) % 16;
                        integer nj = (j + dj + 16) % 16;

                        // Count alive neighbours
                        count = count + q[ni * 16 + nj];
                    end
                end

                // Update next_q based on Game of Life rules
                case (count)
                    2: next_q[i * 16 + j] = q[i * 16 + j]; // Stay the same
                    3: next_q[i * 16 + j] = 1; // Become alive
                    default: next_q[i * 16 + j] = 0; // Become dead
                endcase
            end
        end
    end

endmodule
```