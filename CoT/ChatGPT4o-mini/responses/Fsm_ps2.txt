```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg done
);

    typedef enum logic [1:0] {
        IDLE   = 2'b00,
        BYTE1  = 2'b01,
        BYTE2  = 2'b10,
        BYTE3  = 2'b11
    } state_t;

    state_t current_state, next_state;

    // State transition logic (combinational)
    always_comb begin
        next_state = current_state;
        done = 0;

        case (current_state)
            IDLE: begin
                if (in[3] == 1'b1) begin
                    next_state = BYTE1;
                end
            end

            BYTE1: begin
                next_state = BYTE2;
            end

            BYTE2: begin
                next_state = BYTE3;
            end

            BYTE3: begin
                done = 1;
                next_state = IDLE;
            end
        endcase
    end

    // State flip-flops (sequential)
    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
        end
        else begin
            current_state <= next_state;
        end
    end

    // Output logic
    // done is already defined in the state transition logic

endmodule
```