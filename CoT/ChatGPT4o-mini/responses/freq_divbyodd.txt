```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5 // Default to division by 5
)(
    input wire clk,
    input wire rst_n,
    output reg clk_div
);
    
    reg [31:0] cnt1;
    reg [31:0] cnt2;
    reg clk_div1;
    reg clk_div2;

    // Counter logic for clk_div1 (positive edge)
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 0;
        end else if (cnt1 == (NUM_DIV/2 - 1)) begin
            clk_div1 <= ~clk_div1; // Toggle on reaching the half value
            cnt1 <= 0; // Reset counter
        end else begin
            cnt1 <= cnt1 + 1; // Increment counter
        end
    end

    // Counter logic for clk_div2 (negative edge)
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 0;
        end else if (cnt2 == (NUM_DIV/2 - 1)) begin
            clk_div2 <= ~clk_div2; // Toggle on reaching the half value
            cnt2 <= 0; // Reset counter
        end else begin
            cnt2 <= cnt2 + 1; // Increment counter
        end
    end

    // Output clock generation
    always @(*) begin
        clk_div = clk_div1 | clk_div2; // OR operation of both auxiliary clocks
    end

endmodule
```