```verilog
module parity (
    input clk,
    input reset,
    input in,
    output reg odd
);

    always @(posedge clk)
        if (reset) odd <= 0;
        else if (in) odd <= ~odd;

endmodule

module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    reg [3:0] state;
    reg [3:0] next_state;
    reg [2:0] bit_count;
    wire odd_parity_check;

    parity p(.clk(clk), .reset(reset || (state == 0)), .in(in), .odd(odd_parity_check));

    parameter IDLE = 4'b0000, START = 4'b0001, DATA = 4'b0010, PARITY = 4'b0011, STOP = 4'b0100;

    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            out_byte <= 8'b0;
            done <= 0;
            bit_count <= 0;
        end else begin
            state <= next_state;
        end
    end

    always @(*) begin
        next_state = state;
        case (state)
            IDLE: begin
                done = 0;
                if (~in) begin
                    next_state = START;
                    bit_count = 0;
                end
            end
            START: begin
                next_state = DATA;
            end
            DATA: begin
                if (bit_count < 8) begin
                    out_byte[bit_count] = in;
                    bit_count = bit_count + 1;
                end else begin
                    next_state = PARITY;
                end
            end
            PARITY: begin
                if (odd_parity_check) begin
                    next_state = STOP;
                end else begin
                    next_state = IDLE; // Incorrect parity, return to IDLE
                end
            end
            STOP: begin
                if (in) begin
                    done = 1; // Valid reception and parity
                    next_state = IDLE;
                end else begin
                    next_state = STOP; // Wait for stop bit
                end
            end
            default: next_state = IDLE;
        endcase
    end

endmodule
```