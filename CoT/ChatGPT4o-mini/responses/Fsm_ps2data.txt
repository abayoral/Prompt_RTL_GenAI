```verilog
module top_module(
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    typedef enum logic [1:0] {
        IDLE,
        READ_BYTE1,
        READ_BYTE2,
        READ_BYTE3
    } state_t;

    state_t current_state, next_state;
    reg [1:0] byte_count;

    always_ff @(posedge clk or posedge reset) begin
        if (reset) begin
            current_state <= IDLE;
            byte_count <= 0;
            out_bytes <= 24'b0;
            done <= 1'b0;
        end else begin
            current_state <= next_state;
        end
    end

    always_ff @(posedge clk) begin
        case (current_state)
            IDLE: begin
                if (in[3] == 1'b1) begin
                    out_bytes[23:16] <= in; // Capture the first byte
                    byte_count <= 1;
                    done <= 1'b0;
                end
            end
            READ_BYTE1: begin
                out_bytes[15:8] <= in; // Capture the second byte
                byte_count <= 2;
                next_state <= READ_BYTE2;
            end
            READ_BYTE2: begin
                out_bytes[7:0] <= in; // Capture the third byte
                byte_count <= 3;
                done <= 1'b1; // Signal receipt of a complete message
                next_state <= IDLE;
            end
        endcase
    end

    always_comb begin
        case (current_state)
            IDLE: begin
                if (in[3] == 1'b1) begin
                    next_state = READ_BYTE1;
                end else begin
                    next_state = IDLE;
                end
            end
            READ_BYTE1: next_state = READ_BYTE2;
            READ_BYTE2: next_state = IDLE; // After reading the third byte, go to IDLE
            default: next_state = IDLE;
        endcase
    end

endmodule
```