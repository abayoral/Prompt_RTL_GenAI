To implement the `calendar` module that functions as a perpetual time-keeping system, I'll follow a structured approach with three always blocks, one each for seconds, minutes, and hours, ensuring that the reset condition is managed. Here's how the module will be structured with the given specifications:

### Chain of Thought:

1. **Understand the Requirements:**
   - The module tracks seconds, minutes, and hours, incrementing automatically based on clock pulses.
   - Each counter has specific limits: `Secs` and `Mins` work from 0 to 59, and `Hours` from 0 to 23.
   - Counters reset to 0 upon reaching their maximum value and trigger the next counter increment.
   - An active-high reset (`RST`) sets all counters to 0 regardless of their current state.

2. **Determine the Inputs and Outputs:**
   - **Inputs:** `CLK` (clock signal), `RST` (reset signal)
   - **Outputs:** `Secs` (6-bit), `Mins` (6-bit), `Hours` (6-bit)

3. **Define Intermediate Signals:**
   - Intermediate signals are not needed as we use separate always blocks to manage each counter.

4. **Structuring the Module:**
   - Use three always blocks:
     - One for `Secs` to update and reset based on `CLK` and `RST`.
     - A second block for `Mins` that increments based on `Secs`.
     - A third block for `Hours`, incrementing when both `Mins` and `Secs` culminate a complete hour cycle.

5. **Writing the Verilog Code:**

```verilog
module calendar (
    input wire CLK,
    input wire RST,
    output reg [5:0] Secs,
    output reg [5:0] Mins,
    output reg [5:0] Hours
);

    // Always block for handling seconds
    always @(posedge CLK or posedge RST) begin
        if (RST)
            Secs <= 6'b000000;
        else if (Secs == 6'd59)
            Secs <= 6'b000000;
        else
            Secs <= Secs + 1;
    end

    // Always block for handling minutes
    always @(posedge CLK or posedge RST) begin
        if (RST)
            Mins <= 6'b000000;
        else if (Secs == 6'd59) begin
            if (Mins == 6'd59)
                Mins <= 6'b000000;
            else
                Mins <= Mins + 1;
        end
    end

    // Always block for handling hours
    always @(posedge CLK or posedge RST) begin
        if (RST)
            Hours <= 6'b000000;
        else if (Secs == 6'd59 && Mins == 6'd59) begin
            if (Hours == 6'd23)
                Hours <= 6'b000000;
            else
                Hours <= Hours + 1;
        end
    end

endmodule
```

### Explanation:

- **Seconds, Minutes, Hours Handling:**
  - Each always block is synchronized with the `CLK` and `RST` inputs, ensuring timely updates and instant resets.
  - Counters reset to zero when they reach their respective limits, cascading increments to higher time units.
  
- **Reset Functionality:**
  - The reset condition (`RST`) checked at the start of each block ensures immediate counter zeroing and continuous operation restart upon reset activation.

This module structure complies with the task requirements and ensures the time-keeping system operates perpetually, allowing it to reset and increment correctly across multiple time units.