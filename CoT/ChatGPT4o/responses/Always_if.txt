To develop a Verilog module for the specified 2-to-1 multiplexer with two different implementations (using assign statements and a procedural if statement), let's break down the requirements and then implement the module. 

**Chain of Thought:**

1. **Understand the Requirements:**
    - We need a 2-to-1 multiplexer where the selection is determined by two control signals, `sel_b1` and `sel_b2`.
    - If both `sel_b1` and `sel_b2` are true, the output should be `b`.
    - Otherwise, the output should be `a`.

2. **Determine the Inputs and Outputs:**
    - Inputs: `a`, `b`, `sel_b1`, `sel_b2`
    - Outputs: `out_assign`, `out_always`

3. **Implementation Approach:**
    - We need two implementations:
      - One using the assign statement.
      - Another using an always block with a procedural if statement.

4. **Structuring the Module:**
    - Use an assign statement for `out_assign` to perform the combinational logic.
    - Use an always block for `out_always` which reacts to any change in the relevant signals and includes if-else logic for the same functionality.

5. **Writing the Verilog Code:**

```verilog
module top_module(
    input a,
    input b,
    input sel_b1,
    input sel_b2,
    output wire out_assign,
    output reg out_always
);

    // First implementation using assign statement
    // Both sel_b1 and sel_b2 need to be true to select b
    assign out_assign = (sel_b1 && sel_b2) ? b : a;

    // Second implementation using procedural if statement
    always @(*) begin
        if (sel_b1 && sel_b2)
            out_always = b;
        else
            out_always = a;
    end

endmodule
```

**Explanation:**
- **Assigned Output (`out_assign`)**: The assign statement uses a conditional (ternary) operator to evaluate the condition `sel_b1 && sel_b2`. If true, it assigns `b` to `out_assign`; otherwise, it assigns `a`.
- **Procedural Output (`out_always`)**: This uses an always block that is sensitive to any changes in the inputs (indicated by the `@(*)` sensitivity list). Inside the always block, an if-else statement performs the same selection logic but in a procedural way, allowing simulation of what would happen at changes to relevant signals.