To design the specified 4-bit shift register, we'll follow these steps:

1. **Understand the Requirements**:  
   - The shift register has an asynchronous reset, which means it resets immediately when the `areset` signal is high, regardless of the clock.
   - The register should load new data synchronously when `load` is high. Loading takes precedence over shifting.
   - If enabled (`ena` is high), the register shifts right on each clock cycle.
   - The output `q` holds the register's contents.

2. **Determine the Inputs and Outputs**:
   - Inputs: `clk` (clock), `areset` (asynchronous reset), `load` (synchronous load), `ena` (enable), `data[3:0]` (data to load).
   - Output: `q[3:0]` (shift register contents).

3. **Define Intermediate Signals**:
   - Intermediate signals aren't necessary for this implementation.

4. **Structuring the Module**: 
   - Use an asynchronous reset in the always block.
   - Prioritize loading data when `load` is high.
   - If `load` is not active and `ena` is asserted, shift the contents right.
   - Maintain the value if neither load nor shift conditions are met.

5. **Writing the Verilog Code**:

```verilog
module top_module(
    input clk,
    input areset,  // async active-high reset to zero
    input load,
    input ena,
    input [3:0] data,
    output reg [3:0] q
);

    always @(posedge clk or posedge areset) begin
        if (areset) begin
            q <= 4'b0000;  // Asynchronous reset
        end else if (load) begin
            q <= data;     // Synchronous load
        end else if (ena) begin
            q <= {1'b0, q[3:1]};  // Right shift with zero fill on MSB
        end
    end

endmodule
```

This solution handles an asynchronous reset, synchronous load priority, and a shift right operation when enabled, fulfilling all specified requirements for the shift register.