To create a 4-digit BCD ripple-carry adder, we need to instantiate the `bcd_fadd` module four times, each time adding one BCD digit from the input vectors `a` and `b`, along with a carry input. The carry output from each BCD adder will feed into the next BCD adder in the chain, forming a ripple-carry structure. The final carry-out from the last stage will be the overall carry-out of the entire operation.

Here's how we will structure the module:

1. Instantiate `bcd_fadd` four times, once for each BCD digit.
2. Connect the lower 4 bits of `a` and `b` to the first `bcd_fadd`, and so on, cascading the carry-out of one stage to the carry-in of the next.
3. Collect the sum outputs from each stage into the final 16-bit `sum` output.
4. The carry-out from the last stage will be the overall `cout`.

Let's write the Verilog code:

```verilog
module top_module (
    input [15:0] a, b,
    input cin,
    output cout,
    output [15:0] sum
);

    wire c1, c2, c3;  // Intermediate carry outputs

    // First digit
    bcd_fadd adder0 (
        .a(a[3:0]),
        .b(b[3:0]),
        .cin(cin),
        .cout(c1),
        .sum(sum[3:0])
    );

    // Second digit
    bcd_fadd adder1 (
        .a(a[7:4]),
        .b(b[7:4]),
        .cin(c1),
        .cout(c2),
        .sum(sum[7:4])
    );

    // Third digit
    bcd_fadd adder2 (
        .a(a[11:8]),
        .b(b[11:8]),
        .cin(c2),
        .cout(c3),
        .sum(sum[11:8])
    );

    // Fourth digit
    bcd_fadd adder3 (
        .a(a[15:12]),
        .b(b[15:12]),
        .cin(c3),
        .cout(cout),
        .sum(sum[15:12])
    );

endmodule
```

In this module, each `bcd_fadd` is responsible for adding the corresponding BCD digits of `a` and `b`, along with the carry-in, and outputs the sum and carry-out for that digit. The `cout` of the last `bcd_fadd` (adder3) will be used as the final `cout` for the 4-digit BCD addition. This structure efficiently implements a ripple-carry BCD adder using the provided `bcd_fadd` blocks.