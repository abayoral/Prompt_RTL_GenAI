To build a decade counter, we must consider its primary function: counting from 0 to 9 and then wrapping back to 0. The counter also needs to reset synchronously when the reset signal is active. Let's break down the requirements and create a Verilog module step-by-step.

Chain of Thought:

1. **Understand the Requirements:**
    - The counter needs an output `q` which should be 4 bits wide, as it counts from 0 to 9.
    - It should increment on every rising edge of the clock.
    - When `q` reaches 9, the next increment should wrap it back to 0.
    - The counter should reset to 0 when the synchronous reset signal is active.

2. **Determine the Inputs and Outputs:**
    - Inputs: `clk`, `reset`
    - Output: `q[3:0]`

3. **Define Intermediate Signals:**
    - There are no additional intermediate signals needed for this simple counter.

4. **Structuring the Module:**
    - Start with the module declaration and declare the inputs and outputs.
    - Use an `always` block triggered by the rising edge of the clock.
    - Inside the `always` block, check if the reset is high. If true, set `q` to 0.
    - If the reset is not active, increment `q`. Wrap `q` back to 0 when it reaches 10 (the next cycle after 9).

5. **Writing the Verilog Code:**

```verilog
module top_module (
    input clk,
    input reset,        // Synchronous active-high reset
    output reg [3:0] q
);

    // Counter logic: Reset q when reset is high, otherwise increment q and wrap after reaching 9
    always @(posedge clk) begin
        if (reset) 
            q <= 4'b0000;
        else if (q == 4'b1001)  // when q is 9 in binary
            q <= 4'b0000;       // wrap back to 0
        else
            q <= q + 1;         // increment q
    end

endmodule
```

This code fulfills the requirement for a decade counter by making use of a synchronous reset and an explicit condition to wrap the counter value back to 0 after reaching 9.