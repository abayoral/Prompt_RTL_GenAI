To implement the frequency divider with the specified characteristics, we will create a Verilog module named `freq_div` with the described inputs and outputs. The solution involves using counters to divide the input clock and generate the desired lower frequency outputs. Here's how we can achieve this:

1. **CLK_50 Generation**: We'll toggle `CLK_50` on every positive edge transition of the input clock signal, effectively dividing the frequency by 2. This requires a simple flip-flop which is toggled on each rising edge of `CLK_in`.

2. **CLK_10 Generation**: We'll use a counter (`cnt_10`) to count the cycles of the 100MHz input clock. When the count reaches 4, which corresponds to 5 input clock periods totaling 50ns, we toggle `CLK_10` and reset the counter.

3. **CLK_1 Generation**: For the 1MHz clock, we use a second counter (`cnt_100`) that counts up to 49, toggling `CLK_1` every 50 counts. This corresponds to 50 input clock periods totaling 500ns.

The module will also handle the reset signal (`RST`), resetting the outputs and the counters when activated. The following Verilog code implements this logic:

```verilog
module freq_div (
    input wire CLK_in,    // 100MHz input clock
    input wire RST,       // Reset signal
    output reg CLK_50,    // 50MHz output clock
    output reg CLK_10,    // 10MHz output clock
    output reg CLK_1      // 1MHz output clock
);

    // Counter declaration for CLK_10 generation
    reg [2:0] cnt_10;
    // Counter declaration for CLK_1 generation
    reg [5:0] cnt_100;

    always @(posedge CLK_in or posedge RST) begin
        if (RST) begin
            // Reset all outputs and counters
            CLK_50 <= 0;
            CLK_10 <= 0;
            CLK_1 <= 0;
            cnt_10 <= 0;
            cnt_100 <= 0;
        end else begin
            // Generate CLK_50 by toggling every clock cycle
            CLK_50 <= ~CLK_50;

            // Generate CLK_10 by counting to 4
            if (cnt_10 == 4) begin
                CLK_10 <= ~CLK_10;
                cnt_10 <= 0;
            end else begin
                cnt_10 <= cnt_10 + 1;
            end

            // Generate CLK_1 by counting to 49
            if (cnt_100 == 49) begin
                CLK_1 <= ~CLK_1;
                cnt_100 <= 0;
            end else begin
                cnt_100 <= cnt_100 + 1;
            end
        end
    end
endmodule
```

### Explanation:
- **CLK_50** toggles every positive edge of `CLK_in`, producing a 50MHz signal.
- **CLK_10** uses a 3-bit counter that counts from 0 to 4. Upon reaching 4, `CLK_10` toggles, effectively dividing the input frequency by 10.
- **CLK_1** uses a 6-bit counter that counts from 0 to 49. Upon reaching 49, `CLK_1` toggles, dividing the input frequency by 100.
- The `RST` signal resets all outputs and counters to their initial states, ensuring that all outputs are synchronized and properly initialized.