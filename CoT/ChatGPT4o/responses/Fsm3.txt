To implement a Moore state machine as described, we need to specify the states, handle state transitions based on the input and current state, and also implement the output logic. Additionally, we incorporate an asynchronous reset to reset the FSM to state A. Let's go through the steps for this implementation:

### Chain of Thought:

1. **Identify States and Encoding:**
   - We have four states: A, B, C, D.
   - Encode states using two bits:
     - A = 2'b00
     - B = 2'b01
     - C = 2'b10
     - D = 2'b11

2. **State Transition Logic:**
   - Define transitions based on the state table:
     - From A: stays in A on in=0, moves to B on in=1
     - From B: moves to C on in=0, stays in B on in=1
     - From C: moves to A on in=0, moves to D on in=1
     - From D: moves to C on in=0, moves to B on in=1

3. **Output Logic:**
   - Output is determined solely by the current state:
     - Output is 0 for states A, B, and C
     - Output is 1 for state D

4. **Asynchronous Reset:**
   - The reset must set the state to A, irrespective of the current state or input.

5. **Structuring the Module:**
   - Define state registers for current and next states.
   - Use an always block triggered on the rising edge of the clock or when the asynchronous reset is asserted.
   - Handle transitions and output generation within this block.

### Verilog Implementation:

```verilog
module top_module(
    input clk,
    input in,
    input areset,
    output reg out
);

    // State encoding
    typedef enum reg [1:0] {
        A = 2'b00,
        B = 2'b01,
        C = 2'b10,
        D = 2'b11
    } state_t;
    
    state_t current_state, next_state;

    // State transition and output logic
    always @(*) begin
        case (current_state)
            A: begin
                next_state = in ? B : A;
                out = 0;
            end
            B: begin
                next_state = in ? B : C;
                out = 0;
            end
            C: begin
                next_state = in ? D : A;
                out = 0;
            end
            D: begin
                next_state = in ? B : C;
                out = 1;
            end
            default: begin
                next_state = A;
                out = 0;
            end
        endcase
    end

    // State flip-flop with asynchronous reset
    always @(posedge clk or posedge areset) begin
        if (areset)
            current_state <= A;
        else
            current_state <= next_state;
    end

endmodule
```

This code implements the described Moore state machine with the specified state transitions and output logic, including the asynchronous reset mechanism to handle the reset condition properly.