To solve this task, we need to implement a frequency divider for an odd-number clock division using Verilog. The key challenge is to implement a mechanism that effectively deals with odd division factors, ensuring both rising and falling edges are evenly contributed to the resulting clock signal. Let’s use a parameter to set the division factor, defaulting to 5. Here’s how we can structure and implement the module:

### Chain of Thought

1. **Understand the Requirements:**
   - We need to take an input clock (`clk`) and divide its frequency by an odd number (`NUM_DIV`), defaulting to 5.
   - Use two counters (`cnt1` and `cnt2`) to handle the clock edges and generate partial clock signals (`clk_div1` and `clk_div2`).
   - The output clock (`clk_div`) is derived by a logical OR of `clk_div1` and `clk_div2`.

2. **Determine the Inputs and Outputs:**
   - Inputs: `clk`, `rst_n`
   - Output: `clk_div`

3. **Define Parameters and Intermediate Signals:**
   - Parameter: `NUM_DIV` to set the division factor.
   - Counters: `cnt1` and `cnt2` will count up to `NUM_DIV - 1`.
   - Intermediates: `clk_div1`, `clk_div2` for partial clock divisions.

4. **Structuring the Module:**
   - Create a parameter for `NUM_DIV` and ensure it defaults to 5.
   - Initialize counters (`cnt1`, `cnt2`) and toggle `clk_div1`, `clk_div2` at the appropriate counter values.
   - Use a logical OR to combine `clk_div1` and `clk_div2` for the final output.

5. **Writing the Verilog Code:**

```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5
)(
    input wire clk,
    input wire rst_n,
    output reg clk_div
);

    // Intermediate signals
    reg [31:0] cnt1;
    reg [31:0] cnt2;
    reg clk_div1;
    reg clk_div2;

    // Initialize counters and clk_div on reset
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 32'd0;
            clk_div1 <= 0;
        end else begin
            // Counter logic for clk_div1
            if (cnt1 == (NUM_DIV - 1)) begin
                cnt1 <= 32'd0; 
                clk_div1 <= ~clk_div1; // Toggle when cnt1 reaches NUM_DIV - 1
            end else begin
                cnt1 <= cnt1 + 1;
            end
        end
    end

    // Initialize counters and clk_div on reset
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 32'd0;
            clk_div2 <= 0;
        end else begin
            // Counter logic for clk_div2
            if (cnt2 == (NUM_DIV - 1)) begin
                cnt2 <= 32'd0; 
                clk_div2 <= ~clk_div2; // Toggle when cnt2 reaches NUM_DIV - 1
            end else begin
                cnt2 <= cnt2 + 1;
            end
        end
    end

    // Combine clk_div1 and clk_div2 for the final output
    always @(*) begin
        clk_div = clk_div1 | clk_div2;
    end

endmodule
```

### Explanation

- **Parameter and Counters:** The `NUM_DIV` parameter allows flexibility with different odd divisors. Counters `cnt1` and `cnt2` handle the phase separation for the rising and falling edges of the input clock.
- **Clock edge logic:** Based on hitting the count of `NUM_DIV - 1`, `clk_div1` and `clk_div2` are toggled at different clock edges (`posedge` and `negedge` respectively).
- **Output Logic:** `clk_div`, the output, is the logical OR of the two auxiliary divided clocks (`clk_div1` and `clk_div2`), achieving the odd division by effectively combining the edges.

This implementation efficiently divides the clock frequency by the specified odd factor, ensuring balanced output transitions.