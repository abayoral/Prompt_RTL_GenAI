Creating a Verilog module that implements single-precision floating-point multiplication according to the IEEE 754 standard involves a thorough process with several steps to ensure precision and compliance with format specifications. Here's how you can structure your Verilog code for the `float_multi` module:

```verilog
module float_multi (
    input wire clk,
    input wire rst,
    input wire [31:0] a,
    input wire [31:0] b,
    output reg [31:0] z
);

    reg [2:0] counter;
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [9:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [47:0] product_mantissa;
    reg guard_bit, round_bit, sticky;
    wire [23:0] mantissa_a_adjusted, mantissa_b_adjusted;
    wire [10:0] exp_result;
    wire rounding_needed;

    // Extract fields of input operands `a` and `b`
    assign a_sign = a[31];
    assign a_exponent = a[30:23] - 127;  // Bias adjustment
    assign a_mantissa = {1'b1, a[22:0]}; // Add the hidden bit

    assign b_sign = b[31];
    assign b_exponent = b[30:23] - 127;
    assign b_mantissa = {1'b1, b[22:0]};
    
    // Calculate the resulting sign
    assign z_sign = a_sign ^ b_sign;

    // Handle reset condition
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 0;
            z <= 0;
        end else begin
            case(counter)
                // Idle cycle or reset cycle
                3'd0: begin
                    counter <= 1;
                end

                // Multiplication computation begins
                3'd1: begin
                    // Calculate the product of mantissas (24 bit x 24 bit)
                    product_mantissa = a_mantissa * b_mantissa;
                    
                    // Calculate the preliminary exponent result
                    exp_result = a_exponent + b_exponent + 127;
                    
                    // Setup for normalization
                    {guard_bit, round_bit, sticky} = product_mantissa[22:0] != 0;

                    // Determine whether normalization is necessary
                    if (product_mantissa[47]) begin
                        z_mantissa = product_mantissa[46:24]; // Mantissa adjustment
                        z_exponent = exp_result + 1;          // Adjust exponent
                    end else begin
                        z_mantissa = product_mantissa[45:23]; // Mantissa
                        z_exponent = exp_result;             // Exponent
                    end

                    // Check if rounding is needed
                    rounding_needed = (round_bit && (guard_bit || sticky));

                    // Increment counter to proceed to the next step
                    counter <= 2;
                end

                // Final rounding and result construction
                3'd2: begin
                    // Rounding based on IEEE standards
                    if (rounding_needed) begin
                        z_mantissa = z_mantissa + 1'b1;
                        
                        // Handle case where mantissa overflow occurs
                        if (z_mantissa[23]) begin
                            z_exponent = z_exponent + 1;
                        end
                    end

                    // Construct the final result
                    if (z_exponent == 0 || z_exponent >= 255) begin
                        // Handle special cases like overflow and underflow
                        z <= (z_exponent == 0) ? 32'h00000000 : // Underflow (zero)
                             (z_sign ? 32'hFF800000 : 32'h7F800000); // Overflow (Inf)
                    end else begin
                        z <= {z_sign, z_exponent[7:0], z_mantissa[22:0]};
                    end

                    // Reset counter to process next operation
                    counter <= 0;
                end
            endcase
        end
    end
endmodule
```

### Explanation:

1. **Clock and Reset Handling**:
   - The module uses a clock (`clk`) to synchronize operations and a reset (`rst`) to initialize internal states.

2. **Input Decomposition**:
   - Extracts sign, exponent, and mantissa from inputs `a` and `b`. The IEEE 754 format dictates a 1-bit sign, 8-bit exponent (with a bias of 127), and a fraction (mantissa) with an implicit leading 1.

3. **Multiplication**:
   - Multiplies decomposed mantissas and computes a preliminary exponent result by adjusting the sum of input exponents with the bias.

4. **Normalization**:
   - Checks if the product requires normalization. If the highest bit of the product is not set, no normalization is needed.

5. **Rounding**:
   - Rounds the result according to guard, round, and sticky bitsâ€”critical for floating-point arithmetic.

6. **Assembly of Result**:
   - Constructs the IEEE 754 compliant result, handling potential overflows.

This module effectively performs floating-point multiplication while adhering to IEEE 754 standards, covering edge cases like zero, infinity, and potential overflows.