To design an FSM for identifying correctly received bytes in a serial communication scheme with 1 start bit, 8 data bits, and 1 stop bit, we'll follow these steps:

1. **Understand the Requirements**:
    - The FSM must detect a start bit (0).
    - After the start bit, it must read the next 8 bits as the data bits.
    - The FSM must then verify the stop bit (1).
    - If the stop bit is incorrect, the FSM must wait until it finds a stop bit before proceeding to identify the next byte.

2. **Determine Inputs and Outputs**:
    - Inputs: `clk`, `in`, `reset`
    - Output: `done` (indicates a byte has been successfully received)

3. **Define States**:
    - **IDLE**: Waiting for the start bit.
    - **START**: Detected the start bit, waiting for data bits.
    - **DATA**: Collecting the 8 data bits.
    - **STOP**: Verifying the stop bit.
    - **DONE**: Successfully received a byte.

4. **Define State Transitions**:
    - From IDLE to START on detecting a start bit.
    - From START to DATA to start collecting data bits.
    - From DATA to STOP after collecting 8 data bits.
    - From STOP to DONE if the stop bit is correct, otherwise back to IDLE.
    - From DONE to IDLE after indicating a successful byte reception.

5. **Implement the FSM in Verilog**:

```verilog
module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg done
);
    // States
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        STOP,
        DONE
    } state_t;
    
    state_t state, next_state;
    reg [3:0] bit_count; // To count the data bits

    // State transition logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (~in) // Start bit detected
                    next_state = START;
                else
                    next_state = IDLE;
            end
            START: next_state = DATA;
            DATA: begin
                if (bit_count == 4'd8)
                    next_state = STOP;
                else
                    next_state = DATA;
            end
            STOP: begin
                if (in) // Stop bit must be 1
                    next_state = DONE;
                else
                    next_state = IDLE; // Wait until a stop bit is detected
            end
            DONE: next_state = IDLE;
            default: next_state = IDLE;
        endcase
    end

    // Output and Data bit counting logic
    always @(posedge clk or posedge reset) begin
        if (reset) begin
            done <= 1'b0;
            bit_count <= 4'd0;
        end else begin
            done <= 1'b0;
            case (state)
                IDLE: bit_count <= 4'd0;
                START: bit_count <= 4'd0;
                DATA: bit_count <= bit_count + 1;
                STOP: ; // No change in bit_count
                DONE: done <= 1'b1; // Indicate a byte has been received
                default: ;
            endcase
        end
    end
endmodule
```

### Chain of Thought:
1. Define states needed for the FSM: IDLE, START, DATA, STOP, DONE.
2. Use synchronous reset for state transitions.
3. Use combinational logic to determine the next state based on the current state and inputs.
4. Use counters to track the number of data bits received.
5. Ensure done signal is set appropriately when a correct byte sequence is detected.

This Verilog module implements a FSM that correctly identifies and verifies received bytes in a serial stream of bits as per the specified requirements.