Let's go through the problem and determine how we can achieve this:

1. **Identify the Requirements**: 
   - The FSM should identify the start bit (0).
   - After detecting the start bit, it must read 9 bits (8 data bits + 1 parity bit).
   - Perform odd parity check on the 9 bits received.
   - Ensure a correct stop bit (1) at the end.
   - Assert the done signal only if the byte is correctly received and the parity check passes.

2. **Inputs and Outputs**:
   - Inputs: `clk`, `in`, `reset`
   - Outputs: `out_byte[7:0]`, `done`
   
3. **Intermediate Signals**:
   - Define a 9-bit shift register to store the received bits.
   - Define an FSM with states to handle start bit detection, data reception, parity check, and stop bit check.
   - Utilize the `parity` module to perform the parity check.

4. **FSM States**:
   - `IDLE`: Waiting for the start bit.
   - `START`: Start bit detected.
   - `DATA`: Receiving 9 bits of data + parity.
   - `STOP`: Checking the stop bit.
   - `DONE`: If the byte is correctly received and parity check passes.

5. **Implementation**:
   - Use the `parity` module to calculate the parity of the incoming bitstream.
   - Accumulate received bits in a shift register.
   - Transition through FSM states based on the inputs and conditions.
   
Here is the Verilog module for the described functionality:

```verilog
module top_module (
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
); 
    // FSM states
    typedef enum logic [2:0] {
        IDLE,
        START,
        DATA,
        PARITY,
        STOP,
        DONE
    } state_t;
    state_t state, next_state;

    // Using a shift register to store incoming bits
    reg [8:0] shift_reg;
    reg [3:0] bit_counter;
    wire odd_parity;

    // Parity module
    parity parity_module (
        .clk(clk),
        .reset(state == IDLE || state == DONE),
        .in(in),
        .odd(odd_parity)
    );

    // FSM transition logic
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
            shift_reg <= 9'b0;
            bit_counter <= 0;
            done <= 0;
        end else begin
            state <= next_state;
        end
    end

    always @(*) begin
        // Default next state and outputs
        next_state = state;
        done = 0;
        case(state)
            IDLE: begin
                if (in == 0) // Detect start bit
                    next_state = START;
            end
            START: begin
                next_state = DATA;
                bit_counter = 0;
            end
            DATA: begin
                if (bit_counter < 8) begin
                    next_state = DATA;
                end else begin
                    next_state = PARITY;
                end
            end
            PARITY: begin
                next_state = STOP;
            end
            STOP: begin
                if (in == 1) begin // Stop bit should be 1
                    if (odd_parity) begin
                        next_state = DONE;
                        done = 1;
                    end else begin
                        next_state = IDLE;
                    end 
                end else begin // Wait for correct stop bit
                    next_state = IDLE;
                end
            end
            DONE: begin
                out_byte = shift_reg[7:0];
                done = 1;
                next_state = IDLE;
            end
        endcase
    end

    // Shift register and bit counter
    always @(posedge clk) begin
        if (reset) begin
            shift_reg <= 9'b0;
            bit_counter <= 0;
        end else begin
            if (state == DATA) begin
                shift_reg <= {in, shift_reg[8:1]};
                bit_counter <= bit_counter + 1;
            end else if (state == PARITY) begin
                shift_reg[8] <= in; // Parity bit
            end
        end
    end

endmodule
```

### Explanation:

- **State Transition Logic**: Handles the FSM states and transitions.
- **Shift Register and Bit Counter**: Accumulates the incoming bits and counts them.
- **Parity Checking**: Utilizes the `parity` module to ensure odd parity.
- **Final Output**: Asserts the `done` signal if all conditions are met, and stores the received byte in `out_byte`.

This FSM and data path efficiently handle the serial receiving and parity checking required for the described system.