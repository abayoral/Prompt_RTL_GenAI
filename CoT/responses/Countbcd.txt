### Chain of Thought:

1. **Understand the Requirements**:
    - A 4-digit BCD counter has each decimal digit encoded using 4 bits.
    - The lowest 4 bits (`q[3:0]`) represent the ones digit.
    - The next 4 bits (`q[7:4]`) represent the tens digit.
    - The next 4 bits (`q[11:8]`) represent the hundreds digit.
    - The highest 4 bits (`q[15:12]`) represent the thousands digit.
    - `ena` signals indicate when each of the upper three digits should be incremented.
    - The counter increments on each clock cycle and resets on a synchronous active-high reset signal.

2. **Determine the Inputs and Outputs**:
    - Inputs: `clk`, `reset`
    - Outputs: `ena[3:1]`, `q[15:0]`

3. **Define Intermediate Signals**:
    - Each BCD digit requires a carry-enable signal to know when to increment the next higher digit.

4. **Structuring the Module**:
    - Divide the 16-bit `q` output into four 4-bit BCD counters.
    - Use intermediate signals to trigger when each digit should enable the next digit.
    - Use `always` blocks to handle the logic of each BCD counter, incrementing them and handling the enable signals.

5. **Writing the Verilog Code**:

```verilog
module top_module (
    input clk,
    input reset,         // Synchronous active-high reset
    output [3:1] ena,
    output reg [15:0] q
);
    // Intermediate enable signals for each BCD digit
    wire ena1, ena2, ena3;
    
    assign ena[1] = ena1;
    assign ena[2] = ena2;
    assign ena[3] = ena3;

    // Ones digit (q[3:0])
    always @(posedge clk) begin
        if (reset)
            q[3:0] <= 4'b0000;
        else if (q[3:0] == 4'd9)
            q[3:0] <= 4'b0000;
        else
            q[3:0] <= q[3:0] + 4'b0001;
    end

    // Tens digit (q[7:4])
    always @(posedge clk) begin
        if (reset)
            q[7:4] <= 4'b0000;
        else if (ena1 && q[7:4] == 4'd9)
            q[7:4] <= 4'b0000;
        else if (ena1)
            q[7:4] <= q[7:4] + 4'b0001;
    end

    // Hundreds digit (q[11:8])
    always @(posedge clk) begin
        if (reset)
            q[11:8] <= 4'b0000;
        else if (ena2 && q[11:8] == 4'd9)
            q[11:8] <= 4'b0000;
        else if (ena2)
            q[11:8] <= q[11:8] + 4'b0001;
    end

    // Thousands digit (q[15:12])
    always @(posedge clk) begin
        if (reset)
            q[15:12] <= 4'b0000;
        else if (ena3 && q[15:12] == 4'd9)
            q[15:12] <= 4'b0000;
        else if (ena3)
            q[15:12] <= q[15:12] + 4'b0001;
    end

    // Enable signals logic
    assign ena1 = (q[3:0] == 4'd9);
    assign ena2 = ena1 && (q[7:4] == 4'd9);
    assign ena3 = ena2 && (q[11:8] == 4'd9);

endmodule
```

### Explanation:
- Each digit of the 4-digit BCD counter is controlled separately using an `always` block and its respective intermediate enable signal.
- The lowest digit (`q[3:0]`) increments every clock cycle if not reset.
- Each higher digit increments if its corresponding lower digit is at 9 and a carry-enable signal is generated.
- The enable signals (`ena[3:1]`) are used to indicate when to carry over from one digit to the next.