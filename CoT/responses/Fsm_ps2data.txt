To develop the required module, we'll create a finite state machine (FSM) that identifies message boundaries and a datapath to capture the 24-bit message. Let's proceed step by step:

### Chain of Thought

1. **Understand the Requirements:**
   - We need an FSM to detect a 3-byte message from a PS/2 byte stream.
   - The first byte of a message has bit[3] set to 1.
   - We need to capture the 3-byte message and output it when the `done` signal is asserted.

2. **Determine the Inputs and Outputs:**
   - Inputs: `clk`, `reset`, `in[7:0]`
   - Outputs: `out_bytes[23:0]`, `done`

3. **Define FSM States:**
   - **IDLE:** Initial state, waiting for a byte with bit[3] = 1.
   - **BYTE1:** First byte detected, waiting for second byte.
   - **BYTE2:** Second byte received, waiting for third byte.
   - **DONE:** All three bytes are received, trigger `done`.

4. **Controlling Transitions:**
   - Move from `IDLE` to `BYTE1` on receiving a byte with bit[3] = 1.
   - Transition from `BYTE1` to `BYTE2` on receiving the next byte.
   - Transition from `BYTE2` to `DONE` on receiving the third byte.
   - Return to `IDLE` after `DONE`.

5. **Capture the Data:**
   - Use registers to store bytes as they are received.
   - Concatenate these to form `out_bytes`.

6. **Output Logic:**
   - Assert `done` and output `out_bytes` when in `DONE`.
   - Output logic for `done` is combinational.

### Verilog Code

```verilog
module top_module (
    input clk,
    input [7:0] in,
    input reset,  // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);

    // FSM State Encoding
    typedef enum logic [1:0] {
        IDLE  = 2'b00,
        BYTE1 = 2'b01,
        BYTE2 = 2'b10,
        DONE  = 2'b11
    } state_t;
  
    state_t state, next_state;

    // Registers to store each byte of the message
    reg [7:0] byte1, byte2, byte3;

    // FSM State Transition
    always @(posedge clk) begin
        if (reset) begin
            state <= IDLE;
        end else begin
            state <= next_state;
        end
    end

    // FSM Next State Logic and Byte Capture
    always @(*) begin
        // Default assignments
        next_state = state;
        done = 0;

        case (state)
            IDLE: begin
                if (in[3]) begin  // Look for bit[3] = 1
                    next_state = BYTE1;
                    byte1 = in;
                end
            end

            BYTE1: begin
                next_state = BYTE2;
                byte2 = in;
            end

            BYTE2: begin
                next_state = DONE;
                byte3 = in;
            end

            DONE: begin
                done = 1;
                out_bytes = {byte1, byte2, byte3};  // Concatenate the captured bytes
                next_state = IDLE;  // Prepare for next message
            end
        endcase
    end

    // Reset the bytes to avoid latching unintended values until the next valid reception
    always @(posedge clk) begin
        if (reset) begin
            byte1 <= 8'b0;
            byte2 <= 8'b0;
            byte3 <= 8'b0;
        end
    end
endmodule
```

### Explanation

- **State Machine Logic:** We use an always block to transition between states based on the current input and FSM state. The `DONE` state asserts `done` and captures the `out_bytes`.
- **Output Logic**: `out_bytes` is valid only when `done` is high, otherwise it doesn't hold any significant value.

This module effectively identifies and captures a three-byte message in a PS/2 byte stream, outputting the message when completed.