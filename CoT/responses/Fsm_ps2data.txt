Let's follow the Chain of Thought to design and implement the FSM and the datapath for capturing the PS/2 mouse message.

### Chain of Thought:

1. **Understand the Requirements:**
   - We need an FSM to detect the start of a 3-byte PS/2 mouse message based on the first byte having bit[3] = 1.
   - Once a message is detected, we need to store each byte in sequence for the 3-byte message.
   - Once all 3 bytes are received, we have to output the 24-bit message via `out_bytes` and assert the `done` signal.

2. **Determine the Inputs and Outputs:**
   - Inputs: 
     - `clk`: Clock signal.
     - `in[7:0]`: 8-bit input byte stream.
     - `reset`: Synchronous reset signal.
   - Outputs:
     - `out_bytes[23:0]`: 24-bit message output.
     - `done`: A signal asserting the completion of a 3-byte message.

3. **Define the States of the FSM:**
   - `IDLE`: Wait for the first byte with bit[3] = 1.
   - `BYTE1`: First byte is detected, store and wait for the second byte.
   - `BYTE2`: Second byte is received, store and wait for the third byte.
   - `DONE`: Third byte is received, capture the message, assert `done`, reset back to `IDLE`.

4. **Determine the Intermediate Signals:**
   - State register to hold the current state.
   - Registers to hold the 3 bytes of the message separately.

5. **Structuring the FSM and Datapath:**
   - Use an always block to implement the state transitions and byte capturing based on the FSM's state.
   - Use combinational logic to determine the output (`done` and `out_bytes`).

6. **Writing the Verilog Code:**

```verilog
module top_module (
    input clk,
    input [7:0] in,
    input reset,    // Synchronous reset
    output reg [23:0] out_bytes,
    output reg done
);
    // Define states
    typedef enum reg [1:0] {
        IDLE = 2'b00,
        BYTE1 = 2'b01,
        BYTE2 = 2'b10,
        DONE = 2'b11
    } state_t;

    state_t state, next_state;
    reg [7:0] byte1, byte2, byte3;

    // State transition logic
    always @(posedge clk) begin
        if (reset)
            state <= IDLE;
        else
            state <= next_state;
    end

    // Next state logic and output logic
    always @(*) begin
        done = 0;
        next_state = state;

        case (state)
            IDLE: begin
                if (in[3]) // Bit 3 of the first byte should be 1
                    next_state = BYTE1;
            end
            BYTE1: begin
                next_state = BYTE2;
            end
            BYTE2: begin
                next_state = DONE;
            end
            DONE: begin
                done = 1;
                next_state = IDLE; // Go back to IDLE after done
            end
        endcase
    end

    // Datapath logic to capture bytes
    always @(posedge clk) begin
        if (reset) begin
            byte1 <= 0;
            byte2 <= 0;
            byte3 <= 0;
        end
        else begin
            case (next_state)
                BYTE1: byte1 <= in;
                BYTE2: byte2 <= in;
                DONE: byte3 <= in;
            endcase
        end
    end

    // Output assignment
    always @(*) begin
        if (state == DONE) begin
            out_bytes = {byte1, byte2, byte3};
        end
        else begin
            out_bytes = 24'b0; // Don't-care output (can be optimized depending on use-case)
        end
    end

endmodule
```

This design ensures that the FSM transitions correctly between states based on the input byte stream and captures the three-byte message properly, asserting the `done` signal when the message is completely received.