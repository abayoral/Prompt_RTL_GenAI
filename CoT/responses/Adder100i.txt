Chain of Thought:

1. **Understand the Requirements**:
    - A 100-bit binary ripple-carry adder uses 100 full adders to add two 100-bit numbers (`a` and `b`) and an initial carry-in (`cin`).
    - Each full adder will produce a sum bit and a carry-out bit.
    - The carry-out of each full adder becomes the carry-in for the next full adder.
    - The final carry-out from the last full adder (`cout[99]`) is the carry-out usually seen in addition operations.
    - Additionally, output the carry-out from each full adder.

2. **Determine the Inputs and Outputs**:
    - Inputs: `a` (100 bits), `b` (100 bits), `cin` (1 bit)
    - Outputs: `cout` (100 bits), `sum` (100 bits)

3. **Define Intermediate Signals**:
    - Each full adderâ€™s carry-out will be an intermediate signal that serves as the carry-in for the next full adder.

4. **Structuring the Module**:
    - Implement a Full Adder module that takes two single-bit inputs (`a`, `b`), a carry-in (`cin`), and produces a single-bit sum (`sum`) and a carry-out (`cout`).
    - Use a generate block to instantiate 100 full adder instances. Connect the carry-out of each full adder to the carry-in of the next full adder.

5. **Writing the Full Adder Module**:

```verilog
module full_adder (
    input wire a,
    input wire b,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign {cout, sum} = a + b + cin;
endmodule
```

6. **Writing the Top-Level 100-bit Ripple-Carry Adder Module**:

```verilog
module top_module( 
    input [99:0] a,
    input [99:0] b,
    input cin,
    output [99:0] cout,
    output [99:0] sum
);
    wire [99:0] carry;
    
    // Instantiate the first full adder
    full_adder fa0(
        .a(a[0]),
        .b(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(carry[0])
    );
    
    // Generate block to instantiate the remaining 99 full adders
    genvar i;
    generate
        for (i = 1; i < 100; i = i + 1) begin : gen_fa
            full_adder fa(
                .a(a[i]),
                .b(b[i]),
                .cin(carry[i-1]),
                .sum(sum[i]),
                .cout(carry[i])
            );
        end
    endgenerate
    
    // Assign the carry signal to cout
    assign cout = carry;

endmodule
```

In this solution:
- We first defined a Full Adder module that performs the addition of two bits with a carry-in and produces a sum and carry-out.
- In the top-level module, we instantiated the first full adder outside the generate block and used a generate block to instantiate the remaining 99 full adders.
- The carry-out of each full adder is connected to the carry-in of the next full adder through the intermediate signal `carry`.
- Finally, we assigned the `carry` signal to the `cout` output to provide the carry-out from each full adder.