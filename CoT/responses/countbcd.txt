To design a 4-digit BCD counter, we first need to break the problem into manageable parts. Each of the 4 digits requires its own BCD counter. Additionally, we must generate enable signals for upper digits to ensure they increment at the right time. Let's summarize this process in a chain of thought and then implement the Verilog code:

### Chain of Thought:

1. **Understand the Requirements:**
   - We need a 4-digit BCD counter. Each digit is represented by 4 bits.
   - The enable signals for the tens, hundreds, and thousands digits need to be appropriately generated to ensure the correct chaining of the counters.

2. **Determine the Inputs and Outputs:**
   - Inputs: `clk`, `reset`
   - Outputs: `q[15:0]` for the BCD values, `ena[3:1]` for the enable signals of the upper digits.

3. **Define Intermediate Signals and Logic:**
   - Each digit counter will have its BCD logic.
   - Enable the next digit counter when the current digit counter rolls over from 9 to 0.

4. **Structuring the Module:**
   - Use a top module to instantiate four single-digit BCD counters.
   - Generate the enable signals.
   - Pass the enable signals to control the chaining of digit counters.

5. **Write the Core Logic:**
   - Each digit is a BCD counter that resets to 0 after 9 and enables the next significant digit.
   - Implement logic to determine when a digit rolls over.

### Verilog Code:

```verilog
module bcd_digit (
    input wire clk,
    input wire reset,
    input wire ena,
    output reg [3:0] q
);
    always @(posedge clk) begin
        if (reset) begin
            q <= 4'b0000;
        end else if (ena) begin
            if (q == 4'b1001) // if 9 increment to 0
                q <= 4'b0000;
            else
                q <= q + 1;
        end
    end
endmodule

module top_module (
    input wire clk,
    input wire reset,   // Synchronous active-high reset
    output wire [3:1] ena,
    output wire [15:0] q
);
    // Internal enable signals for chaining the counters
    wire ena1, ena2, ena3;

    // Least significant digit, always enabled
    bcd_digit digit0 (
        .clk(clk),
        .reset(reset),
        .ena(1'b1),
        .q(q[3:0])
    );

    // Generate enable signals based on digit roll over
    assign ena1 = (q[3:0] == 4'b1001);
    assign ena2 = ena1 && (q[7:4] == 4'b1001);
    assign ena3 = ena2 && (q[11:8] == 4'b1001);

    // Latching enable signals for output
    assign ena[1] = ena1;
    assign ena[2] = ena2;
    assign ena[3] = ena3;

    // Second digit, enabled by first
    bcd_digit digit1 (
        .clk(clk),
        .reset(reset),
        .ena(ena1),
        .q(q[7:4])
    );

    // Third digit, enabled by second
    bcd_digit digit2 (
        .clk(clk),
        .reset(reset),
        .ena(ena2),
        .q(q[11:8])
    );

    // Most significant digit, enabled by third
    bcd_digit digit3 (
        .clk(clk),
        .reset(reset),
        .ena(ena3),
        .q(q[15:12])
    );
endmodule
```

### Explanation:
- Each digit has a module `bcd_digit` that independently handles counting from 0 to 9.
- Enable signals (`ena1`, `ena2`, `ena3`) ensure that the next digit only increments when the current digit rolls over from 9 to 0.
- The largest digit (thousands) only changes when all lower digits have rolled over.