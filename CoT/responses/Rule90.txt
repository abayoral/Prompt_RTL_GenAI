### Chain of Thought:

    1. **Understand the Requirements:**
        - We need to create a 512-cell automaton based on Rule 90.
        - Each cell's next state depends on the XOR of its two current neighbors.
        - The system updates on each clock cycle.
        - The `load` input is used to load initial data into the cells.
        - Boundary conditions assume cells outside the range are zero (off).

    2. **Determine the Inputs and Outputs:**
        - Inputs: `clk`, `load`, `data[511:0]`
        - Output: `q[511:0]`

    3. **Define Intermediate Signals:**
        - A temporary register to hold the next state of the cells.

    4. **Structuring the Module:**
        - Start with the module declaration.
        - Create an always block to update the cells on each rising edge of the clock.
        - If `load` is high, load the data into the cell array `q`.
        - If `load` is low, calculate the next state for each cell based on Rule 90.
        - Use a loop to iterate over each cell and apply the Rule 90 logic.

    5. **Boundary Conditions:**
        - Handle the first and last cell separately since they have only one neighbor.

    6. **Writing the Verilog Code:**

```verilog
module top_module(
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q
); 

    integer i;

    always @(posedge clk) begin
        if (load) begin
            // Load the input data into q
            q <= data;
        end else begin
            // Temporary array to store the next state
            reg [511:0] next_q;

            // Apply Rule 90
            for (i = 1; i < 511; i = i + 1) begin
                next_q[i] = q[i-1] ^ q[i+1];
            end

            // Handle boundary cells
            next_q[0] = q[1];  // Left boundary (q[-1] is 0)
            next_q[511] = q[510];  // Right boundary (q[512] is 0)

            // Update q with the next state
            q <= next_q;
        end
    end

endmodule
```

### Explanation:

- **Inputs and Outputs:**
    - `clk`: Clock input for time-stepping.
    - `load`: Control signal to load initial data.
    - `data[511:0]`: Initial state of the 512 cells.
    - `q[511:0]`: Current state of the 512 cells (output).

- **Always Block:**
    - On each rising edge of `clk`, if `load` is high, `q` is loaded with `data`.
    - If `load` is low, we calculate the next state `next_q` based on Rule 90:
        - For each cell (except boundaries), the next state is the XOR of its two neighbors.
        - For the boundary cells (`q[0]` and `q[511]`), handle them separately since their boundaries are `0`.

- The main loop handles the transition from the current state `q` to the next state `next_q` by applying Rule 90 logic.

This design ensures that the 512-cell system behaves according to Rule 90 and updates correctly on each clock cycle, respecting the specified boundary conditions.