To generate the requested module with eight D flip-flops, we will create individual D flip-flops and instantiate them within the top module. Each flip-flop will capture one bit from the input `d` on the rising edge of `clk` and output it to `q`.

### Chain of Thought:

1. **Understand the Requirements:**
    - We need to create eight D flip-flops that share the same clock signal (`clk`).
    - Each D flip-flop captures a bit from the 8-bit input `d` and outputs it to the corresponding bit of the 8-bit output `q`.

2. **Determine the Inputs and Outputs:**
    - Inputs: `clk` (for clock), `d` (8-bit input data)
    - Outputs: `q` (8-bit output data)

3. **Structuring the Module:**
    - We'll define a single D flip-flop module.
    - Then we'll instantiate eight instances of this D flip-flop within the `top_module`.

4. **D Flip-Flop Module:**
    - A D flip-flop captures the value of the data input (`D`) on the rising edge of the clock (`clk`) and holds this value at the output (`Q`).

5. **Top Module:**
    - Instantiate eight D flip-flops, connecting the common clock (`clk`) and individual bits of `d` to each flip-flop.

### Writing the Verilog Code:

```verilog
// D Flip-Flop module
module d_flipflop (
    input wire clk,
    input wire D,
    output reg Q
);
    always @(posedge clk) begin
        Q <= D;
    end
endmodule

// Top module with eight D flip-flops
module top_module (
    input clk,
    input [7:0] d,
    output [7:0] q
);
    // Instantiate eight D flip-flops
    d_flipflop dff0 (.clk(clk), .D(d[0]), .Q(q[0]));
    d_flipflop dff1 (.clk(clk), .D(d[1]), .Q(q[1]));
    d_flipflop dff2 (.clk(clk), .D(d[2]), .Q(q[2]));
    d_flipflop dff3 (.clk(clk), .D(d[3]), .Q(q[3]));
    d_flipflop dff4 (.clk(clk), .D(d[4]), .Q(q[4]));
    d_flipflop dff5 (.clk(clk), .D(d[5]), .Q(q[5]));
    d_flipflop dff6 (.clk(clk), .D(d[6]), .Q(q[6]));
    d_flipflop dff7 (.clk(clk), .D(d[7]), .Q(q[7]));
    
endmodule
```

### Explanation:

- **D Flip-Flop Module (`d_flipflop`):**
  - The `d_flipflop` module is defined to capture the input `D` at the positive edge of `clk` and store it in `Q`.

- **Top Module (`top_module`):**
  - The `top_module` defines the 8-bit input `d` and output `q`, and the clock input `clk`.
  - It instantiates eight `d_flipflop` modules, each connected to one bit of the `d` array and producing the corresponding bit in the `q` array.

With this structure, the eight D flip-flops in the `top_module` will each capture a bit of the input `d` on the rising edge of `clk` and output it to the corresponding bit in `q`.