### Chain of Thought:

1. **Understand the Requirements:**
    - We need to build a 64-bit shift register with synchronous load functionality.
    - The register should be able to shift either left or right by 1 bit or 8 bits.
    - For right shifts, it should perform an arithmetic shift (preserving the sign bit).

2. **Determine the Inputs and Outputs:**
    - Inputs:
      - `clk`: Clock signal.
      - `load`: Load signal.
      - `ena`: Enable signal for shifting.
      - `amount`: 2-bit value specifying the shift direction and amount.
      - `data`: 64-bit data input for loading the register.
    - Output:
      - `q`: 64-bit output representing the contents of the shift register.

3. **Define Intermediate Signals:**
    - No intermediate signals are necessary as the logic can be directly implemented in the always block.

4. **Structuring the Module:**
    - Begin with the module declaration and specify the inputs and outputs.
    - Use an always block triggered by the rising edge of the clock to implement the synchronous operations.
    - Inside the always block, check the `load` signal first to load the register with `data` if `load` is high.
    - If `load` is low and `ena` is high, perform the shifts based on the value of `amount`:
        - `2'b00`: Shift left by 1 bit.
        - `2'b01`: Shift left by 8 bits.
        - `2'b10`: Perform an arithmetic right shift by 1 bit.
        - `2'b11`: Perform an arithmetic right shift by 8 bits.

5. **Writing the Verilog Code:**

```verilog
module top_module(
    input clk,
    input load,
    input ena,
    input [1:0] amount,
    input [63:0] data,
    output reg [63:0] q
); 

    always @(posedge clk) begin
        if (load) begin
            q <= data; // Load the register with data
        end else if (ena) begin
            case (amount)
                2'b00: q <= q << 1; // Shift left by 1 bit
                2'b01: q <= q << 8; // Shift left by 8 bits
                2'b10: q <= {q[63], q[63:1]}; // Arithmetic right shift by 1 bit
                2'b11: q <= {{8{q[63]}}, q[63:8]}; // Arithmetic right shift by 8 bits
                default: q <= q; // Default case to maintain q if amount is not 00, 01, 10, or 11
            endcase
        end
    end

endmodule
```

### Explanation:
- The `always` block ensures that operations are performed on the rising edge of the clock.
- If `load` is high, the register `q` is loaded with the input `data`.
- If `load` is low and `ena` is high, shifting is performed based on the value of `amount`.
- The `case` statement handles the different shift operations:
    - `2'b00`: Shifts `q` left by 1 bit using `q << 1`.
    - `2'b01`: Shifts `q` left by 8 bits using `q << 8`.
    - `2'b10`: Performs an arithmetic right shift by 1 bit by shifting `q` right and filling the MSB with `q[63]`.
    - `2'b11`: Performs an arithmetic right shift by 8 bits by shifting `q` right and filling the 8 MSBs with `q[63]`.
