To accomplish this task, let's first examine the structure of a single full-adder. A full-adder takes two inputs (A, B) and a carry-in (cin) and produces a sum and a carry-out. Here is the Verilog code for the full-adder module:

```verilog
module full_adder (
    input wire A,
    input wire B,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign {cout, sum} = A + B + cin;
endmodule
```

Now, in the top module, we will instantiate three full-adders to create a 3-bit ripple-carry adder. We will pass the carry-out of each full-adder to the carry-in of the next full-adder. Finally, we will output the sum and carry-out from each stage.

Chain of Thought:
1. The top module should declare inputs and outputs as specified.
2. Instantiate three full-adders within the top module.
3. Connect the inputs `a`, `b`, and `cin` to the first full-adder.
4. Cascade the carry-out (`cout`) from each full-adder to the carry-in (`cin`) of the next full-adder.
5. Capture the final carry-outs from each full-adder and the sum outputs.

Writing the Verilog Code:
```verilog
module top_module( 
    input [2:0] a, 
    input [2:0] b,
    input cin,
    output [2:0] cout,
    output [2:0] sum 
);

    wire [2:0] carry;
    
    // Instantiate the three full adders
    full_adder fa0 (
        .A(a[0]),
        .B(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(carry[0])
    );

    full_adder fa1 (
        .A(a[1]),
        .B(b[1]),
        .cin(carry[0]),
        .sum(sum[1]),
        .cout(carry[1])
    );

    full_adder fa2 (
        .A(a[2]),
        .B(b[2]),
        .cin(carry[1]),
        .sum(sum[2]),
        .cout(cout[2])
    );

    // The carry-outs from each full-adder
    assign cout[0] = carry[0];
    assign cout[1] = carry[1];
    
endmodule

module full_adder (
    input wire A,
    input wire B,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign {cout, sum} = A + B + cin;
endmodule
```

This way, you successfully create a 3-bit binary ripple-carry adder by instantiating three full-adders and cascading their carry-outs to the next stages. The `top_module` implements the 3-bit addition while handling the carry propagation.