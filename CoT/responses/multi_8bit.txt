To implement an 8-bit multiplier using the shift-and-add technique in Verilog, we'll follow a chain of thought to ensure the design meets the specifications and efficiently utilizes digital arithmetic operations.

### Chain of Thought:

1. **Understand the Requirements**:
    - Implement an 8-bit multiplier using the shift-and-add method.
    - Inputs are two 8-bit operands, `A` (multiplicand) and `B` (multiplier).
    - The output is a 16-bit product that accumulates the result of the multiplication.

2. **Determine the Inputs and Outputs**:
    - Inputs: `A [7:0]`, `B [7:0]`
    - Output: `product [15:0]`

3. **Define Intermediate Signals**:
    - A temporary register `temp_product` (16 bits) to hold partial products and the final result.
    - A signal for keeping track of shifting operations.

4. **Structuring the Module**:
    - Using a sequential logic block (always block), iterate through each bit of `B`.
    - Check each bit of `B`. If the bit is 1, add the appropriately shifted `A` to the `temp_product`.
    - Shift the multiplicand `A` left for each successive bit position, simulating binary multiplication alignment.
    - Update the `product` with the final value of `temp_product`.

5. **Writing the Verilog Code**:
   - Implement the logic within an always block to allow for the iterative processing of each bit.

Here's the Verilog code implementing this functionality:

```verilog
module multi_8bit (
    input wire [7:0] A,
    input wire [7:0] B,
    output reg [15:0] product
);
    // Temporary register for the accumulating product
    reg [15:0] temp_product;
    integer i; // Loop index for bitwise iteration

    always @(*) begin
        temp_product = 16'b0; // Initialize the temporary product to zero
        
        // Iterate over each bit of B
        for (i = 0; i < 8; i = i + 1) begin
            // Check if the ith bit of B is set
            if (B[i] == 1'b1) begin
                // Add the current shifted A to temp_product
                temp_product = temp_product + (A << i);
            end
        end
        
        // Assign the accumulated product to the output
        product = temp_product;
    end
endmodule
```

### Explanation:

- **Initialization**: We initialize `temp_product` to zero to start with a clean state for accumulation.
- **Looping and Conditional Addition**: A for-loop iterates over each of the 8 bits of `B`. If a bit in `B` is high (1), the partial product is computed by left-shifting `A` by the bit position `i` and then adding it to `temp_product`.
- **Completion**: Once all bits of `B` have been processed, the final `temp_product` holds the result of the multiplication. This value is assigned to the `product` output.

This architecture allows for efficient bit-level multiplication using an accumulating tactic similar to long-hand binary multiplication but within a digital logic framework.