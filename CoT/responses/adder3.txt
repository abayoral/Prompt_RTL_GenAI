To design a 3-bit binary ripple-carry adder using instances of full adders, we'll first identify the requirements and approach before implementing the Verilog module.

### Chain of Thought:

1. **Understand the Full Adder Functionality:**
   - A full adder takes three inputs: two single-bit binary numbers (A and B) and a carry-in (Cin).
   - It produces two outputs: a sum (S) and a carry-out (Cout).

2. **Requirements for the Ripple-Carry Adder:**
   - Add two 3-bit numbers (a and b) and a carry-in (cin).
   - Produce a 3-bit sum (sum) and carry-out for each stage (cout).
   - Use three full adder instances to implement the ripple-carry behavior.

3. **Inputs and Outputs:**
   - Inputs: `a[2:0]`, `b[2:0]`, `cin`
   - Outputs: `sum[2:0]`, `cout[2:0]`

4. **Intermediate Signals:**
   - None required, as cout already represents carry-out between stages.

5. **Structuring the Module:**
   - First, we need to implement the full adder as a standalone module.
   - Then, instantiate the full adder three times inside the top module.
   - Connect the inputs and outputs appropriately: link the carry-out of each stage to the carry-in of the next.

### Writing the Verilog Code:

```verilog
module full_adder (
    input A,
    input B,
    input Cin,
    output S,
    output Cout
);
    // Full adder logic: calculate sum and carry-out
    assign S = A ^ B ^ Cin;
    assign Cout = (A & B) | (B & Cin) | (A & Cin);
endmodule

module top_module( 
    input [2:0] a, b,
    input cin,
    output [2:0] cout, 
    output [2:0] sum 
);
    // Instantiate three full adders for the ripple-carry adder
    full_adder fa0 (
        .A(a[0]),
        .B(b[0]),
        .Cin(cin),
        .S(sum[0]),
        .Cout(cout[0])
    );

    full_adder fa1 (
        .A(a[1]),
        .B(b[1]),
        .Cin(cout[0]),
        .S(sum[1]),
        .Cout(cout[1])
    );

    full_adder fa2 (
        .A(a[2]),
        .B(b[2]),
        .Cin(cout[1]),
        .S(sum[2]),
        .Cout(cout[2])
    );
endmodule
```

### Rationale:
- The `full_adder` module is defined to encapsulate the logic of a single-bit full adder.
- The `top_module` instantiates three full adders to form a ripple-carry adder:
  - `fa0` handles the least significant bit with `cin` as the initial carry-in.
  - `fa1` and `fa2` handle subsequent bits, receiving carry-outs from the previous stages.
- `cout[2]` represents the final carry-out from the full adder chain, indicating an overflow if set.