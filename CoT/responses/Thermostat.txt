### Chain of Thought
1. **Understand the Requirements:**
    - The thermostat needs to control the heater, air conditioner (aircon), and blower fan based on the input conditions.
    - Modes:
        - Heating mode (mode = 1):
            - Turn on the heater if it is too cold (too_cold = 1).
            - Do not use the air conditioner.
        - Cooling mode (mode = 0):
            - Turn on the air conditioner if it is too hot (too_hot = 1).
            - Do not turn on the heater.
    - The fan should be on whenever the heater or air conditioner is on, or if explicitly requested (fan_on = 1).

2. **Determine the Inputs and Outputs:**
    - Inputs:
        - `too_cold`: Signal indicating if temperature is too cold.
        - `too_hot`: Signal indicating if temperature is too hot.
        - `mode`: Signal indicating mode (heating or cooling).
        - `fan_on`: User requested fan-on signal.
    - Outputs:
        - `heater`: Signal to control the heater.
        - `aircon`: Signal to control the air conditioner.
        - `fan`: Signal to control the blower fan.

3. **Define the Logical Expressions:**
    - `heater`: Depends on the heating mode and temperature.
        - When in heating mode (`mode = 1`), the heater should be on if `too_cold = 1`.
        - `heater = mode & too_cold`
    - `aircon`: Depends on the cooling mode and temperature.
        - When in cooling mode (`mode = 0`), the air conditioner should be on if `too_hot = 1`.
        - `aircon = ~mode & too_hot`
    - `fan`: Should be on if the heater or air conditioner is on, or if the fan is explicitly requested.
        - `fan = fan_on | heater | aircon`

4. **Structuring the Module:**
    - Start with the module declaration and specify the inputs and outputs.
    - Implement the logical expressions using `assign` statements to derive the values for the heater, air conditioner, and fan.

### Verilog Code
```verilog
module top_module (
    input too_cold,
    input too_hot,
    input mode,
    input fan_on,
    output heater,
    output aircon,
    output fan
); 
    // Heating logic: heater is on when mode is heating and it's too cold
    assign heater = mode & too_cold;

    // Cooling logic: aircon is on when mode is cooling and it's too hot
    assign aircon = ~mode & too_hot;
    
    // Fan logic: fan is on when heater or aircon is on, or if fan is explicitly requested
    assign fan = fan_on | heater | aircon;

endmodule
```

This Verilog module captures the logic for controlling the heater, air conditioner, and fan based on the described conditions using `assign` statements.