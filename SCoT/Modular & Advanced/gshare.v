You are tasked with designing and implementing a gshare branch predictor characterized by a specific configuration and behavioral requirements. The main structure involves a 7-bit program counter (PC) and a 7-bit global branch history register, combined and hashed using an XOR operation to produce a 7-bit index. This index is used to access a table of 128 two-bit saturating counters, referred to as the Pattern History Table (PHT), to make branch predictions. The global history register maintains a record of the outcomes of the last seven branches. 

This branch predictor system is required to support two distinct operational interfaces: one for issuing predictions and another for updating or 'training' the predictor based on actual branch outcomes.

1. **Prediction Interface**: This part of the interface is activated during the processor's Fetch stage. When a prediction request is made (`predict_valid = 1`), the predictor must determine and output the anticipated direction (taken or not taken) of a branch instruction corresponding to a given PC. Along with this prediction, it should also output the state of the branch history register that was used to arrive at this prediction. After issuing a prediction, the history register should be updated based on the direction predicted for the branch.

2. **Training Interface**: This function is engaged when the processor later discovers the real outcome of the branch. A training request (`train_valid = 1`) provides the necessary information such as the PC of the branch, its actual outcome (taken or not taken), and whether a misprediction occurred. If a branch was mispredicted, the training process must adjust the branch history register to represent its state immediately following the execution of the errant branch, thereby ensuring the branch predictor improves future accuracy. Furthermore, if training and prediction operations overlap for the same index within the same clock cycle, the training operation is primary; it updates the PHT and potentially corrects the history register, given that the prediction becomes obsolete.

The system also includes an asynchronous reset (`areset`), which, when activated, initializes all PHT entries to a 'weakly not-taken' state (represented by the value 2'b01) and clears the global history register.

Based on this specification, design and implement the necessary logic within your module to meet these requirements, ensuring to handle all potential timing and precedent scenarios carefully.