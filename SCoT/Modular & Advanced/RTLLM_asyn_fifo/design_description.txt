As a professional Verilog designer, you're tasked with implementing an asynchronous FIFO with customizable parameters for depth and width. Let's delve into the requirements and components to ensure clarity:

1. **Parameters**:
   - **DEPTH**: This specifies the maximum number of entries in the FIFO and is set to 16, although it can be adjusted for different FIFO sizes.
   - **WIDTH**: This signifies the bit-width of each data entry in the FIFO, set by default to 8 bits but can be configured.

2. **Structure**:
   - The design is divided into several distinct modules and components, each handling specific functionalities necessary for the operation of the FIFO.

3. **Dual-Port RAM**:
   - A key component, this RAM acts as the storage medium for the FIFO.
   - It must support dual-port operations, allowing simultaneous read and write, with independent clock domains (wclk for writing and rclk for reading).
   - Inputs include write and read addresses, clock signals for both read and write operations, data inputs for writing, and data outputs for reading.
   - Write enable (wenc) and read enable (renc) signals control the operations.

4. **Controllers**:
   - **Write Controller**: Manages data writing onto the RAM based on control signals and conditions.
   - **Read Controller**: Manages data retrieval from the RAM, ensuring data coherence and integrity.

5. **Pointer Synchronizers**:
   - **Read Pointer Synchronizer**: Synchronizes the read pointer into the write clock domain using a two-stage flip-flop technique.
   - **Write Pointer Synchronizer**: Synchronizes the write pointer into the read clock domain similarly.

6. **Pointers and Gray Code**:
   - The FIFO employs Gray code to minimize glitches during pointer synchronization across different clock domains.
   - The way pointers determine full and empty states involves comparing specific conditions in their Gray code representations.

7. **Full and Empty Conditions**:
   - These conditions are determined based on the comparison of current and synchronized values of the read and write pointers.
   - **Full State**: Occurs when the write pointer is one step ahead in a specific manner that indicates capacity is reached.
   - **Empty State**: Achieved when read and write pointers equate, suggesting no data left for reading.

8. **Module Inputs and Outputs**:
   - Inputs include control signals like wclk, rclk, winc, rinc, alongside data (wdata).
   - Outputs show FIFO status (wfull, rempty) and provide read data (rdata).

For your task, you'll need to design and implement this asynchronous FIFO in Verilog. The specifications above should guide you through structuring your code, defining each component, and ensuring synchronization between operations in different clock domains to maintain data integrity and correct status signaling.