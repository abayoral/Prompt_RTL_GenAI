Could you provide a detailed Verilog implementation for a multi-bit MUX-based synchronizer given the following constraints and specifications? You should approach this as a professional Verilog designer, ensuring that the design is robust and efficient based on provided requirements.

### Module Functionality:
1. **Synchronizer Task**: The module should handle multi-bit data synchronization across two different clock domains (clk_a and clk_b) using a multiplexer-based technique.
2. **Data Input Behavior**: The input data (data_in) remains constant when the enable signal (data_en) is high. Notably, the data enable signal is constantly high for a minimum duration of three cycles of the clk_b clock.
3. **Data Stability**: The frequency of changes in the data_in signal is quite low, with changes occurring no sooner than every ten clk_b clock cycles.
4. **Clock Domain Responsibilities**:
   - Clock clk_a: Manages input data (data_in) and its corresponding enable signal (data_en).
   - Clock clk_b: Provides delayed enable functionality via two-stage D flip-flops for synchronizing outputs and controls the final data output (dataout).

### Module Definition and Ports:
- **Module Name**: synchronizer
- **Input Ports**:
  - `clk_a`: Clock signal A for input operations.
  - `clk_b`: Clock signal B for output operations.
  - `arstn`: Asynchronous reset A, active low.
  - `brstn`: Asynchronous reset B, active low.
  - `data_in`: 4-bit input data signal.
  - `data_en`: Enable signal for data selection, active when high.

- **Output Port**:
  - `dataout`: 4-bit output data synchronized to clk_b.

### Internal Logic Description:
- **Data Register**: A register (`data_reg`) is used to store the input data signal (`data_in`). The register updates on the rising edge of `clk_a` or resets on the falling edge of `arstn`.
- **Enable Data Register**: A separate register (`en_data_reg`) stores the input enable signal (`data_en`), updating on the same triggering conditions as the data register.
- **Enable Control Registers**: Two pipeline registers (`en_clap_one` and `en_clap_two`) manage the delayed enable signal as seen from the clk_b domain. These update on the rising edge of `clk_b` or reset on the falling edge of `brstn`.
- **Output Assignment**: During clk_b rising edges or brstn falling edges, the `dataout` is set to zero in reset condition or, when not reset, set to the data register value if `en_clap_two` is active. Otherwise, the previous output value is maintained.

### Request:
Please provide the Verilog code that captures the above requirements and details, ensuring that all aspects of synchronization, clock domain crossing, and reset conditions are adequately addressed.