Based on the chain of thought provided, here is the Verilog code for the 2-to-1 multiplexer implemented using both assign and always blocks:

```verilog
module top_module (
    input wire a,
    input wire b,
    input wire sel_b1,
    input wire sel_b2,
    output wire out_assign,
    output reg out_always
);
    // Implementing with assign statement
    assign out_assign = (sel_b1 && sel_b2) ? b : a;

    // Implementing with procedural always block
    always @(sel_b1 or sel_b2 or a or b) begin
        if (sel_b1 && sel_b2)
            out_always = b;
        else
            out_always = a;
    end
endmodule
```

This module:
1. Declares inputs `a`, `b`, `sel_b1`, and `sel_b2`.
2. Declares outputs `out_assign` and `out_always`.
3. Uses an assign statement to implement the multiplexer logic for `out_assign`.
4. Uses an always block with an if statement to implement the same logic for `out_always`.
