Here is the Verilog code implementation for the 512-cell array representing a one-dimensional cellular automaton following Rule 90:

```verilog
module top_module (
    input wire clk,
    input wire load,
    input wire [511:0] data,
    output reg [511:0] q
);

    // Register to hold current state of the automaton
    reg [511:0] current_state;

    // Register to hold next state of the automaton
    reg [511:0] next_state;

    integer i;

    // Always block to handle state initialization and updates
    always @(posedge clk) begin
        if (load) begin
            // Initialize current state with input data
            current_state <= data;
        end else begin
            // Compute next state based on Rule 90
            for (i = 0; i < 512; i = i + 1) begin
                if (i == 0) begin
                    // Handle boundary condition for first cell
                    next_state[i] <= current_state[1] ^ 1'b0;
                end else if (i == 511) begin
                    // Handle boundary condition for last cell
                    next_state[i] <= current_state[510] ^ 1'b0;
                end else begin
                    // General case for cells in the middle
                    next_state[i] <= current_state[i-1] ^ current_state[i+1];
                end
            end
            // Update current state to the next state
            current_state <= next_state;
        end
    end

    // Assign current state to the output q
    always @(current_state) begin
        q <= current_state;
    end

endmodule
```

### Module Explanation:

1. **Module Declaration:**
   - `input wire clk`: Clock signal for sequential updates.
   - `input wire load`: Signal to load initial data.
   - `input wire [511:0] data`: Input data for initializing the cellular automaton.
   - `output reg [511:0] q`: Output representing the current state of the automaton.

2. **Registers:**
   - `current_state`: Holds the current state of the automaton cells.
   - `next_state`: Used to compute and temporarily store the next state of the automaton cells.

3. **Always Block:**
   - Triggered on each rising edge of the clock (`clk`).
   - If `load` is high, initialize `current_state` with `data`.
   - If `load` is low, compute the `next_state` for each cell:
     - For the first cell (`i == 0`), `next_state[0]` is computed as the XOR of `current_state[1]` and 0 (boundary condition).
     - For the last cell (`i == 511`), `next_state[511]` is computed as the XOR of `current_state[510]` and 0 (boundary condition).
     - For all other cells, `next_state[i]` is computed as the XOR of `current_state[i-1]` and `current_state[i+1]`.
   - Update `current_state` to `next_state` after computing all cells.

4. **Output Assignment:**
   - Assign the `current_state` to the output `q` to reflect the current state of the automaton.

This code ensures that the cellular automaton follows Rule 90's update mechanism correctly for a 512-cell array.