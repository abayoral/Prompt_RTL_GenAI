Sure, let's convert your problem-solving steps into Verilog code to create the `top_module` that splits a 16-bit input into its lower and upper bytes.

```verilog
module top_module (
    input wire [15:0] in,      // 16-bit input
    output wire [7:0] out_hi,  // Upper byte output
    output wire [7:0] out_lo   // Lower byte output
);
    // Assign the upper 8 bits of 'in' to 'out_hi'
    assign out_hi = in[15:8];
    
    // Assign the lower 8 bits of 'in' to 'out_lo'
    assign out_lo = in[7:0];
endmodule
```

### Explanation:
1. **Module Declaration:**
   - The module is named `top_module` and has one 16-bit input (`in`) and two 8-bit outputs (`out_hi` and `out_lo`).

2. **Assign the Upper Byte:**
   - `assign out_hi = in[15:8];` - This statement assigns the upper 8 bits of the input `in` to the output `out_hi`.

3. **Assign the Lower Byte:**
   - `assign out_lo = in[7:0];` - This statement assigns the lower 8 bits of the input `in` to the output `out_lo`.

This code adheres to the problem-solving process you described and effectively splits the 16-bit input into its respective upper and lower bytes.