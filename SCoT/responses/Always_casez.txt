Sure, let's implement the priority encoder based on the specified requirements and chain of thought.

Here's the Verilog code to achieve this:

```verilog
module top_module (
    input wire [7:0] in,  // 8-bit input vector
    output reg [2:0] pos  // 3-bit position of the first high bit
);
    // Priority encoder logic
    always @(*) begin
        // Initialize pos to 0
        pos = 3'd0;

        // Check each bit, starting from the most significant to the least significant
        if (in[7])
            pos = 3'd7;
        else if (in[6])
            pos = 3'd6;
        else if (in[5])
            pos = 3'd5;
        else if (in[4])
            pos = 3'd4;
        else if (in[3])
            pos = 3'd3;
        else if (in[2])
            pos = 3'd2;
        else if (in[1])
            pos = 3'd1;
        else if (in[0])
            pos = 3'd0;
    end
endmodule
```

### Explanation:

- **Module Declaration**: The module is named `top_module` and contains an 8-bit input `in` and a 3-bit output `pos`.
- **Always Block**: The block is sensitive to any changes in the input `in`.
- **Initialization**: Inside the always block, the output `pos` is initialized to zero.
- **Bit Checking**:
  - The block checks each bit of the input vector `in` from the most significant bit (bit 7) to the least significant bit (bit 0).
  - As soon as a high bit is found, `pos` is assigned the position of that bit.
  - This process ensures that the highest-priority (most significant) bit's position is captured.
- **Output**: If no bits in `in` are high, `pos` remains zero by default.

This implementation follows the priority encoder functionality, giving precedence to the highest-priority bit set in the input vector.