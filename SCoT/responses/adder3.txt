The given task requires us to implement a 3-bit binary ripple-carry adder using instances of a full adder. Below is the step-by-step implementation based on the given solving process:

### Full Adder Module

First, let's define a full adder module, which will be instantiated three times in our ripple-carry adder.

```verilog
module full_adder (
    input wire a,
    input wire b,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign {cout, sum} = a + b + cin;
endmodule
```

### 3-Bit Ripple-Carry Adder Module

Next, we will define the top-level module for the 3-bit ripple-carry adder. This module will utilize three instances of the `full_adder` module defined above.

```verilog
module top_module (
    input wire [2:0] a,
    input wire [2:0] b,
    input wire cin,
    output wire [2:0] cout,
    output wire [2:0] sum
);
    // Intermediate carry signals
    wire c1, c2;

    // Instantiate first full adder
    full_adder fa0 (
        .a(a[0]),
        .b(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(c1)
    );

    // Instantiate second full adder
    full_adder fa1 (
        .a(a[1]),
        .b(b[1]),
        .cin(c1),
        .sum(sum[1]),
        .cout(c2)
    );

    // Instantiate third full adder
    full_adder fa2 (
        .a(a[2]),
        .b(b[2]),
        .cin(c2),
        .sum(sum[2]),
        .cout(cout[2])
    );

    // Assign carry-out signals
    assign cout[0] = c1;
    assign cout[1] = c2;

endmodule
```

### Explanation

1. **Inputs and Outputs:**
    - Inputs: `a[2:0]`, `b[2:0]`, `cin`
    - Outputs: `cout[2:0]`, `sum[2:0]`

2. **Intermediate Signals:**
    - Use wires `c1` and `c2` to represent intermediate carries.

3. **Module Instantiations:**
    - Three instances of the `full_adder` module are created.
    - Each instance is responsible for adding corresponding bits of `a` and `b` along with the carry-in.

4. **Sum and Carry-Out Assignments:**
    - The sum outputs for each bit are directly assigned from the full adder outputs.
    - `cout[0]` and `cout[1]` are assigned to the intermediate carry signals `c1` and `c2`, respectively.
    - `cout[2]` is assigned to the final carry-out from the last full adder.

Using these steps, we have successfully implemented a 3-bit ripple-carry adder using Verilog.