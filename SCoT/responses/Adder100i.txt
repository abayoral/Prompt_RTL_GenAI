Sure, let's break down the design of a 100-bit ripple-carry adder step by step according to the chain of thought you've provided.

### Step-by-Step Verilog Code Creation

#### 1. **Full Adder Module**
First, we create a submodule for a single-bit full adder. This module will take two single bits, a carry-in, and produce a sum and carry-out.

```verilog
module full_adder (
    input wire a,
    input wire b,
    input wire cin,
    output wire sum,
    output wire cout
);
    assign {cout, sum} = a + b + cin;
endmodule
```

#### 2. **Top Module for 100-bit Ripple-Carry Adder**
Next, we create the top module, `top_module`, for the 100-bit ripple-carry adder. This module will instantiate 100 full adders and connect them in a ripple-carry fashion.

```verilog
module top_module (
    input wire [99:0] a,
    input wire [99:0] b,
    input wire cin,
    output wire [99:0] sum,
    output wire [99:0] cout
);
    // Intermediate carry signals
    wire [99:1] carry; // Carries between the full adders

    // Instantiate the first full adder
    full_adder FA0 (
        .a(a[0]),
        .b(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(cout[0])
    );

    // Generate block to instantiate the remaining 99 full adders
    genvar i;
    generate
        for (i = 1; i < 100; i = i + 1) begin: ripple_adders
            full_adder FA (
                .a(a[i]),
                .b(b[i]),
                .cin(cout[i-1]),
                .sum(sum[i]),
                .cout(cout[i])
            );
        end
    endgenerate
endmodule
```

### Explanation:
- **Full Adder Module**:
  - It takes three inputs: `a`, `b`, and `cin` (carry-in).
  - It produces two outputs: `sum` and `cout` (carry-out).
  - The full adder adds the bits `a`, `b`, and `cin` to produce the `sum` and `cout`.

- **Top Module**:
  - **Inputs/Outputs**:
    - `a[99:0]`: The first 100-bit number.
    - `b[99:0]`: The second 100-bit number.
    - `cin`: The initial carry-in, typically 0 for an adder.
    - `sum[99:0]`: The 100-bit sum.
    - `cout[99:0]`: Intermediate and final carry-out signals. Note: The final carry-out of the entire adder chain is `cout[99]`.
  
  - **Instantiation**:
    - **First Full Adder**:
      - Directly connected to `cin`, `a[0]`, and `b[0]`.
      - Outputs `sum[0]` and `cout[0]`.

    - **Generate Block**:
      - Uses a for loop to instantiate the remaining 99 full adders.
      - Each subsequent full adder's carry-in (`cin`) is connected to the previous full adder's carry-out (`cout`).

      - Syntax: `ripple_adders` is a block name and `i` is the loop variable that ranges from 1 to 99.
      - For each instance of the full adder:
        - `a[i]`, `b[i]`, and `cout[i-1]` are inputs.
        - `sum[i]` and `cout[i]` are outputs.

By following this structure, the 100-bit ripple-carry adder ensures accurate bit-wise addition with proper carry propagation across the chain of full adders.