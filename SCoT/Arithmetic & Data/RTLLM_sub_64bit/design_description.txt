As a professional Verilog designer, your task is to create a module for a 64-bit subtractor, capable of handling high-precision arithmetic operations, and to incorporate overflow checking into the design. 

Module Description:
Your module, named 'sub_64bit', will take two 64-bit input ports, A and B, which represent large signed integers. These are the two operands involved in the subtraction operation (A - B). The core output of this module is the 'result', another 64-bit port representing the difference computed from subtracting B from A.

Additional Requirements:
1. **Overflow Handling**: The module must include an 'overflow' output, a 1-bit signal responsible for indicating the presence of an overflow condition. 

2. **Overflow Conditions**: You need to specifically handle two overflow scenarios:
   - **Positive Overflow**: Occurs when you subtract a negative number (B) from a positive number (A) and the computation unexpectedly yields a negative result.
   - **Negative Overflow**: Occurs when subtracting a positive number (B) from a negative number (A) results in a positive outcome, which is incompatible with the correct arithmetic result.

3. **Overflow Detection Logic**: This involves checking the sign bits of the inputs and the resulting output to assess if an overflow has occurred. This typically means comparing the most significant bits (usually bit 63 in a 64-bit signed integer) of A and B before the operation and of the 'result' post-operation.

Your code should effectively integrate the subtraction logic and overflow detection to ensure precise handling of large signed integers while preventing incorrect computations due to overflows. Do not provide only the result of the subtraction but ensure the module can accurately flag and respond to overflow situations that can arise in digital systems working with 64-bit signed numbers. The final implementation should reflect an efficient synthesis-ready Verilog code, suitable for integration into larger hardware design projects or simulations.