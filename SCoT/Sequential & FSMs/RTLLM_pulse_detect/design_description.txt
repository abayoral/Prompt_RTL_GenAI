As a professional Verilog designer, you are tasked with creating a digital logic design that can reliably detect a specific type of signal pattern, often referred to as a "pulse," from a continuous 1-bit input signal named `data_in`. This input signal operates in synchronization with a clock signal, `clk`, which dictates the timing of the circuit. The input signal's behavior is defined by its transition from a low state (0) to a high state (1) and then back to a low state (0) over the span of three clock cycles; detecting this pattern constitutes the pulse detection task.

To facilitate the module design, several key inputs and outputs need to be specified:

- **Input Ports:**
  - `clk`: This is the clock signal, which is a crucial timing reference for all synchronous operations within the design.
  - `rst_n`: This is an active low reset signal. When asserted (logic 0), it initializes or resets the logic state to a known starting condition.
  - `data_in`: This is the 1-bit signal on which pulse detection is performed, representing the core behavioral focus of the module.

- **Output Ports:**
  - `data_out`: This is the 1-bit signal that outputs a high state (logic 1) precisely at the end of each detected pulse cycle, and remains low (logic 0) otherwise.

The intended module, named `pulse_detect`, should include:
- A logic state tracking mechanism through a register, commonly known as `state`, which maintains the present status in the sequence of detecting a pulse pattern.
- An `always` block, which will monitor both the positive edges of the `clk` signal for synchronous updates and the negative edge of `rst_n` to facilitate asynchronous reset functionality.
- Upon detection of the active low reset, your design should initialize the state register and the `data_out` signal to zero, clearing any detected state or output activity.
- As the main sequential logic progresses, the module should appropriately track the transitions of `data_in`, transitioning through a sequence of states that align with the pulse pattern (0-1-0).
- When `data_in` satisfies the conditions for the final state of a pulse (i.e., reaching the closing 0 after a 1), the `data_out` should briefly assert a logic 1 to signify the pulse's conclusion before resetting to zero until the next pulse is detected.

The deliverable is a comprehensive Verilog code implementation of this module, which encapsulates the above logic requirements, ensuring precise and timely pulse detection aligned with the specifications.