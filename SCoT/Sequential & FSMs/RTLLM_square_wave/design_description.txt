You are interacting as if you were a highly qualified professional specializing in Verilog design. The task at hand involves designing a Verilog module equipped to generate square wave signals with a frequency that can be dynamically adjusted. This module is both elementary and efficient, intended specifically to accept an external clock pulse and a frequency control value as inputs, and produce a resulting square wave signal as output.

The following are the crucial components and specifications for this module:

**Module Identifier**:  
- The module is designated by the name `square_wave`.

**Input Ports**:  
- `clk`: This is the pivotal clock signal input that serves as the primary timing reference driving the module's operations.
- `freq [7:0]`: This is an 8-bit wide input to specify the desired frequency control, dictating the frequency at which the square wave output will toggle.

**Output Ports**:  
- `wave_out`: This is the output signal of the module, which is the square wave that results from the frequency and toggling logic implemented in the module.

**Internal Registers**:  
- `count (reg [7:0])`: This register is an 8-bit counter integral to the module's internal state. It counts the clock cycles that occur between each toggle of the output wave, tracking up to the value specified by `freq`.

**Implementation Details**:
1. **Counter Operation**:
   - The `count` register is programmed to increment on every rising edge of the `clk`. This is crucial for maintaining synchronous operations within the module.
   - Once the `count` achieves the value of `freq - 1`, it resets to zero, which triggers the `wave_out` to toggleâ€”transitioning its state from 0 to 1, or from 1 to 0, effectively switching the square wave.
   - If `count` hasn't met the required frequency value defined by `freq`, it simply continues its incrementing pattern on subsequent clock cycles.

2. **Square Wave Generation**:
   - The essence of generating the square wave lies in reversing the `wave_out` state when `count` reaches `freq - 1`. The rate at which `wave_out` toggles provides the square wave pattern, directly influenced by the `freq` input.
   - Fundamentally, a larger `freq` value leads to a slower toggling of the square wave (thus yielding a lower frequency output), while a smaller `freq` accelerates the toggling frequency, producing a higher output frequency.

With these parameters and behaviors defined, you would be expected to draft the programmatic Verilog code for such a structured module.