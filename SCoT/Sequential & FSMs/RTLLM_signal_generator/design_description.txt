You are a highly skilled Verilog designer specializing in digital design, and your task is to create a Triangle Wave signal generator module using Verilog HDL. The goal is to design a module named `signal_generator` that outputs a triangular waveform by alternately incrementing and decrementing a 5-bit signal labeled as "wave." Here's a more detailed breakdown of what is required:

**Module Functionality:**
- **Waveform Characteristics:** The triangle waveform should smoothly oscillate between the values 0 and 31, with each step altering the waveform value by 1. After reaching 31, it should decrement back to 0, and then repeat this cycle indefinitely.
- **State Management:** Your design should employ a simple state machine with at least two states. One state is responsible for the incrementing phase of the waveform, and another state for the decrementing phase. This is crucial for oscillating between the upper and lower limits of the waveform.

**Port Information:**
- **Inputs:**
  - `clk`: A clock signal that provides timing for sequential operations, ensuring that changes occur synchronously.
  - `rst_n`: An active-low reset signal. When it is asserted low (0), it initializes or resets the state of the module, clearing any data held and prepared for normal operation once the reset is deactivated (1).

- **Outputs:**
  - `wave`: A 5-bit wide signal that serves as the output, holding the current value of the waveform at any given moment during its generation cycle.

**Implementation Details:**
- **Registers and State Variables:**
  - **state Register:** Used to track the current phase of the waveform generation (incrementing or decrementing).
  - **wave Register:** A 5-bit register that stores the current value of the waveform.

- **Behavior on Reset:**
  - When a negative edge is detected on the `rst_n` signal, both `state` and `wave` registers should be initialized to 0, setting the module in a known starting condition to begin waveform generation once active.

- **Waveform Generation Logic:**
  - Utilize a continuous loop (case statement) within an always block triggered on the positive edge of the `clk` or the negative edge of `rst_n`.
  - Implement logic to increment `wave` by 1 during the increment state and switch state when `wave` reaches 31.
  - Implement logic to decrement `wave` by 1 during the decrement state and revert state when `wave` reaches 0.

**Expected Code Output:** Provide all necessary Verilog code to establish the moduleâ€™s behavior, including module declarations, port mappings, internal logic for state management, and descriptions of the actions required in each possible state scenario. Your expertise might suggest optimizations or enhancements for maintaining reliable triangular waveform generation over time, considering edge cases and potential pitfalls in state transitions.