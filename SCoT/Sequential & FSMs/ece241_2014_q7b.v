You have a system where your goal is to develop a digital frequency divider to transform a high-frequency 1000 Hz clock signal into a much lower frequency 1 Hz signal. This 1 Hz signal, which we will call the OneHertz signal, is intended to act as an enabling signal for driving the clock mechanism of a digital wall clock. The challenge is to create this OneHertz signal such that it is activated for only a single clock cycle per second, ensuring the wall clock advances at the correct pace.

To accomplish this, you need to construct a frequency divider using Binary Coded Decimal (BCD) counters that operate based on modulo-10 counting. These counters are instrumental for the task since they effectively divide the incoming clock frequency. The focus is to minimize the use of additional logic gates while employing these BCD counters to reach the desired 1 Hz signal. Furthermore, you are asked to extract and output the enable signals for each of the BCD counters used within your design. Specifically, the enable signal for the fastest counter should be denoted as c_enable[0], while for increasing counters, continue this nomenclature up to c_enable[2] for the slowest.

Importantly, you are provided with a BCD counter module that requires the input clock (clk), a synchronous reset (reset), and an enable signal to be high to permit counting. Your design must ensure all counters in your system are directly driven by the same 1000 Hz clock input provided.

Within your top-level module 'top_module', you need to orchestrate these provided BCD counters to achieve the desired output. You should also ensure that your solution handles counter resets correctly and efficiently produces the enable signals we need. Remember, the primary objectives are creating the OneHertz signal and minimizing additional gate usage while delivering the required functionality.