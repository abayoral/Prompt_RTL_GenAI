The task at hand involves designing a finite state machine (FSM) for detecting and confirming the boundaries of messages within a byte stream that adheres to the PS/2 mouse protocol. In this protocol, every message is exactly three bytes long, but the continuous nature of the byte stream does not provide explicit delimiters to identify the beginning or end of each message. The primary guideline for detecting the start of a new message is that the first byte always has the fourth bit (bit[3]) set to 1. This specific bit configuration differentiates it from the other two bytes that follow it, which may or may not have bit[3] set.

Considering the FSM design, the goal is to build a system capable of monitoring the input byte stream, which is characterized by the single bit input `in[3]`, and determining when a complete three-byte message has been successfully received. The FSM must discard incoming bytes until it encounters a byte with bit[3] equal to 1, marking the start of a new message. Once this initial byte is identified, the FSM should track the collection of the next two sequential bytes, thereby marking the completion of a three-byte message.

The FSM should feature distinct states reflecting the progression through the message. Upon the successful receipt of the third byte, the FSM should immediately signal that the entire message has been received by asserting the `done` output for only one clock cycle. This precise timing is crucial for the correct operation of the FSM.

The architecture of the FSM may require approximately four states to effectively manage the message detection and signaling process. At least one state is needed to issue the `done` signal, keeping in mind that the `done` output should be active for solely a single cycle, which ensures the FSM can promptly reset and prepare to detect subsequent messages in the stream.

The FSM should also incorporate synchronous reset capability, ensuring it can reset its state in a controlled manner if necessary. The emphasis on correctly managing the sequential progression of states and ensuring timely `done` assertions defines the core challenge of this FSM design task.