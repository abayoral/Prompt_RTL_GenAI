As a professional Verilog designer, you are tasked with creating a module, named `freq_divbyfrac`, designed specifically to divide an input clock frequency by a fractional value, such as 3.5. This involves generating a clock signal with a half-integer frequency division using a method called double-edge clocking. The goal is to achieve a precise division of frequency while addressing duty cycle imbalances.

Input and output specifications include:
- `clk`: This is the input clock signal that the module will divide.
- `rst_n`: An active-low reset signal that ensures the module can be initialized to a known state whenever necessary.
- `clk_div`: This is the module's output, which will be the clock signal that has been divided by the fractional value.

To accomplish this, the module must incorporate an implementation that can handle such a fractional division efficiently. For example, to achieve a 3.5x division, follow these steps:
- The process involves counting clock cycles and creating an intermediate divided clock signal.
- Specifically, the counter should cycle through seven clock cycles, as this is twice the division factor (hence 7, for the MUL2_DIV_CLK).
- The implementation should create two distinct periods within these cycles: one lasting for 4 source clock cycles and another for 3 source clock cycles.
- The design needs to phase shift these cycles, generating clock signals that are offset by half a clock period - one version is delayed, and the other is advanced by this half-period.
- By logically OR-ing these intermediate clock signals, the final result is a clock that effectively divides the frequency by the desired fractional amount, smoothing out the periods and ensuring uniformity.

Can you provide a comprehensive solution in Verilog code for this module, which involves these elements and achieves the desired fractional frequency division?