Your task is to design a set of counters configured to function as a conventional 12-hour analog clock representation, incorporating an AM/PM indicator. The counters are triggered by an internal, high-frequency clock signal, labeled as 'clk'. The clock time should increment by issuing a pulse to the 'ena' (enable) input, which occurs precisely once per second, ensuring time progresses in a real-world manner.

Upon asserting the 'reset' signal, the clock should immediately revert to the beginning of a brand-new day at 12:00 AM. In this configuration, the 'pm' output signal distinctly identifies the mid-day period, where '0' signifies AM (Ante Meridiem) and '1' indicates PM (Post Meridiem). The clock maintains separate counters for hours (hh), minutes (mm), and seconds (ss), with each counter employing a two-digit Binary-Coded Decimal format. Hours range from 01 to 12, while both minutes and seconds span from 00 to 59 inclusive.

The 'reset' operation takes precedence over the 'enable' functionality. This stipulates that if the 'reset' signal is activated even momentarily, it will override any concurrent 'enable' signals, ensuring the clock is promptly reset, regardless of the current state of the timekeeping.

Notably, consider the wrap-around conditions specific to 12-hour clocks: at 11:59:59 PM, the clock should transition directly to 12:00:00 AM. At 12:59:59 PM, it should roll over to 01:00:00 PM. Additionally, there is no representation of a '00:00:00' timestamp, adhering to the 12-hour format.

Implement this logic within a module named 'top_module'. The inputs are the 'clk', 'reset', and 'ena', while the outputs are 'pm', 'hh', 'mm', and 'ss', which need to be implemented to adhere to the outlined behavior and specifications. The task requires encoding appropriate behavior for these components within the provided framework, ensuring correct transition and display of chronological time as per real-world scenarios.