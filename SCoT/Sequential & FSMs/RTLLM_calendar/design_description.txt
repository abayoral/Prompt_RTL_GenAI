Could you please develop a Verilog module that functions as a perpetual calendar, starting with initial time values all set to zero for seconds (Secs), minutes (Mins), and hours (Hours)? This module should incorporate the capability for Secs and Mins to loop continuously from 0 to 59. Specifically, when Secs reaches 59, the module should automatically increase Mins by 1 at the subsequent clock cycle. Similarly, when both Secs and Mins reach their maximum value of 59, Hours should consequently be incremented at the next cycle, continuing to count in a cycle from 0 to 23. The module should utilize 6-bit registers for Hours, Mins, and Secs to store their respective current values.

For the implementation, name the module as `calendar`, and include two primary input ports: a clock input (`CLK`) for timing control and an active-high reset signal (`RST`) that initializes the counters. The output ports should consist of three 6-bit values — `Hours`, `Mins`, and `Secs` — which correspond to the current hours, minutes, and seconds.

In terms of the procedural logic, the module is expected to employ three distinct always blocks, each responsible for updating one of the time value registers (Secs, Mins, Hours). These always blocks should be sensitive to the positive edge of the `CLK` for synchronous operations and the positive edge of `RST` for immediate reset functionality. The process should be clearly designed to handle edge cases, such as resetting the time values to zero when RST is asserted, or wrapping the time values accurately when they reach their respective limits.

This implementation should properly encapsulate the described behavior in a well-structured Verilog HDL code that comprehensively simulates a perpetual clock system. Please provide a complete and detailed Verilog code illustrating this logic.