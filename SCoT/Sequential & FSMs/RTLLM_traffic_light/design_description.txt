Could you please provide comprehensive guidance on implementing a traffic light system using Verilog, designed for managing motor vehicle lanes and pedestrian crossings? The proposed system consists of three small LED indicators representing red, yellow, and green lights, alongside a pedestrian button mechanism. In the ordinary sequence, the traffic light for the motor vehicle lane should cycle through 60 clock cycles of the green light, followed by 5 clock cycles of the yellow light, and then 10 clock cycles of the red light. Moreover, there is a special condition to consider when the pedestrian button is activated: if more than 10 cycles remain for the green light, it should be truncated to 10 cycles, unless there are fewer than 10 cycles left, in which case the green light duration stays unchanged. Additionally, the lights for motor vehicles and pedestrians must be synchronized as follows: when the motor lane light is either green or yellow, the pedestrian light remains red; conversely, when the motor lane light is red, the pedestrian light shifts to green. For simplicity, the task here is to exclusively focus on the motor lane lighting.

The module name should be:
- traffic_light

Inputs should include:
- rst_n: a reset signal that is active low.
- clk: a primary clock signal.
- pass_request: a signal indicating a request for allowing passage.

Outputs should encompass:
- clock[7:0]: an 8-bit output indicating the current value of an internal counter.
- red, yellow, green: signals signifying the current traffic light state.

Parameters should define:
- idle, s1_red, s2_yellow, s3_green: enumeration types for different traffic light controller states.

The design should make use of the following Registers and Wires:
- cnt: an 8-bit register functioning as a timing counter.
- state: a 2-bit register for tracking the traffic light controller's current state.
- p_red, p_yellow, p_green: 1-bit registers detailing the upcoming states for the red, yellow, and green signals.

Regarding Implementation:
The design plan entailed includes:

1. An initial always block tasked with managing state transitions. This utilizes a case statement exploring different operational states, characterized as follows:
   - idle: the start state where all outputs are initialized to zero, transitioning swiftly to the s1_red state.
   - s1_red: engages the red signal and holds for 3 counts before moving to the s3_green state unless criteria for continuation in the s1_red state are met.
   - s2_yellow: actuates the yellow signal for 3 counts before switching to the s1_red state, barring conditions to remain in the current state.
   - s3_green: activates the green signal, holds for 3 counts, and switches to s2_yellow state unless conditions necessitate persistence in the current state.

2. A subsequent always block for regulating the internal counter (cnt) logic. At each clock's positive edge or reset's negative edge, the counter decreases by one, with adjustments based on specific conditions:
   - On reset (not rst_n), the counter resets to 10.
   - Activation of pass_request while the green signal is on sets the counter to 10.
   - Switching off from green to another color adjusts the counter to 60.
   - Transitioning out of yellow sets the counter to 5.
   - Converting from the red signal sets it to 10; otherwise, the counter decreases as normal.

3. The assign statement transmits the internal counter (cnt) state to the output clock.

4. The final always block stipulates the output signalsâ€”updating (red, yellow, green) outputs reflective of the previous (p_red, p_yellow, p_green) input values at clock rise or reset fall.

Could you provide the full source code for this traffic light model incorporating all intended functionalities?