```verilog
module float_multi(
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

    // IEEE 754 single-precision float: 1 sign bit, 8 exponent bits, 23 mantissa bits
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [9:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;
    reg [2:0] counter;
    
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 3'b0;
            z <= 32'b0;
        end else begin
            case (counter)
                3'b000: begin
                    // Extract signs, exponents, and mantissas
                    a_sign <= a[31];
                    b_sign <= b[31];
                    a_exponent <= {2'b0, a[30:23]} - 127; // bias removal
                    b_exponent <= {2'b0, b[30:23]} - 127; // bias removal
                    a_mantissa <= {1'b1, a[22:0]}; // implicit leading 1
                    b_mantissa <= {1'b1, b[22:0]}; // implicit leading 1
                    counter <= counter + 1;
                end
                
                3'b001: begin
                    // Perform multiplication of mantissas
                    product <= a_mantissa * b_mantissa;
                    z_exponent <= a_exponent + b_exponent;
                    z_sign <= a_sign ^ b_sign;
                    counter <= counter + 1;
                end
                
                3'b010: begin
                    // Normalize the result
                    if (product[47] == 1) begin
                        z_mantissa <= product[47:24];
                        guard_bit <= product[23];
                        round_bit <= product[22];
                        sticky <= |product[21:0];
                        z_exponent <= z_exponent + 1;
                    end else begin
                        z_mantissa <= product[46:23];
                        guard_bit <= product[22];
                        round_bit <= product[21];
                        sticky <= |product[20:0];
                    end
                    counter <= counter + 1;
                end
                
                3'b011: begin
                    // Rounding
                    if (guard_bit && (round_bit || sticky || z_mantissa[0])) begin
                        z_mantissa <= z_mantissa + 1;
                        if (z_mantissa == 24'hFFFFFF) begin
                            z_exponent <= z_exponent + 1;
                        end
                    end
                    counter <= counter + 1;
                end
                
                3'b100: begin
                    // Checking for special cases: NaN, Infinity
                    if (a[30:23] == 8'hFF || b[30:23] == 8'hFF) begin
                        // NaN or Infinity input
                        z <= {z_sign, 8'hFF, 23'b0};
                    end else if (z_exponent >= 127 + 128) begin
                        // Overflow to Infinity
                        z <= {z_sign, 8'hFF, 23'b0};
                    end else if (z_exponent <= 127 - 127) begin
                        // Underflow to Zero
                        z <= {z_sign, 8'b0, 23'b0};
                    end else begin
                        // Normal case
                        z <= {z_sign, z_exponent[7:0] + 127, z_mantissa[22:0]};
                    end
                    counter <= 0;
                end
            endcase
        end
    end
endmodule
```