```verilog
module freq_divbyodd #(
    parameter NUM_DIV = 5  // Must be an odd number
)(
    input clk,
    input rst_n,
    output reg clk_div
);

    // Ensure NUM_DIV is odd, compile-time check
    initial begin
        if (NUM_DIV % 2 == 0) begin
            $error("NUM_DIV must be an odd number.");
        end
    end

    reg clk_div1, clk_div2;
    reg [$clog2(NUM_DIV)-1:0] cnt1, cnt2;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1 <= 0;
            clk_div1 <= 0;
        end else begin
            if (cnt1 == (NUM_DIV-1)/2) begin
                clk_div1 <= ~clk_div1;
                cnt1 <= 0;
            end else begin
                cnt1 <= cnt1 + 1;
            end
        end
    end

    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2 <= 0;
            clk_div2 <= 0;
        end else begin
            if (cnt2 == (NUM_DIV-1)/2) begin
                clk_div2 <= ~clk_div2;
                cnt2 <= 0;
            end else begin
                cnt2 <= cnt2 + 1;
            end
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            clk_div <= 0;
        end else begin
            clk_div <= clk_div1 || clk_div2;
        end
    end

endmodule
```