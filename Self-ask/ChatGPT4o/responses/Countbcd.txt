Thank you for the clarification. I will proceed with creating the Verilog module for the 4-digit BCD counter with the specified behavior.

```verilog
module top_module (
    input clk,
    input reset,   // Synchronous active-high reset
    output [3:1] ena,
    output reg [15:0] q);

    // Digit 0: ones
    always @(posedge clk) begin
        if (reset) begin
            q[3:0] <= 4'd0;
        end else begin
            if (q[3:0] == 4'd9)
                q[3:0] <= 4'd0;
            else
                q[3:0] <= q[3:0] + 4'd1;
        end
    end

    // Digit 1: tens
    always @(posedge clk) begin
        if (reset) begin
            q[7:4] <= 4'd0;
        end else begin
            if (ena[1]) begin
                if (q[7:4] == 4'd9)
                    q[7:4] <= 4'd0;
                else
                    q[7:4] <= q[7:4] + 4'd1;
            end
        end
    end

    // Digit 2: hundreds
    always @(posedge clk) begin
        if (reset) begin
            q[11:8] <= 4'd0;
        end else begin
            if (ena[2]) begin
                if (q[11:8] == 4'd9)
                    q[11:8] <= 4'd0;
                else
                    q[11:8] <= q[11:8] + 4'd1;
            end
        end
    end

    // Digit 3: thousands
    always @(posedge clk) begin
        if (reset) begin
            q[15:12] <= 4'd0;
        end else begin
            if (ena[3]) begin
                if (q[15:12] == 4'd9)
                    q[15:12] <= 4'd0;
                else
                    q[15:12] <= q[15:12] + 4'd1;
            end
        end
    end

    // Enable signals
    assign ena[1] = (q[3:0] == 4'd9);
    assign ena[2] = (q[7:4] == 4'd9) && ena[1];
    assign ena[3] = (q[11:8] == 4'd9) && ena[2];

endmodule
```