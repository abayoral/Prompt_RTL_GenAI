```verilog
module freq_diveven #(
    parameter integer NUM_DIV = 4 // Division factor; must be an even number
)(
    input  wire clk,    // Input clock signal
    input  wire rst_n,  // Active low reset signal
    output reg  clk_div // Divided clock output signal
);

    // Calculate the maximum count value as half of NUM_DIV
    localparam integer HALF_NUM_DIV = NUM_DIV / 2;

    // 4-bit counter to track clock cycles
    reg [3:0] cnt;

    // Sequential logic for counting and output clock division
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 4'd0;
            clk_div <= 1'b0;
        end else begin
            if (cnt < (HALF_NUM_DIV - 1)) begin
                cnt <= cnt + 1'b1;
            end else begin
                cnt <= 4'd0;
                clk_div <= ~clk_div; // Toggle the divided clock output
            end
        end
    end

endmodule
```