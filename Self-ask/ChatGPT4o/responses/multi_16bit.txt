```verilog
module multi_16bit (
    input wire clk,
    input wire rst_n,
    input wire start,
    input wire [15:0] ain,
    input wire [15:0] bin,
    output reg [31:0] yout,
    output reg done
);

    reg [15:0] areg, breg;  
    reg [31:0] yout_r;
    reg [4:0] i; // Register for shift count (0 to 31 to accommodate 16 bits of multiplication)
    reg done_r;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // On reset initialize all registers
            i <= 0;
            done_r <= 0;
            areg <= 0;
            breg <= 0;
            yout_r <= 0;
        end else begin
            if (start) begin
                if (i == 0) begin
                    // Load multiplicand and multiplier on the first cycle of start
                    areg <= ain;
                    breg <= bin;
                    yout_r <= 0;
                end

                if (i < 16) begin
                    // Check bit of areg at position i
                    if (areg[i]) begin
                        yout_r <= yout_r + (breg << i);
                    end
                    i <= i + 1;
                end else if (i == 16) begin
                    // Set the done flag at the 16th cycle
                    done_r <= 1;
                    i <= i + 1;
                end else if (i == 17) begin
                    // Clear done and reset internal counters post-operation
                    done_r <= 0;
                    i <= 0; // Reset i
                end
            end else begin
                i <= 0;
            end
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            done <= 0;
        end else begin
            done <= done_r;
        end
    end

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            yout <= 0;
        end else if (done_r) begin
            yout <= yout_r;
        end
    end

endmodule
```