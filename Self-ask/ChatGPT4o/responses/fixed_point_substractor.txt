```verilog
module fixed_point_subtractor #(parameter N = 16, parameter Q = 8)(
    input wire [N-1:0] a,
    input wire [N-1:0] b,
    output reg [N-1:0] c
);
    reg sign_a, sign_b, sign_res;
    reg [N-2:0] mag_a, mag_b, mag_res;
    reg [N-1:0] res;

    always @(*) begin
        // Extract sign and magnitude
        sign_a = a[N-1];
        sign_b = b[N-1];
        mag_a = a[N-2:0];
        mag_b = b[N-2:0];

        if (sign_a == sign_b) begin
            // Subtract magnitudes if signs are the same
            if (mag_a >= mag_b) begin
                mag_res = mag_a - mag_b;
                sign_res = sign_a;
            end else begin
                mag_res = mag_b - mag_a;
                sign_res = !sign_b;
            end
        end else begin
            // Add magnitudes if signs are different
            mag_res = mag_a + mag_b;
            if (mag_a > mag_b) begin
                sign_res = sign_a;
            end else if (mag_a < mag_b) begin
                sign_res = sign_b;
            end else begin
                sign_res = 1'b0; // Result is zero
            end
        end

        // Combine sign and magnitude
        res = {sign_res, mag_res};
        
        // Check for zero and explicitly set zero case
        if (res[N-2:0] == 0)
            c = 0;
        else
            c = res;
    end
endmodule
```
