```verilog
module pulse_detect (
    input wire clk,
    input wire rst_n,
    input wire data_in,
    output reg data_out
);

    // State encoding
    typedef enum logic [1:0] {
        IDLE = 2'b00,        // No pulse detected yet
        PULSE_START = 2'b01, // Detected rising edge 0 -> 1
        PULSE_END = 2'b10    // Detected falling edge 1 -> 0
    } state_t;

    state_t state, next_state;

    // State transition logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            state <= IDLE;
            data_out <= 0;
        end else begin
            state <= next_state;
            data_out <= (next_state == PULSE_END) ? 1 : 0;
        end
    end

    // Next state logic
    always @(*) begin
        case (state)
            IDLE: begin
                if (data_in == 1) 
                    next_state = PULSE_START;
                else 
                    next_state = IDLE;
            end

            PULSE_START: begin
                if (data_in == 0)
                    next_state = PULSE_END;
                else
                    next_state = PULSE_START;
            end

            PULSE_END: begin
                next_state = IDLE; // reset to IDLE to detect new pulses
            end

            default: next_state = IDLE;
        endcase
    end

endmodule
```