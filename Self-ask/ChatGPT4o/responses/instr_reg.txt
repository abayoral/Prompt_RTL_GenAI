```verilog
module instr_reg (
    input wire clk,         // Clock signal
    input wire rst,         // Active low reset signal
    input wire [1:0] fetch, // Control signal to determine source of instruction
    input wire [7:0] data,  // 8-bit data input
    
    output reg [2:0] ins,   // 3-bit operation code (opcode) output
    output reg [4:0] ad1,   // 5-bit register address output
    output reg [7:0] ad2    // 8-bit data output from source 2
);

    // Two 8-bit registers for holding instructions
    reg [7:0] ins_p1;
    reg [7:0] ins_p2;

    // Sequential logic to capture instructions on the clock's rising edge
    always @(posedge clk or negedge rst) begin
        if (!rst) begin
            // Reset condition, initialize registers to zero
            ins_p1 <= 8'b0;
            ins_p2 <= 8'b0;
        end else begin
            // Check fetch signal to determine source of instruction
            case (fetch)
                2'b01: ins_p1 <= data; // Fetch from register and store in ins_p1
                2'b10: ins_p2 <= data; // Fetch from RAM/ROM and store in ins_p2
                default: begin
                    // Retain current values in ins_p1 and ins_p2
                    ins_p1 <= ins_p1;
                    ins_p2 <= ins_p2;
                end
            endcase
        end
    end

    // Combinational logic to derive the outputs from the instruction registers
    always @* begin
        // Output the high 3 bits of ins_p1 as the opcode
        ins = ins_p1[7:5];
        // Output the low 5 bits of ins_p1 as the register address
        ad1 = ins_p1[4:0];
        // Output the entire ins_p2 when fetched from the second source
        ad2 = ins_p2;
    end

endmodule
```