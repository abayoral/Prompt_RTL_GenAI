```verilog
module my_dff8 (
    input clk,
    input [7:0] d,
    output reg [7:0] q
);
    always @(posedge clk) begin
        q <= d;
    end
endmodule

module top_module ( 
    input clk, 
    input [7:0] d, 
    input [1:0] sel, 
    output [7:0] q 
);
    wire [7:0] q1, q2, q3;

    // Instantiate and chain the D flip-flops
    my_dff8 dff1 (.clk(clk), .d(d), .q(q1));
    my_dff8 dff2 (.clk(clk), .d(q1), .q(q2));
    my_dff8 dff3 (.clk(clk), .d(q2), .q(q3));
    
    // 4-to-1 multiplexer to choose between the outputs
    always @(*) begin
        case (sel)
            2'b00: q = d;   // No delay
            2'b01: q = q1;  // Delay by 1 clock cycle
            2'b10: q = q2;  // Delay by 2 clock cycles
            2'b11: q = q3;  // Delay by 3 clock cycles
            default: q = 8'b0; // Default case to handle unknown selector values
        endcase
    end
endmodule
```