```verilog
module alu(
    input wire [31:0] a,
    input wire [31:0] b,
    input wire [5:0] aluc,
    output reg [31:0] r,
    output reg zero,
    output reg carry,
    output reg negative,
    output reg overflow,
    output reg flag
);

    always @(*) begin
        // Initialize default outputs
        r = 32'bz;
        zero = 0;
        carry = 0;
        negative = 0;
        overflow = 0;
        flag = 0;
        
        case (aluc)
            6'b100000: begin // ADD
                {carry, r} = a + b;
                overflow = (~a[31] & ~b[31] & r[31]) | (a[31] & b[31] & ~r[31]);
            end
            6'b100001: begin // ADDU
                {carry, r} = a + b;
            end
            6'b100010: begin // SUB
                {carry, r} = a - b;
                overflow = (~a[31] & b[31] & r[31]) | (a[31] & ~b[31] & ~r[31]);
            end
            6'b100011: begin // SUBU
                {carry, r} = a - b;
            end
            6'b100100: begin // AND
                r = a & b;
            end
            6'b100101: begin // OR
                r = a | b;
            end
            6'b100110: begin // XOR
                r = a ^ b;
            end
            6'b100111: begin // NOR
                r = ~(a | b);
            end
            6'b101010: begin // SLT
                r = (a[31] != b[31]) ? a[31] : (a < b);
                flag = r[0];
            end
            6'b101011: begin // SLTU
                r = (a < b);
                flag = r[0];
            end
            6'b000000: begin // SLL
                r = b << a[4:0];
            end
            6'b000010: begin // SRL
                r = b >> a[4:0];
            end
            6'b000011: begin // SRA
                r = $signed(b) >>> a[4:0];
            end
            6'b000100: begin // SLLV
                r = b << a[4:0];
            end
            6'b000110: begin // SRLV
                r = b >> a[4:0];
            end
            6'b000111: begin // SRAV
                r = $signed(b) >>> a[4:0];
            end
            6'b001111: begin // LUI
                r = {b[15:0], 16'b0};
            end
            default: begin
                r = 32'bz; // High-impedance state for unhandled cases
            end
        endcase

        // Zero flag set if result is zero
        zero = (r == 32'b0);
        
        // Negative flag set if result MSB is 1
        negative = r[31];
    end

endmodule
```