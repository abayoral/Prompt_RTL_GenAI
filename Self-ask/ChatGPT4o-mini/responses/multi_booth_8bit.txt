```verilog
module multi_booth_8bit (
    input wire clk,
    input wire reset,
    input wire [7:0] a,
    input wire [7:0] b,
    output reg [15:0] p,
    output reg rdy
);

    reg [15:0] multiplier;
    reg [15:0] multiplicand;
    reg [5:0] ctr; // 6 bits to cover 0-15 for 16 cycles
    reg [1:0] state; // Used for Booth encoding states

    always @(posedge clk or posedge reset) begin
        if (reset) begin
            multiplier <= {{8{a[7]}}, a}; // Sign extend a
            multiplicand <= {{8{b[7]}}, b}; // Sign extend b
            p <= 16'b0;
            rdy <= 0;
            ctr <= 0;
            state <= 2'b00; // Initial state
        end else begin
            if (ctr < 16) begin
                case (state)
                    2'b00: begin // Initialize state
                        if (multiplier[1:0] == 2'b01) begin
                            p <= p + multiplicand; // Add multiplicand
                        end else if (multiplier[1:0] == 2'b10) begin
                            p <= p - multiplicand; // Subtract multiplicand
                        end
                        state <= 2'b01; // Move to shifting state
                    end
                
                    2'b01: begin // Shift state
                        multiplicand <= multiplicand << 1; // Shift multiplicand left
                        multiplier <= {multiplier[14:0], 1'b0}; // Shift multiplier
                        ctr <= ctr + 1; // Increment cycle counter
                        state <= 2'b00; // Return to initialization state

                        if (ctr == 15) begin
                            rdy <= 1; // Set ready signal at the end
                        end
                    end
                endcase
            end
        end
    end
endmodule
```