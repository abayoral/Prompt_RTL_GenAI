```verilog
module add1 (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (cin & (a ^ b));
endmodule

module add16 (
    input [15:0] a,
    input [15:0] b,
    input cin,
    output [15:0] sum,
    output cout
);
    wire [15:0] sum_internal;
    wire [15:0] cout_internal;
    
    genvar i;
    generate
        for (i = 0; i < 16; i = i + 1) begin : full_adders
            if (i == 0) begin
                add1 fa(.a(a[i]), .b(b[i]), .cin(cin), .sum(sum_internal[i]), .cout(cout_internal[i]));
            end else begin
                add1 fa(.a(a[i]), .b(b[i]), .cin(cout_internal[i-1]), .sum(sum_internal[i]), .cout(cout_internal[i]));
            end
        end
    endgenerate
    
    assign sum = sum_internal;
    assign cout = cout_internal[15]; // Final carry-out
endmodule

module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire cout_lower;
    wire [15:0] sum_lower;
    wire [15:0] sum_upper;

    add16 lower_adder (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(0),
        .sum(sum_lower),
        .cout(cout_lower)
    );

    add16 upper_adder (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(cout_lower),
        .sum(sum_upper),
        .cout() // Ignored carry-out
    );

    assign sum = {sum_upper, sum_lower};
endmodule
```