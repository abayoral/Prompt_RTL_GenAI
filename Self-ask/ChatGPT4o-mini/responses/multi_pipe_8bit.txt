```verilog
module multi_pipe_8bit (
    input wire clk,
    input wire rst_n,
    input wire mul_en_in,
    input wire [7:0] mul_a,
    input wire [7:0] mul_b,
    output reg mul_en_out,
    output reg [15:0] mul_out
);
    reg [7:0] mul_a_reg, mul_b_reg;
    reg [15:0] partial_products [0:7]; // To hold partial products
    reg [15:0] sum;
    reg [3:0] count; // To count the number of bits processed
    reg [15:0] mul_out_reg;

    // Reset and enable control logic
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            mul_en_out <= 0;
            mul_out_reg <= 0;
            count <= 0;
            sum <= 0;
            mul_a_reg <= 0;
            mul_b_reg <= 0;
        end else begin
            mul_en_out <= mul_en_in; // Sample the input enable signal
            if (mul_en_in) begin
                mul_a_reg <= mul_a; // Capture multiplicand
                mul_b_reg <= mul_b; // Capture multiplier
                count <= 0; // Reset count for multiplication
            end
            
            // Perform multiplication in pipeline
            if (count < 8) begin
                // Generate the partial product
                if (mul_b_reg[count]) begin
                    partial_products[count] <= {8'b0, mul_a_reg}; // Left shift to the appropriate position
                end else begin
                    partial_products[count] <= 0;
                end
                count <= count + 1;
            end

            // Calculate the sum of partial products after all bits processed
            if (count == 8) begin
                sum <= partial_products[0] + partial_products[1] +
                        partial_products[2] + partial_products[3] +
                        partial_products[4] + partial_products[5] +
                        partial_products[6] + partial_products[7];
                mul_out_reg <= sum; // Store the final product
                mul_out <= sum; // Output final product
            end
        end
    end
endmodule
```