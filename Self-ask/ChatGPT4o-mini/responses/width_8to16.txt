```verilog
module width_8to16 (
    input wire clk,
    input wire rst_n,
    input wire valid_in,
    input wire [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    reg [7:0] data_first;
    reg ready;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            data_out <= 16'b0;
            valid_out <= 1'b0;
            ready <= 1'b0;
        end else begin
            if (valid_in) begin
                if (!ready) begin
                    data_first <= data_in;  // Store first 8-bit input
                    ready <= 1'b1;
                end else begin
                    data_out <= {data_first, data_in}; // Concatenate to form 16-bit output
                    valid_out <= 1'b1; // Set valid output high
                    ready <= 1'b0; // Reset ready for the next pair
                end
            end else begin
                valid_out <= 1'b0; // Clear valid output if no valid input
            end
        end
    end

endmodule
```