```
module top_module(
    input in,
    input [3:0] state,
    output [3:0] next_state,
    output out
); //

    parameter A=0, B=1, C=2, D=3;

    // State transition logic: Derive an equation for each state flip-flop.
    assign next_state[A] = (state[A] & ~in); // State A transitions to A if in=0
    assign next_state[B] = (state[B] & ~in) | (state[A] & in); // State B transitions to C if in=0, else to B
    assign next_state[C] = (state[C] & ~in) | (state[B] & in); // State C transitions to A if in=0, else to D
    assign next_state[D] = (state[D] & ~in) | (state[C] & in); // State D transitions to C if in=0, else to B

    // Output logic: 
    assign out = state[D]; // Output high when in state D

endmodule
```