```
module radix2_div (
    input         clk,
    input         rst,
    input         sign,
    input  [7:0]  dividend,
    input  [7:0]  divisor,
    input         opn_valid,
    output reg    res_valid,
    output reg [15:0] result
);

    reg [7:0] abs_dividend;
    reg [7:0] neg_divisor;
    reg [3:0] cnt;
    reg       start_cnt;
    reg [15:0] SR;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            res_valid <= 0;
            cnt <= 0;
            start_cnt <= 0;
            result <= 0;
            SR <= 0;
        end else if (opn_valid && !res_valid) begin
            abs_dividend <= (sign && dividend[7]) ? ~dividend + 1 : dividend;
            neg_divisor <= (sign && divisor[7]) ? ~divisor + 1 : divisor;
            SR <= {abs_dividend, 1'b0}; // Initialize SR with abs_dividend shifted left
            cnt <= 1;
            start_cnt <= 1;
            res_valid <= 0;
        end else if (start_cnt) begin
            if (cnt == 8) begin
                start_cnt <= 0;
                res_valid <= 1;
                result <= {SR[7:0], SR[15:8]}; // Remainder first, then Quotient
            end else begin
                if (SR[15:8] >= neg_divisor) begin
                    SR[15:8] <= SR[15:8] + neg_divisor; // Subtracting NEG_DIVISOR
                    SR[8] <= 1; // Set quotient bit
                end else begin
                    SR[8] <= 0;
                end
                SR <= SR << 1; // Shift left
                cnt <= cnt + 1;
            end
        end
    end

endmodule
```