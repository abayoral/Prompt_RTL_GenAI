```
module float_multi (
    input clk,
    input rst,
    input [31:0] a,
    input [31:0] b,
    output reg [31:0] z
);

    reg [2:0] counter;
    reg [23:0] a_mantissa, b_mantissa, z_mantissa;
    reg [7:0] a_exponent, b_exponent, z_exponent;
    reg a_sign, b_sign, z_sign;
    reg [49:0] product;
    reg guard_bit, round_bit, sticky;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            counter <= 3'b000;
            z <= 32'b0;
        end else begin
            case (counter)
                3'b000: begin
                    // Extracting components
                    a_sign <= a[31];
                    b_sign <= b[31];
                    a_exponent <= a[30:23];
                    b_exponent <= b[30:23];
                    a_mantissa <= {1'b1, a[22:0]}; // Implicit leading 1
                    b_mantissa <= {1'b1, b[22:0]}; // Implicit leading 1
                    counter <= counter + 1;
                end
                3'b001: begin
                    // Check for special cases
                    if (a_exponent == 8'hFF || b_exponent == 8'hFF) begin
                        // Handle NaN or infinity cases
                        z <= 32'b11111111111111111111111111111111; // Set to NaN representation
                        counter <= 3'b111; // Jump to end
                    end else begin
                        // Normal multiplication processing
                        product <= a_mantissa * b_mantissa;
                        z_sign <= a_sign ^ b_sign; // Determine the sign of the result
                        z_exponent <= a_exponent + b_exponent - 8'h7F; // Combined exponent
                        counter <= counter + 1;
                    end
                end
                3'b010: begin
                    // Rounding and adjustment phase
                    // Check the product size and adjust exponent
                    if (product[49] == 1) begin
                        z_mantissa <= product[48:25]; // Normalized
                        z_exponent <= z_exponent + 1;
                    end else begin
                        z_mantissa <= product[47:24]; // Normalized
                    end
                    // Rounding
                    guard_bit <= product[24];
                    round_bit <= product[23];
                    sticky <= |product[22:0];
                    if (guard_bit && (round_bit || sticky)) begin
                        z_mantissa <= z_mantissa + 1;
                    end
                    counter <= counter + 1;
                end
                3'b011: begin
                    // Finalizing z
                    if (z_mantissa[23]) begin
                        z <= {z_sign, z_exponent + 1'b1, z_mantissa[22:0]};
                    end else begin
                        z <= {z_sign, z_exponent, z_mantissa[22:0]};
                    end
                    counter <= 3'b111; // Jump to end
                end
                3'b111: begin
                    // Hold final result
                    counter <= counter; // Latch the last output
                end
            endcase
        end
    end
endmodule
```