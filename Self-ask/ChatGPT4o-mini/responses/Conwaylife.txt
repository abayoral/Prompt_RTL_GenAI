```verilog
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q ); 

    reg [255:0] next_q;

    always @(posedge clk) begin
        if (load) begin
            q <= data;
        end else begin
            q <= next_q;
        end
    end

    always @* begin
        next_q = q; // Default: Current state remains the same

        for (int i = 0; i < 16; i = i + 1) begin
            for (int j = 0; j < 16; j = j + 1) begin
                int alive_neighbours = 0;

                // Calculate the number of alive neighbours
                for (int x = -1; x <= 1; x = x + 1) begin
                    for (int y = -1; y <= 1; y = y + 1) begin
                        if (x == 0 && y == 0) continue; // Skip the cell itself
                        int ni = (i + x + 16) % 16; // Toroidal wrap-around
                        int nj = (j + y + 16) % 16; // Toroidal wrap-around
                        alive_neighbours += q[ni * 16 + nj]; // Counting alive neighbours
                    end
                end

                // Apply the Game of Life rules
                case (alive_neighbours)
                    2: next_q[i * 16 + j] = q[i * 16 + j]; // Remain unchanged
                    3: next_q[i * 16 + j] = 1; // Becomes alive
                    default: next_q[i * 16 + j] = 0; // Becomes dead
                endcase
            end
        end
    end
endmodule
```