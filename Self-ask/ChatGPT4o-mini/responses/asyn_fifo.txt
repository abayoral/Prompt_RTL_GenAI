```
module dual_port_ram #(
    parameter WIDTH = 8,
    parameter DEPTH = 16
) (
    input wire wclk,
    input wire wenc,
    input wire [3:0] waddr,
    input wire [WIDTH-1:0] wdata,
    input wire rclk,
    input wire renc,
    input wire [3:0] raddr,
    output reg [WIDTH-1:0] rdata
);
    reg [WIDTH-1:0] ram [0:DEPTH-1];

    always @(posedge wclk) begin
        if (wenc) begin
            ram[waddr] <= wdata;
        end
    end

    always @(posedge rclk) begin
        if (renc) begin
            rdata <= ram[raddr];
        end
    end
endmodule

module asyn_fifo #(
    parameter WIDTH = 8,
    parameter DEPTH = 16
) (
    input wire wclk,
    input wire rclk,
    input wire wrstn,
    input wire rrstn,
    input wire winc,
    input wire rinc,
    input wire [WIDTH-1:0] wdata,
    output wire wfull,
    output wire rempty,
    output reg [WIDTH-1:0] rdata
);
    localparam ADDR_WIDTH = $clog2(DEPTH);
    
    reg [ADDR_WIDTH:0] wptr_gray = 0;
    reg [ADDR_WIDTH:0] rptr_gray = 0;
    reg [ADDR_WIDTH:0] wptr_bin = 0;
    reg [ADDR_WIDTH:0] rptr_bin = 0;
    
    wire [ADDR_WIDTH:0] wptr_gray_next;
    reg [ADDR_WIDTH:0] wptr_bin_next;
    
    // Gray code to binary conversion
    function [ADDR_WIDTH:0] gray_to_bin(input [ADDR_WIDTH:0] gray);
        integer i;
        begin
            gray_to_bin[ADDR_WIDTH] = gray[ADDR_WIDTH];
            for (i = ADDR_WIDTH-1; i >= 0; i = i - 1) begin
                gray_to_bin[i] = gray[i] ^ gray_to_bin[i+1];
            end
        end
    endfunction

    // Binary to Gray code conversion
    function [ADDR_WIDTH:0] bin_to_gray(input [ADDR_WIDTH:0] bin);
        begin
            bin_to_gray = bin ^ (bin >> 1);
        end
    endfunction

    // Synchronizing write pointer
    always @(posedge wclk or negedge wrstn) begin
        if (!wrstn) begin
            wptr_gray <= 0;
        end else if (winc) begin
            wptr_gray <= bin_to_gray(wptr_bin + 1);
        end
    end

    always @(posedge rclk or negedge rrstn) begin
        if (!rrstn) begin
            rptr_gray <= 0;
        end else begin
            rptr_gray <= wptr_gray; // Synchronizing read pointer
        end
    end

    always @(posedge wclk) begin
        wptr_bin <= gray_to_bin(wptr_gray);
    end

    always @(posedge rclk) begin
        rptr_bin <= gray_to_bin(rptr_gray);
    end

    // Address computation
    wire [ADDR_WIDTH-1:0] write_address = wptr_bin[ADDR_WIDTH-1:0];
    wire [ADDR_WIDTH-1:0] read_address = rptr_bin[ADDR_WIDTH-1:0];
    
    // FIFO status flags
    assign wfull = (rptr_gray[ADDR_WIDTH] ^ wptr_gray[ADDR_WIDTH]) && (rptr_gray[ADDR_WIDTH-1:0] == wptr_gray[ADDR_WIDTH-1:0]);
    assign rempty = (rptr_gray == wptr_gray);
    
    // Instantiating dual-port RAM
    dual_port_ram #(
        .WIDTH(WIDTH),
        .DEPTH(DEPTH)
    ) ram_instance (
        .wclk(wclk),
        .wenc(winc & ~wfull),
        .waddr(write_address),
        .wdata(wdata),
        .rclk(rclk),
        .renc(rinc & ~rempty),
        .raddr(read_address),
        .rdata(rdata)
    );
endmodule
```