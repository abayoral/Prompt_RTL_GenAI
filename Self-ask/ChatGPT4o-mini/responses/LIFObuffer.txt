```verilog
module LIFObuffer (
    input  wire [3:0] dataIn,
    input  wire       RW,
    input  wire       EN,
    input  wire       Rst,
    input  wire       Clk,
    output reg        EMPTY,
    output reg        FULL,
    output reg [3:0] dataOut
);
    reg [3:0] stack_mem [3:0]; // 4 entries of 4-bit data
    reg [1:0] SP; // Stack pointer (2 bits is enough for 4 entries)

    always @(posedge Clk or posedge Rst) begin
        if (Rst) begin
            // Resetting the stack and stack pointer
            SP <= 2'b00;
            EMPTY <= 1'b1;
            FULL <= 1'b0;
            dataOut <= 4'b0000;
            // Clear the stack
            stack_mem[0] <= 4'b0000;
            stack_mem[1] <= 4'b0000;
            stack_mem[2] <= 4'b0000;
            stack_mem[3] <= 4'b0000;
        end else if (EN) begin
            if (RW == 1'b0 && !FULL) begin
                // Push operation
                stack_mem[SP] <= dataIn;
                SP <= SP + 1'b1;
            end else if (RW == 1'b1 && !EMPTY) begin
                // Pop operation
                SP <= SP - 1'b1;
                dataOut <= stack_mem[SP];
                stack_mem[SP] <= 4'b0000; // Clear the popped data
            end

            // Update FULL and EMPTY flags
            EMPTY <= (SP == 2'b00);
            FULL <= (SP == 2'b10);
        end
    end
endmodule
```