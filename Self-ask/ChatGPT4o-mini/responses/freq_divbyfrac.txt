```
module freq_divbyfrac (
    input wire clk,
    input wire rst_n,
    output reg clk_div
);
    // Constants
    localparam MUL2_DIV_CLK = 7;
    localparam DIV_CLK1 = 4; // Number of ticks for the first phase
    localparam DIV_CLK2 = 3; // Number of ticks for the second phase

    // Counter for clock division
    reg [2:0] counter; // 3 bits enough for max value of 7
    reg clk_phase1;
    reg clk_phase2;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            counter <= 3'b000;
            clk_phase1 <= 1'b0;
            clk_phase2 <= 1'b0;
            clk_div <= 1'b0;
        end else begin
            // Counting for 7 ticks
            if (counter < MUL2_DIV_CLK - 1) begin
                counter <= counter + 1'b1;
            end else begin
                counter <= 3'b000; // Reset counter
            end

            // Generate two phases
            // Phase 1
            if (counter < DIV_CLK1) begin
                clk_phase1 <= 1'b1; // First phase high for 4 ticks
            end else begin
                clk_phase1 <= 1'b0; // Then low
            end

            // Phase 2
            if (counter < DIV_CLK2) begin
                clk_phase2 <= 1'b1; // Second phase high for 3 ticks
            end else begin
                clk_phase2 <= 1'b0; // Then low
            end

            // Combine phases for final output
            clk_div <= clk_phase1 | clk_phase2;
        end
    end
endmodule
```