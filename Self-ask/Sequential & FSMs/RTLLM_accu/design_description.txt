You need to create a Verilog module designed to accumulate serial input data and provide an output once a specific condition is met. The module is intended to process an 8-bit input data signal, accumulate it, and generate a valid output signal under certain conditions. Below is an elaborated set of requirements and clarifications for implementing this module as a professional Verilog designer:

1. **Module Name**: The module should be named "accu," which signifies accumulation functionality within your project.

2. **Input Ports**:
   - **clk**: This is the clock input used to provide a timing reference for all synchronous operations within the module.
   - **rst_n**: Active-low reset input signal that initializes the module's state to a known condition. The underscore reflects its active-low behavior, meaning the module resets when this signal is de-asserted.
   - **data_in[7:0]**: An 8-bit wide bus input acting as the source of the data that needs to be accumulated. Each piece of incoming data is treated as an unsigned integer value for accumulation purposes.
   - **valid_in**: A control signal indicating that the current 8-bit data on `data_in` is available and valid for processing. This signal informs the module to read the data at the positive clock edge.

3. **Output Ports**:
   - **valid_out**: This output control signal becomes active (logic high) when the accumulation condition is satisfied. Specifically, it indicates that the sum of four data inputs has been calculated and is ready for output. This state lasts for one clock cycle only and returns to inactive (logic low) subsequently.
   - **data_out[9:0]**: A 10-bit output bus providing the resulting accumulated sum of the four consecutive 8-bit input data entries when `valid_out` is asserted. The 10-bit width accommodates the maximum possible value of the accumulation (4 times the maximum 8-bit value).

4. **Implementation Requirements**:
   - **Synchronous Operation**: Utilize the `clk` signal for synchronizing input reception and output transmission. Ensure operations such as data accumulation and valid signal toggling are aligned with clock cycles.
   - **Reset Behavior**: Upon activation of `rst_n` (when it is low), the module should clear any stored accumulation data and reset the `valid_out` signal, ensuring no residual data impacts subsequent operations.
   - **Data Accumulation**: On the assertion of `valid_in`, capture the `data_in` and add it to an internal sum register. This process should repeat for four valid data pieces.
   - **Condition for Output**: Only after collecting four valid `data_in` inputs should `data_out` reflect the accumulated value, and `valid_out` should toggle high for exactly one clock cycleâ€”indicative of this state.
   - **Interim State Handling**: Ensure no output (either in terms of data or signals) when fewer than four input data values have been received, maintaining control integrity until the accumulation condition is met.

Considering the outlined requirements and behaviors, you need to write a complete Verilog code that efficiently realizes this module, ensuring adherence to these specified conditions and logic.