The single clarifying question that is absolutely necessary is:

"When load is asserted on the rising edge of the clock, should the entire q array be exclusively updated from data (i.e. bypassing the rule 90 computation for that cycle), or should both operations be applied?"

Based on your statement that the load input is intended to be synchronous (loading data into q on the rising edge of the clock), I will assume that when load is high, q is set to data and the rule 90 update is not performed on that cycle.

Below is the complete Verilog module:

module top_module(
    input clk,
    input load,
    input [511:0] data,
    output reg [511:0] q
);

    integer i;
    reg [511:0] next_q;

    // Combinational logic to compute the next state for all cells
    // Boundary cells use a neighbor value of zero.
    always @(*) begin
        // For q[0], left neighbor is taken as zero.
        next_q[0] = q[1] ^ 1'b0;
        // For q[511], right neighbor is taken as zero.
        next_q[511] = q[510] ^ 1'b0;
        // Compute the new state for cells 1 to 510 based on the XOR of neighbors.
        for(i = 1; i < 511; i = i + 1) begin
            next_q[i] = q[i-1] ^ q[i+1];
        end
    end

    // Synchronous update: load new data if load is high, otherwise update using rule 90.
    always @(posedge clk) begin
        if(load)
            q <= data;
        else
            q <= next_q;
    end

endmodule