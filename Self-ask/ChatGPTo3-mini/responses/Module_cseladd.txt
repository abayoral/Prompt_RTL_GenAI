module mux16_2_to_1(
    input sel,
    input [15:0] in0,
    input [15:0] in1,
    output [15:0] out
);
    assign out = sel ? in1 : in0;
endmodule

module top_module(
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);

    // Internal wires for the lower and upper 16-bit sums and their carry outs
    wire [15:0] lower_sum;
    wire lower_cout;
    wire [15:0] upper_sum0, upper_sum1;
    wire upper_cout0, upper_cout1;
    wire [15:0] muxed_upper;

    // Instantiate the lower 16-bit adder with carry-in set to 0
    add16 lower_add(
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(lower_sum),
        .cout(lower_cout)
    );

    // Instantiate the upper 16-bit adder with carry-in = 0
    add16 upper_add0(
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b0),
        .sum(upper_sum0),
        .cout(upper_cout0)
    );

    // Instantiate the upper 16-bit adder with carry-in = 1
    add16 upper_add1(
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(1'b1),
        .sum(upper_sum1),
        .cout(upper_cout1)
    );

    // Use the carry-select technique: select the correct upper sum based on the lower adder's carry-out
    mux16_2_to_1 mux_inst(
        .sel(lower_cout),
        .in0(upper_sum0),
        .in1(upper_sum1),
        .out(muxed_upper)
    );

    // Combine the lower and selected upper parts into the final 32-bit sum
    assign sum = {muxed_upper, lower_sum};

endmodule