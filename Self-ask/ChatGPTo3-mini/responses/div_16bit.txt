module div_16bit(
    input  [15:0] A,      // 16-bit dividend
    input  [7:0]  B,      // 8-bit divisor
    output reg [15:0] result, // Quotient output
    output reg [15:0] odd     // Remainder output
);

  // Internal registers to hold inputs and intermediate signals
  reg [15:0] a_reg;
  reg [7:0]  b_reg;
  reg [15:0] quotient;
  reg [15:0] remainder;
  integer i;

  // First combinational block: latch inputs into internal registers.
  always @(*) begin
      a_reg = A;
      b_reg = B;
  end

  // Second combinational block: perform iterative binary division.
  always @(*) begin
      // Initialize remainder and quotient.
      remainder = 16'b0;
      quotient  = 16'b0;

      // Optional: handle divide-by-zero.
      // In this implementation, if B == 0 the quotient is set to all ones and remainder is A.
      if (b_reg == 8'b0) begin
          quotient  = 16'hFFFF;
          remainder = a_reg;
      end
      else begin
          // Perform long division by iterating from MSB to LSB.
          // For each bit position, shift remainder left and bring in the next bit from the dividend.
          for (i = 15; i >= 0; i = i - 1) begin
              // Shift left remainder and insert the current bit of the dividend.
              remainder = {remainder[14:0], a_reg[i]};
              // Compare the current remainder with the divisor (zero‐extended to 16 bits).
              if (remainder >= {8'b0, b_reg}) begin
                  remainder = remainder - {8'b0, b_reg};
                  quotient[i] = 1'b1;
              end 
              else begin
                  quotient[i] = 1'b0;
              end
          end
      end

      // Assign the computed values to the module outputs.
      result = quotient;
      odd = remainder;
  end

endmodule