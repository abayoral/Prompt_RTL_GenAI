module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // State encoding
    localparam WAIT_START = 2'd0,
               DATA       = 2'd1,
               CHECK_STOP = 2'd2,
               WAIT_STOP  = 2'd3;
               
    reg [1:0] state, next_state;
    reg [2:0] bit_count;  // to count 0-7 data bits
    reg [7:0] data_reg;   // shift register for data bits

    // FSM state register and datapath update (synchronous reset)
    always @(posedge clk) begin
        if(reset) begin
            state    <= WAIT_START;
            bit_count<= 3'd0;
            data_reg <= 8'd0;
            out_byte <= 8'd0;
            done     <= 1'b0;
        end else begin
            state <= next_state;
            case(state)
                WAIT_START: begin
                    done <= 1'b0;  // clear done when not completing
                    if(in==1'b0) begin
                        // detected start bit; prepare for data reception
                        data_reg <= 8'd0;
                        bit_count <= 3'd0;
                    end
                end
                DATA: begin
                    // Latch in the data bit into the correct bit position.
                    // Since protocol sends LSB first, the first received bit is stored at bit 0.
                    data_reg[bit_count] <= in;
                    if(bit_count != 3'd7)
                        bit_count <= bit_count + 3'd1;
                end
                CHECK_STOP: begin
                    // Here, if in==1 then stop bit is valid.
                    if(in==1'b1) begin
                        out_byte <= data_reg;  // latch the correctly received byte to output
                        done <= 1'b1;
                    end else begin
                        done <= 1'b0;  // not valid yet
                    end
                end
                WAIT_STOP: begin
                    // Not ready to sample a new byte until a stop bit (logic 1) is received
                    done <= 1'b0;
                end
                default: begin
                    done <= 1'b0;
                end
            endcase
        end
    end

    // Next state logic
    always @(*) begin
        // Default next_state is current state.
        next_state = state;
        case(state)
            WAIT_START: begin
                // In idle, wait for low level (start bit) before beginning reception.
                if(in==1'b0)
                    next_state = DATA;
                else
                    next_state = WAIT_START;
            end
            DATA: begin
                // After sampling 8 bits, move to check the stop bit
                if(bit_count == 3'd7)
                    next_state = CHECK_STOP;
                else
                    next_state = DATA;
            end
            CHECK_STOP: begin
                if(in==1'b1)
                    // If stop bit is as expected, complete the byte and return to idle.
                    next_state = WAIT_START;
                else
                    // If stop bit isn't correct, wait until a stop bit is encountered.
                    next_state = WAIT_STOP;
            end
            WAIT_STOP: begin
                if(in==1'b1)
                    next_state = WAIT_START;
                else
                    next_state = WAIT_STOP;
            end
            default: next_state = WAIT_START;
        endcase
    end

endmodule