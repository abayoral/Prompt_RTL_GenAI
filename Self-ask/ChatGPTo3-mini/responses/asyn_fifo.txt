module asyn_fifo #(parameter WIDTH = 8,
                   parameter DEPTH = 16,
                   parameter ADDR_WIDTH = $clog2(DEPTH),
                   parameter PTR_WIDTH = ADDR_WIDTH + 1)
(
    input                     wclk,    // Write clock
    input                     rclk,    // Read clock
    input                     wrstn,   // Active-low write reset
    input                     rrstn,   // Activeâ€“low read reset
    input                     winc,    // Write increment signal
    input                     rinc,    // Read increment signal
    input      [WIDTH-1:0]    wdata,   // Data to write
    output                    wfull,   // FIFO full flag
    output                    rempty,  // FIFO empty flag
    output     [WIDTH-1:0]    rdata    // Data read out
);

  // Function: Convert Binary to Gray code.
  function [PTR_WIDTH-1:0] bin2gray;
    input [PTR_WIDTH-1:0] bin;
    begin
      bin2gray = (bin >> 1) ^ bin;
    end
  endfunction

  // Internal pointer registers (binary and Gray coded)
  reg [PTR_WIDTH-1:0] wptr_bin, wptr_gray;
  reg [PTR_WIDTH-1:0] rptr_bin, rptr_gray;

  // Synchronizer registers for pointer crossing
  // In write clock domain: Synchronize rptr_gray from read domain
  reg [PTR_WIDTH-1:0] wq1_rptr, wq2_rptr;
  // In read clock domain: Synchronize wptr_gray from write domain
  reg [PTR_WIDTH-1:0] rq1_wptr, rq2_wptr;

  // Full and empty flags (combinational assignments will be done using registered pointers)
  wire wfull_int;
  wire rempty_int;
  
  // Generate write and read addresses for the RAM (use lower ADDR_WIDTH bits of the binary pointers)
  wire [ADDR_WIDTH-1:0] waddr = wptr_bin[ADDR_WIDTH-1:0];
  wire [ADDR_WIDTH-1:0] raddr = rptr_bin[ADDR_WIDTH-1:0];

  // Write domain logic
  always @(posedge wclk or negedge wrstn) begin
    if (!wrstn) begin
      wptr_bin  <= 0;
      wptr_gray <= 0;
      wq1_rptr  <= 0;
      wq2_rptr  <= 0;
    end
    else begin
      // Synchronize the read pointer (Gray coded) into the write clock domain 
      wq1_rptr <= rptr_gray;
      wq2_rptr <= wq1_rptr;
      // Increment write pointer if allowed
      if (winc && !wfull_int) begin
        wptr_bin  <= wptr_bin + 1;
        wptr_gray <= bin2gray(wptr_bin + 1);
      end
    end
  end

  // Full condition: When the Gray-coded write pointer equals the read pointer
  // with MSB inverted and the remaining bits equal.
  assign wfull_int = (wptr_gray == {~wq2_rptr[PTR_WIDTH-1], wq2_rptr[PTR_WIDTH-2:0]});
  assign wfull = wfull_int;

  // Read domain logic
  always @(posedge rclk or negedge rrstn) begin
    if (!rrstn) begin
      rptr_bin  <= 0;
      rptr_gray <= 0;
      rq1_wptr  <= 0;
      rq2_wptr  <= 0;
    end
    else begin
      // Synchronize the write pointer (Gray coded) into the read clock domain
      rq1_wptr <= wptr_gray;
      rq2_wptr <= rq1_wptr;
      // Increment read pointer if allowed
      if (rinc && !rempty_int) begin
        rptr_bin  <= rptr_bin + 1;
        rptr_gray <= bin2gray(rptr_bin + 1);
      end
    end
  end

  // Empty condition: When the Gray-coded read pointer equals the synchronized write pointer.
  assign rempty_int = (rptr_gray == rq2_wptr);
  assign rempty = rempty_int;

  // Instantiate the dual port RAM for data storage.
  dual_port_ram #(.WIDTH(WIDTH), .DEPTH(DEPTH))
    ram_inst
    (
      .wclk  (wclk),
      .wenc  (winc && !wfull_int),  // Write enable only if not full and write increment asserted.
      .waddr (waddr),
      .wdata (wdata),
      .rclk  (rclk),
      .renc  (rinc && !rempty_int),  // Read enable only if not empty and read increment asserted.
      .raddr (raddr),
      .rdata (rdata)
    );

endmodule

// Dual-Port RAM Module
module dual_port_ram #(parameter WIDTH = 8,
                       parameter DEPTH = 16,
                       parameter ADDR_WIDTH = $clog2(DEPTH))
(
    input                   wclk,    // Write clock
    input                   wenc,    // Write enable
    input [ADDR_WIDTH-1:0]  waddr,   // Write address
    input [WIDTH-1:0]       wdata,   // Write data
    input                   rclk,    // Read clock
    input                   renc,    // Read enable
    input [ADDR_WIDTH-1:0]  raddr,   // Read address
    output reg [WIDTH-1:0]  rdata    // Registered read data
);
  // Memory array
  reg [WIDTH-1:0] mem [0:DEPTH-1];

  // Write port: Write to memory on the rising edge of wclk when enabled.
  always @(posedge wclk) begin
    if (wenc)
      mem[waddr] <= wdata;
  end

  // Read port: Read from memory on the rising edge of rclk when enabled.
  // The output is registered.
  always @(posedge rclk) begin
    if (renc)
      rdata <= mem[raddr];
  end

endmodule