module parallel2serial(
    input            clk,
    input            rst_n,
    input   [3:0]    d,
    output reg       valid_out,
    output reg       dout
);

    // Internal registers:
    // cnt tracks which bit is being sent out (0 to 3)
    reg [1:0] cnt;
    // data_reg holds the 4-bit parallel data during a conversion cycle.
    reg [3:0] data_reg;

    // On reset, all registers are set to an initial state.
    // On every rising clock edge, if reset is not asserted (rst_n==1),
    // we perform the following:
    // 1. When starting a new conversion (cnt==0), latch the input d into data_reg.
    // 2. Output the corresponding bit of data_reg on dout.
    //    The bit selection follows: cnt==0 -> MSB, cnt==1 -> next, ..., cnt==3 -> LSB.
    // 3. valid_out remains high during the conversion sequence.
    // 4. The counter cycles from 0 to 3. Once cnt reaches 3, it resets to 0,
    //    indicating that the conversion for that group of four bits is complete.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt       <= 2'b00;
            data_reg  <= 4'b0;
            dout      <= 1'b0;
            valid_out <= 1'b0;
        end else begin
            // Latch input data at the beginning of a conversion sequence.
            if (cnt == 2'b00)
                data_reg <= d;
                
            // Select the bit to output based on the current counter value.
            case (cnt)
                2'b00: dout <= data_reg[3]; // MSB
                2'b01: dout <= data_reg[2];
                2'b10: dout <= data_reg[1];
                2'b11: dout <= data_reg[0]; // LSB
                default: dout <= 1'b0;
            endcase
            
            // valid_out is high during the entire conversion sequence.
            valid_out <= 1'b1;
            
            // Update the counter for next clock cycle.
            if (cnt == 2'b11)
                cnt <= 2'b00;
            else
                cnt <= cnt + 1;
        end
    end

endmodule