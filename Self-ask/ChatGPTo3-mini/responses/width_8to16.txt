module width_8to16(
    input         clk,
    input         rst_n,
    input         valid_in,
    input  [7:0]  data_in,
    output reg    valid_out,
    output reg [15:0] data_out
);

  // FSM state declaration.
  localparam S_WAIT_FIRST  = 2'b00,
             S_WAIT_SECOND = 2'b01,
             S_OUTPUT      = 2'b10;

  reg [1:0] state, next_state;
  reg [7:0] stored_first;

  // Synchronous FSM state update and data path.
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      state      <= S_WAIT_FIRST;
      stored_first <= 8'd0;
      data_out   <= 16'd0;
      valid_out  <= 1'b0;
    end else begin
      state <= next_state;
      
      // In S_OUTPUT state, output the data and assert valid_out.
      // Otherwise, valid_out is deasserted.
      if (state == S_OUTPUT) begin
        valid_out <= 1'b1;
        // data_out was already computed in S_WAIT_SECOND.
      end else begin
        valid_out <= 1'b0;
      end

      case (state)
        S_WAIT_FIRST: begin
          if (valid_in) begin
            stored_first <= data_in;  // capture first 8-bit word.
          end
        end
        S_WAIT_SECOND: begin
          if (valid_in) begin
            // When the second valid 8-bit word arrives,
            // combine the stored first data (MSB) and current data (LSB)
            // and store in data_out.
            data_out <= {stored_first, data_in};
          end
        end
        default: ;  // No specific update required in S_OUTPUT.
      endcase
    end
  end

  // Next state logic.
  always @(*) begin
    case (state)
      S_WAIT_FIRST: begin
          if (valid_in)
            next_state = S_WAIT_SECOND;
          else
            next_state = S_WAIT_FIRST;
      end
      S_WAIT_SECOND: begin
          if (valid_in)
            next_state = S_OUTPUT;
          else
            next_state = S_WAIT_SECOND;
      end
      S_OUTPUT: begin
          next_state = S_WAIT_FIRST;
      end
      default: next_state = S_WAIT_FIRST;
    endcase
  end

endmodule