module add1 (
    input a,
    input b,
    input cin,
    output sum,
    output cout
);
    // Full adder: sum = a xor b xor cin, cout = (a & b) | (b & cin) | (a & cin)
    assign sum = a ^ b ^ cin;
    assign cout = (a & b) | (b & cin) | (a & cin);
endmodule

module add16 (
    input [15:0] a,
    input [15:0] b,
    input cin,
    output [15:0] sum,
    output cout
);
    wire [15:0] carry;
    
    // Instantiate bit 0 separately to start the chain
    add1 bit0 (
        .a(a[0]),
        .b(b[0]),
        .cin(cin),
        .sum(sum[0]),
        .cout(carry[0])
    );
    
    // Generate loop for bits 1 through 15
    genvar i;
    generate
        for (i = 1; i < 16; i = i + 1) begin : add1_chain
            add1 adder (
                .a(a[i]),
                .b(b[i]),
                .cin(carry[i-1]),
                .sum(sum[i]),
                .cout(carry[i])
            );
        end
    endgenerate
    
    assign cout = carry[15];
endmodule

module top_module (
    input [31:0] a,
    input [31:0] b,
    output [31:0] sum
);
    wire carry_out_low;
    
    // Lower 16-bit addition. Carry-in is 0.
    add16 lower_add (
        .a(a[15:0]),
        .b(b[15:0]),
        .cin(1'b0),
        .sum(sum[15:0]),
        .cout(carry_out_low)
    );
    
    // Upper 16-bit addition. Carry-in is the lower adder's carry-out.
    add16 upper_add (
        .a(a[31:16]),
        .b(b[31:16]),
        .cin(carry_out_low),
        .sum(sum[31:16]),
        .cout()  // Carry-out is ignored.
    );
    
endmodule