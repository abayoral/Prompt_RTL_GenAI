module multi_pipe_8bit(
    input         clk,
    input         rst_n,    // active low reset
    input         mul_en_in,
    input  [7:0]  mul_a,
    input  [7:0]  mul_b,
    output        mul_en_out,
    output [15:0] mul_out
);

  // Pipeline stage enable signals
  reg en_stage1, en_stage2, en_stage3, en_stage4;

  // Stage 1: Input registers
  reg [7:0] mul_a_reg;
  reg [7:0] mul_b_reg;

  // Stage 2: Partial sum registers (combining partial products pairwise)
  reg [15:0] sum_stage2_0;
  reg [15:0] sum_stage2_1;
  reg [15:0] sum_stage2_2;
  reg [15:0] sum_stage2_3;

  // Stage 3: Partial sum registers (combining sums from stage2)
  reg [15:0] sum_stage3_0;
  reg [15:0] sum_stage3_1;

  // Stage 4: Final product register
  reg [15:0] mul_out_reg;

  // ---------------------------------------------
  // Pipeline enable signal propagation
  // ---------------------------------------------
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      en_stage1 <= 1'b0;
      en_stage2 <= 1'b0;
      en_stage3 <= 1'b0;
      en_stage4 <= 1'b0;
    end
    else begin
      en_stage1 <= mul_en_in;
      en_stage2 <= en_stage1;
      en_stage3 <= en_stage2;
      en_stage4 <= en_stage3;
    end
  end

  // ---------------------------------------------
  // Stage 1: Capture inputs only when mul_en_in is high
  // ---------------------------------------------
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_a_reg <= 8'b0;
      mul_b_reg <= 8'b0;
    end
    else begin
      // Only latch inputs when enabled
      if (mul_en_in) begin
        mul_a_reg <= mul_a;
        mul_b_reg <= mul_b;
      end
    end
  end

  // ---------------------------------------------
  // Generate Partial Products (combinational logic)
  // Each partial product is the multiplicand shifted appropriately if the corresponding bit of mul_b_reg is 1.
  // ---------------------------------------------
  wire [15:0] temp0 = mul_b_reg[0] ? {8'b0, mul_a_reg}                : 16'b0;  // shift 0
  wire [15:0] temp1 = mul_b_reg[1] ? {7'b0, mul_a_reg, 1'b0}            : 16'b0;  // shift 1
  wire [15:0] temp2 = mul_b_reg[2] ? {6'b0, mul_a_reg, 2'b0}            : 16'b0;  // shift 2
  wire [15:0] temp3 = mul_b_reg[3] ? {5'b0, mul_a_reg, 3'b0}            : 16'b0;  // shift 3
  wire [15:0] temp4 = mul_b_reg[4] ? {4'b0, mul_a_reg, 4'b0}            : 16'b0;  // shift 4
  wire [15:0] temp5 = mul_b_reg[5] ? {3'b0, mul_a_reg, 5'b0}            : 16'b0;  // shift 5
  wire [15:0] temp6 = mul_b_reg[6] ? {2'b0, mul_a_reg, 6'b0}            : 16'b0;  // shift 6
  wire [15:0] temp7 = mul_b_reg[7] ? {1'b0, mul_a_reg, 7'b0}            : 16'b0;  // shift 7

  // ---------------------------------------------
  // Stage 2: Partial Sum Calculation (first level of addition)
  // Combine partial products pairwise.
  // ---------------------------------------------
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      sum_stage2_0 <= 16'b0;
      sum_stage2_1 <= 16'b0;
      sum_stage2_2 <= 16'b0;
      sum_stage2_3 <= 16'b0;
    end
    else if (en_stage1) begin
      sum_stage2_0 <= temp0 + temp1;
      sum_stage2_1 <= temp2 + temp3;
      sum_stage2_2 <= temp4 + temp5;
      sum_stage2_3 <= temp6 + temp7;
    end
    else begin
      // Optionally hold previous values or clear; here we clear when not enabled.
      sum_stage2_0 <= 16'b0;
      sum_stage2_1 <= 16'b0;
      sum_stage2_2 <= 16'b0;
      sum_stage2_3 <= 16'b0;
    end
  end

  // ---------------------------------------------
  // Stage 3: Partial Sum Calculation (second level of addition)
  // Combine the sums from Stage 2.
  // ---------------------------------------------
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      sum_stage3_0 <= 16'b0;
      sum_stage3_1 <= 16'b0;
    end
    else if (en_stage2) begin
      sum_stage3_0 <= sum_stage2_0 + sum_stage2_1;
      sum_stage3_1 <= sum_stage2_2 + sum_stage2_3;
    end
    else begin
      sum_stage3_0 <= 16'b0;
      sum_stage3_1 <= 16'b0;
    end
  end

  // ---------------------------------------------
  // Stage 4: Final Product Calculation
  // Combine the two sums from Stage 3 to produce the final result.
  // ---------------------------------------------
  always @(posedge clk or negedge rst_n) begin
    if (!rst_n) begin
      mul_out_reg <= 16'b0;
    end
    else if (en_stage3) begin
      mul_out_reg <= sum_stage3_0 + sum_stage3_1;
    end
    else begin
      mul_out_reg <= 16'b0;
    end
  end

  // ---------------------------------------------
  // Output Assignment
  // The output enable signal is taken from the last pipeline stage.
  // The result is output only when the pipelined enable is active.
  // ---------------------------------------------
  assign mul_en_out = en_stage4;
  assign mul_out = (mul_en_out) ? mul_out_reg : 16'b0;

endmodule