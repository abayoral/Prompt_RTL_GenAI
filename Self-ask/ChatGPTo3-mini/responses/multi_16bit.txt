module multi_16bit(
    input           clk,
    input           rst_n,
    input           start,
    input  [15:0]   ain,
    input  [15:0]   bin,
    output [31:0]   yout,
    output          done
);

    // 5-bit counter (0 to 17 requires 5 bits)
    reg [4:0] i;
    // Registers for outputs and intermediate values
    reg [31:0] yout_r;
    reg        done_r;
    reg [15:0] areg;
    reg [15:0] breg;

    // Shift count register update
    // This always block updates "i" on every rising clock edge or falling reset.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            i <= 5'd0;
        else if (start) begin
            if (i < 5'd17)
                i <= i + 5'd1;
            else
                i <= i;  // Hold the value if it reached 17 already
        end else
            i <= 5'd0;  // When start is inactive, reset the counter
    end

    // Multiplication completion flag generation
    // Updates done_r based on the count 'i'
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n)
            done_r <= 1'b0;
        else begin
            if (i == 5'd16)
                done_r <= 1'b1;  // Multiplication is complete at shift count 16
            else if (i == 5'd17)
                done_r <= 1'b0;  // Reset completion flag at shift count 17
            else
                done_r <= done_r;  // Maintain previous state otherwise
        end
    end

    // Shift and accumulate operation
    // This block handles loading the multiplicand/multiplier and accumulating the product.
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            areg    <= 16'd0;
            breg    <= 16'd0;
            yout_r  <= 32'd0;
        end else if (start) begin
            if (i == 5'd0) begin
                // At the beginning of multiplication, load the inputs into internal registers
                areg   <= ain;
                breg   <= bin;
                yout_r <= 32'd0;
            end else if (i >= 5'd1 && i <= 5'd16) begin
                // For each bit of areg (from bit 0 to bit 15),
                // if the bit is high, add a properly shifted version of breg to the product.
                // Note: Since i starts at 1 for the first bit, we use index (i-1).
                if (areg[i-1])
                    yout_r <= yout_r + ( {16'd0, breg} << (i-1) );
                else
                    yout_r <= yout_r;  // No change when the bit is low
            end
        end else begin
            // When start is inactive, no operation; internal registers retain their state.
            areg   <= areg;
            breg   <= breg;
            yout_r <= yout_r;
        end
    end

    // Output assignments
    assign yout = yout_r;
    assign done = done_r;

endmodule