module freq_divbyodd #(
    parameter NUM_DIV = 5  // Must be an odd number
)(
    input wire clk,
    input wire rst_n,
    output wire clk_div
);

    // Calculate half value; for odd numbers, integer division is used.
    localparam HALF = NUM_DIV / 2;

    // Counters for rising and falling edges
    reg [$clog2(NUM_DIV)-1:0] cnt1; 
    reg [$clog2(NUM_DIV)-1:0] cnt2;

    // Intermediate clock signals for rising and falling edges
    reg clk_div1;
    reg clk_div2;

    // Process that handles rising edge of clk
    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt1      <= 0;
            clk_div1  <= 0;
        end else begin
            if (cnt1 == (NUM_DIV - 1))
                cnt1 <= 0;
            else
                cnt1 <= cnt1 + 1;

            // Toggle clk_div1 when counter reaches HALF
            if (cnt1 == HALF)
                clk_div1 <= ~clk_div1;
        end
    end

    // Process that handles falling edge of clk
    always @(negedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt2      <= 0;
            clk_div2  <= 0;
        end else begin
            if (cnt2 == (NUM_DIV - 1))
                cnt2 <= 0;
            else
                cnt2 <= cnt2 + 1;

            // Toggle clk_div2 when counter reaches HALF
            if (cnt2 == HALF)
                clk_div2 <= ~clk_div2;
        end
    end

    // The output clock is the logical OR of the two divided clocks
    assign clk_div = clk_div1 | clk_div2;

endmodule