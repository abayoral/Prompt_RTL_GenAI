module top_module(
    input clk,
    input in,
    input reset,    // Synchronous reset
    output reg [7:0] out_byte,
    output reg done
);

    // State encoding
    localparam S_IDLE      = 2'd0,
               S_DATA      = 2'd1,
               S_PARITY    = 2'd2,
               S_WAIT_STOP = 2'd3;

    reg [1:0] state;
    reg [2:0] bit_count;  // counts 0 to 7 for the eight data bits
    reg [7:0] data_reg;   // to store the received data bits
    // p_reset is used to clear the parity module at the very beginning of a new byte.
    reg p_reset;

    // The parity checking module outputs 'odd' == 1 if the number of ones
    // in the bits fed (data & parity bit) is odd.
    wire parity_odd;
    // We only want the parity module to update during the reception phases
    // (data bits and the parity bit). When not receiving, feed it a 0.
    wire par_in = ((state == S_DATA) || (state == S_PARITY)) ? in : 1'b0;

    // Instantiate the provided parity module.
    parity parity_inst (
        .clk(clk),
        .reset(p_reset),
        .in(par_in),
        .odd(parity_odd)
    );

    // FSM to receive a serial byte with an extra parity bit and stop bit.
    // The serial protocol:
    //  - Start bit: must be 0.
    //  - 8 data bits: LSB first.
    //  - Parity bit: must make the total number of 1's (in data and parity) odd.
    //  - Stop bit: must be 1.
    // When a parity or stop bit error occurs the byte is discarded.
    // If the stop bit isn't seen immediately, the FSM waits until it finds a 1.
    always @(posedge clk) begin
        if (reset) begin
            state    <= S_IDLE;
            bit_count<= 3'd0;
            data_reg <= 8'd0;
            out_byte <= 8'd0;
            done     <= 1'b0;
            p_reset  <= 1'b0;
        end else begin
            // by default, deassert done.
            done <= 1'b0;
            case (state)
                S_IDLE: begin
                    // In idle we wait for the start bit (logic 0) to appear.
                    if (in == 1'b0) begin
                        state    <= S_DATA;
                        bit_count<= 3'd0;
                        p_reset  <= 1'b1;  // Reset the parity module so it starts fresh.
                    end else begin
                        state   <= S_IDLE;
                        p_reset <= 1'b0;
                    end
                end

                S_DATA: begin
                    // Ensure the parity module reset is only one clock-cycle.
                    p_reset <= 1'b0;
                    // Sample the data bit.
                    // Since data is sent LSB first, store the received bit into data_reg[bit_count].
                    data_reg[bit_count] <= in;
                    if (bit_count == 3'd7) begin
                        // After the 8th data bit, move to sampling the parity bit.
                        state <= S_PARITY;
                    end else begin
                        bit_count <= bit_count + 1;
                        state     <= S_DATA;
                    end
                end

                S_PARITY: begin
                    // The parity bit is automatically fed to the parity module via par_in.
                    // Transition to waiting for the stop bit.
                    state <= S_WAIT_STOP;
                end

                S_WAIT_STOP: begin
                    // Wait here until a stop bit (logic 1) appears.
                    if (in == 1'b1) begin
                        // Stop bit detected.
                        // Assert done and output data only if parity passes.
                        if (parity_odd) begin
                            out_byte <= data_reg;
                            done     <= 1'b1;
                        end
                        // Whether parity passed or not, transition back to idle.
                        state <= S_IDLE;
                    end else begin
                        // Still waiting for stop bit.
                        state <= S_WAIT_STOP;
                    end
                end

                default: state <= S_IDLE;
            endcase
        end
    end

endmodule