```verilog
module parallel2serial (
    input clk,
    input rst_n,
    input [3:0] d,
    output reg valid_out,
    output reg dout
);

    reg [1:0] cnt;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            cnt <= 2'd0;
            dout <= 1'b0;
            valid_out <= 1'b0;
        end else begin
            valid_out <= 1'b1; // Valid is high during the data transmission
            case (cnt)
                2'd0: dout <= d[3]; // MSB first
                2'd1: dout <= d[2];
                2'd2: dout <= d[1];
                2'd3: dout <= d[0]; // LSB last
            endcase
            
            if (cnt == 2'd3) begin
                cnt <= 2'd0; // Reset counter after last bit
            end else begin
                cnt <= cnt + 1'b1;
            end
        end
    end

endmodule
```