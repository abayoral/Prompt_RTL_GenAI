```verilog
module width_8to16 (
    input clk,
    input rst_n,
    input valid_in,
    input [7:0] data_in,
    output reg valid_out,
    output reg [15:0] data_out
);

    // Internal register to store the first 8-bit input
    reg [7:0] first_data;
    // Internal state to track if we have the first 8-bit input
    reg first_data_ready;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            // asynchronous reset
            first_data <= 8'd0;
            first_data_ready <= 1'b0;
            valid_out <= 1'b0;
            data_out <= 16'd0;
        end else begin
            if (valid_in) begin
                if (!first_data_ready) begin
                    // Store the first 8-bit data
                    first_data <= data_in;
                    first_data_ready <= 1'b1;
                end else begin
                    // Form the 16-bit data on the second valid input
                    data_out <= {first_data, data_in};
                    valid_out <= 1'b1;
                    // Reset the flag for storing the first data
                    first_data_ready <= 1'b0;
                end
            end else begin
                // If valid_in is not asserted, valid_out should be deasserted
                valid_out <= 1'b0;
            end
        end
    end

endmodule
```