```verilog
module top_module(
    input clk,
    input load,
    input [255:0] data,
    output reg [255:0] q
); 

    reg [255:0] state;

    // Function to calculate the modulo 16 in a wrap-around fashion for toroid.
    function [3:0] wrap(
        input [3:0] num
    );
        begin
            wrap = (num + 16) % 16;
        end
    endfunction

    // Function to count the alive neighbors of a cell at (row, col)
    function [3:0] count_neighbors(
        input [255:0] grid,
        input [3:0] row,
        input [3:0] col
    );
        integer i, j;
        reg [3:0] r, c;
        begin
            count_neighbors = 0;
            for (i = -1; i <= 1; i = i + 1) begin
                for (j = -1; j <= 1; j = j + 1) begin
                    if (i != 0 || j != 0) begin
                        r = wrap(row + i);
                        c = wrap(col + j);
                        count_neighbors = count_neighbors + grid[r*16 + c];
                    end
                end
            end
        end
    endfunction

    // Next state calculation for each cell
    integer row, col;
    always @(posedge clk) begin
        if (load) begin
            state <= data;
        end else begin
            for (row = 0; row < 16; row = row + 1) begin
                for (col = 0; col < 16; col = col + 1) begin
                    case (count_neighbors(state, row, col))
                        4'b0000, 4'b0001: q[row*16 + col] = 0; // 0 or 1 neighbor
                        4'b0010: q[row*16 + col] = state[row*16 + col]; // 2 neighbors
                        4'b0011: q[row*16 + col] = 1; // 3 neighbors
                        default: q[row*16 + col] = 0; // 4 or more neighbors
                    endcase
                end
            end
            state <= q;
        end
    end

endmodule
```