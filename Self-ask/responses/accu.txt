```verilog
module accu (
    input wire clk,
    input wire rst_n,
    input wire [7:0] data_in,
    input wire valid_in,
    output reg valid_out,
    output reg [9:0] data_out
);

    reg [9:0] sum;
    reg [1:0] count;

    always @(posedge clk or negedge rst_n) begin
        if (!rst_n) begin
            sum <= 10'd0;
            count <= 2'd0;
            valid_out <= 1'b0;
            data_out <= 10'd0;
        end else begin
            valid_out <= 1'b0;  // Reset valid_out every cycle

            if (valid_in) begin
                sum <= sum + data_in;
                count <= count + 1'b1;

                if (count == 2'd3) begin
                    data_out <= sum + data_in; // Accumulate final input
                    valid_out <= 1'b1; // Output is valid for one clock cycle
                    sum <= 10'd0; // Reset sum
                    count <= 2'd0; // Reset count
                end
            end
        end
    end

endmodule
```